{
	"id": 0,
	"name": "gs-tools",
	"kind": 0,
	"flags": {},
	"children": [
		{
			"id": 27,
			"name": "\"async/asyncs\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/async/asyncs.ts",
			"children": [
				{
					"id": 28,
					"name": "Asyncs",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Collection of miscellaneous methods to do asynchronous operations."
					},
					"children": [
						{
							"id": 29,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 30,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the given function asynchronously.",
										"returns": "Promise that will be resolved when the function has finished running.\n"
									},
									"typeParameter": [
										{
											"id": 31,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Return type of the given function."
											}
										}
									],
									"parameters": [
										{
											"id": 32,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The function to run."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 33,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 34,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								29
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						28
					]
				}
			]
		},
		{
			"id": 1,
			"name": "\"checks\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/checks.ts",
			"children": [
				{
					"id": 2,
					"name": "Checks",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"comment": {
						"shortText": "Utility to do various dynamic time type checks.",
						"text": "In addition to supporting dynamic type checks, this uses Typescript's type guards to cast the\nvalues. For example:\n\n```typescript\nif (Checks.isArrayOf<string>(input, String)) {\n  // It's safe to treat input as string[] in this block.\n}\n```\n\nUse this library whenever you want to narrow down a type, either due to union types or due to\ntype inheritance.\n"
					},
					"children": [
						{
							"id": 3,
							"name": "isArrayOf",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 4,
									"name": "isArrayOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks if the given value is an array of a single type.",
										"returns": "`True` iff the value is an array whose elements are instances of the given constructor.\n"
									},
									"typeParameter": [
										{
											"id": 5,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the array element."
											}
										}
									],
									"parameters": [
										{
											"id": 6,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to be checked."
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 7,
											"name": "checkedType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Constructor of the type that the array element should be."
											},
											"type": {
												"type": "reference",
												"name": "ICtor",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							]
						},
						{
							"id": 8,
							"name": "isInstanceOf",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 9,
									"name": "isInstanceOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks if the given value is an instance of the given type.",
										"text": "This handles primitives like `string`, `number`, `boolean` by treating them as their non\nprimitive versions. I.e.: `String`, `Number`, and `Boolean`.\n",
										"returns": "`True` iff the value is an instance of the given constructor.\n"
									},
									"typeParameter": [
										{
											"id": 10,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the value."
											}
										}
									],
									"parameters": [
										{
											"id": 11,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to be checked."
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 12,
											"name": "checkedType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Constructor of the type that the value should be. For primitives like\n   `number`, pass in the object version, `Number`."
											},
											"type": {
												"type": "reference",
												"name": "ICtor",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							]
						},
						{
							"id": 13,
							"name": "isRecordOf",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 14,
									"name": "isRecordOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Checks if the given value is a record.",
										"text": "A record is an object with `string` key and any values. This particular method makes sure that\nevery member of the record is of the given type.\n",
										"returns": "`True` iff the value is a record whos values are instances of the given constructor.\n"
									},
									"typeParameter": [
										{
											"id": 15,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the record values."
											}
										}
									],
									"parameters": [
										{
											"id": 16,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The value to be checked."
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 17,
											"name": "checkedType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Constructor of the type that the record values should be."
											},
											"type": {
												"type": "reference",
												"name": "ICtor",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "boolean"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								3,
								8,
								13
							]
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						2
					]
				}
			]
		},
		{
			"id": 154,
			"name": "\"collection/arrays\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/collection/arrays.ts",
			"children": [
				{
					"id": 174,
					"name": "Arrays",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Collection of methods to help manipulate arrays.",
						"text": "The general flow is to input an array, do a bunch of transformations, and output the transformed\narray at the end. Note that the input array should never be used again. This class does not make\nany guarantee that it will / will not modify the input array.\n\nExample:\n\n```typescript\nArrays\n    .of(['a', 'b', 'c'])\n    .diff(['b', 'c'])\n    .data;  // ['a']\n```\n\nNote that every element in the array must be of the same type.\n"
					},
					"children": [
						{
							"id": 175,
							"name": "fromIterable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 176,
									"name": "fromIterable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts by using any `Iterable` objects.",
										"returns": "Array wrapper object to do operations on.\n"
									},
									"typeParameter": [
										{
											"id": 177,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the array element."
											}
										}
									],
									"parameters": [
										{
											"id": 178,
											"name": "iterable",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Iterable object to start from."
											},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentArray",
										"id": 155,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						},
						{
							"id": 179,
							"name": "fromNumericalIndexed",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 180,
									"name": "fromNumericalIndexed",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts by using any `Object`s with numerical index, and a property called `length` that returns\nthe number of entries in the object.",
										"returns": "Array wrapper object to do operations on.\n"
									},
									"typeParameter": [
										{
											"id": 181,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the array element."
											}
										}
									],
									"parameters": [
										{
											"id": 182,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The object with numerical index and a property called `length` that returns the\n   number of entries in the object."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 183,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 184,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 185,
																	"name": "index",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "number"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													],
													"children": [
														{
															"id": 186,
															"name": "length",
															"kind": 32,
															"kindString": "Variable",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "number"
															}
														}
													],
													"groups": [
														{
															"title": "Variables",
															"kind": 32,
															"children": [
																186
															]
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentArray",
										"id": 155,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						},
						{
							"id": 187,
							"name": "fromRecordKeys",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 188,
									"name": "fromRecordKeys",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts by using the keys of a record. Records are objects with `string` indexing.",
										"returns": "Array wrapper object to do operations on.\n"
									},
									"parameters": [
										{
											"id": 189,
											"name": "record",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The record object whose keys will be used to create the array."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 190,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 191,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 192,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentArray",
										"id": 155,
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											}
										]
									}
								}
							]
						},
						{
							"id": 193,
							"name": "fromRecordValues",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 194,
									"name": "fromRecordValues",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts by using the values of a record. Records are objects with `string` indexing. The values\nof the record must be of the same type.",
										"returns": "Array wrapper object to do operations on.\n"
									},
									"typeParameter": [
										{
											"id": 195,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the array element."
											}
										}
									],
									"parameters": [
										{
											"id": 196,
											"name": "record",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The record object whose values will be used to create the array."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 197,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 198,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 199,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentArray",
										"id": 155,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						},
						{
							"id": 200,
							"name": "of",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 201,
									"name": "of",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts by using an array.",
										"returns": "Array wrapper object to do operations on.\n"
									},
									"typeParameter": [
										{
											"id": 202,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the array element."
											}
										}
									],
									"parameters": [
										{
											"id": 203,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The array object to start with."
											},
											"type": {
												"type": "typeParameter",
												"isArray": true,
												"name": "T"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentArray",
										"id": 155,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								175,
								179,
								187,
								193,
								200
							]
						}
					]
				},
				{
					"id": 155,
					"name": "FluentArray",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Chainable object to manipulate an array."
					},
					"typeParameter": [
						{
							"id": 156,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of element in the array.\n"
							}
						}
					],
					"children": [
						{
							"id": 157,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 158,
									"name": "new FluentArray",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 159,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The underlying array to modify.\n"
											},
											"type": {
												"type": "typeParameter",
												"isArray": true,
												"name": "T"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentArray",
										"id": 155
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseFluent.__constructor",
										"id": 39
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseFluent.__constructor",
								"id": 39
							}
						},
						{
							"id": 172,
							"name": "data",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The underlying data object."
							},
							"getSignature": [
								{
									"id": 173,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The underlying data object."
									},
									"type": {
										"type": "typeParameter",
										"isArray": true,
										"name": "T"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseFluent.data",
										"id": 42
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseFluent.data",
								"id": 42
							}
						},
						{
							"id": 160,
							"name": "diff",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 161,
									"name": "diff",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Removes element in the array that are also in the given array.",
										"returns": "[[FluentArray]] instance for chaining.\n"
									},
									"parameters": [
										{
											"id": 162,
											"name": "toRemove",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array containing elements to remove."
											},
											"type": {
												"type": "typeParameter",
												"isArray": true,
												"name": "T"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentArray",
										"id": 155,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						},
						{
							"id": 163,
							"name": "forOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 164,
									"name": "forOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes the given function on every element in the array.",
										"text": "This is a polyfill of `for..of` function with ability to break out of the loop midway.\n",
										"returns": "[[FluentArray]] instance for chaining.\n"
									},
									"parameters": [
										{
											"id": 165,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The function to execute on every element of the array. This accepts two arguments:\n\n1.  Element in the array.\n1.  Function called to break out of the loop.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 166,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 167,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 168,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T"
																	}
																},
																{
																	"id": 169,
																	"name": "breakFn",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 170,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"signatures": [
																				{
																					"id": 171,
																					"name": "__call",
																					"kind": 4096,
																					"kindString": "Call signature",
																					"flags": {},
																					"type": {
																						"type": "instrinct",
																						"name": "void"
																					}
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentArray",
										"id": 155,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								157
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								172
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								160,
								163
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseFluent",
							"id": 36,
							"typeArguments": [
								{
									"type": "typeParameter",
									"isArray": true,
									"name": "T"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						174,
						155
					]
				}
			]
		},
		{
			"id": 35,
			"name": "\"collection/base-fluent\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/collection/base-fluent.ts",
			"children": [
				{
					"id": 36,
					"name": "BaseFluent",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Base class for all fluent collection classes."
					},
					"typeParameter": [
						{
							"id": 37,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "Type of the underlying collection data.\n"
							}
						}
					],
					"children": [
						{
							"id": 39,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {},
							"signatures": [
								{
									"id": 40,
									"name": "new BaseFluent",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 41,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The underlying collection data.\n"
											},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BaseFluent",
										"id": 36
									}
								}
							]
						},
						{
							"id": 38,
							"name": "data_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						},
						{
							"id": 42,
							"name": "data",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"comment": {
								"shortText": "The underlying data object."
							},
							"getSignature": [
								{
									"id": 43,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The underlying data object."
									},
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								39
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								38
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								42
							]
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "FluentIterable",
							"id": 45
						},
						{
							"type": "reference",
							"name": "FluentMap",
							"id": 67
						},
						{
							"type": "reference",
							"name": "FluentRecord",
							"id": 100
						},
						{
							"type": "reference",
							"name": "FluentSet",
							"id": 138
						},
						{
							"type": "reference",
							"name": "FluentArray",
							"id": 155
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						36
					]
				}
			]
		},
		{
			"id": 44,
			"name": "\"collection/iterables\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/collection/iterables.ts",
			"children": [
				{
					"id": 45,
					"name": "FluentIterable",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Chainable object to manipulate an iterable."
					},
					"typeParameter": [
						{
							"id": 46,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of element in the iterable.\n"
							}
						}
					],
					"children": [
						{
							"id": 47,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 48,
									"name": "new FluentIterable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 49,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The underlying iterable object to modify.\n"
											},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentIterable",
										"id": 45
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseFluent.__constructor",
										"id": 39
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseFluent.__constructor",
								"id": 39
							}
						},
						{
							"id": 59,
							"name": "data",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The underlying data object."
							},
							"getSignature": [
								{
									"id": 60,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The underlying data object."
									},
									"type": {
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseFluent.data",
										"id": 42
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseFluent.data",
								"id": 42
							}
						},
						{
							"id": 50,
							"name": "forOf",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 51,
									"name": "forOf",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Executes the given function on every element in the iterable.",
										"text": "This is a polyfill of `for..of` function with ability to break out of the loop midway.\n",
										"returns": "[[FluentIterable]] instance for chaining.\n"
									},
									"parameters": [
										{
											"id": 52,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The function to execute on every element of the iterable. This accepts two arguments:\n\n1.  Element in the iterable.\n1.  Function called to break out of the loop.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 53,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 54,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 55,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T"
																	}
																},
																{
																	"id": 56,
																	"name": "breakFn",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reflection",
																		"declaration": {
																			"id": 57,
																			"name": "__type",
																			"kind": 65536,
																			"kindString": "Type literal",
																			"flags": {},
																			"signatures": [
																				{
																					"id": 58,
																					"name": "__call",
																					"kind": 4096,
																					"kindString": "Call signature",
																					"flags": {},
																					"type": {
																						"type": "instrinct",
																						"name": "void"
																					}
																				}
																			]
																		}
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentIterable",
										"id": 45,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								47
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								59
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								50
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseFluent",
							"id": 36,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Iterable",
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T"
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 61,
					"name": "Iterables",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Collection of methods to help manipulate iterables.",
						"text": "The general flow is to input an iterable, do a bunch of transformations, and output the\ntransformed iterable at the end. Note that the input iterable should never be used again. This\nclass does not make any guarantee that it will / will not modify the input iterable.\n\nExample:\n\n```typescript\nIterables\n    .of(['a', 'b', 'c'])\n    .forOf((value: string, breakFn: () => void) => {\n      console.log(value);\n    });\n```\n\nNote that every element in the iterable must be of the same type.\n"
					},
					"children": [
						{
							"id": 62,
							"name": "of",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 63,
									"name": "of",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts by using an iterable.",
										"returns": "Iterable wrapper object to do operations on.\n"
									},
									"typeParameter": [
										{
											"id": 64,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the iterable element."
											}
										}
									],
									"parameters": [
										{
											"id": 65,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The iterable object to start with."
											},
											"type": {
												"type": "reference",
												"name": "Iterable",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentIterable",
										"id": 45,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								62
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						45,
						61
					]
				}
			]
		},
		{
			"id": 66,
			"name": "\"collection/maps\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/collection/maps.ts",
			"children": [
				{
					"id": 67,
					"name": "FluentMap",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Chainable object to manipulate a map."
					},
					"typeParameter": [
						{
							"id": 68,
							"name": "K",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "Type of the map's key."
							}
						},
						{
							"id": 69,
							"name": "V",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "Type of the map's value.\n"
							}
						}
					],
					"children": [
						{
							"id": 70,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 71,
									"name": "new FluentMap",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 72,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The underlying map object to modify.\n"
											},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K"
													},
													{
														"type": "typeParameter",
														"name": "V"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentMap",
										"id": 67
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseFluent.__constructor",
										"id": 39
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseFluent.__constructor",
								"id": 39
							}
						},
						{
							"id": 80,
							"name": "data",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The underlying data object."
							},
							"getSignature": [
								{
									"id": 81,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The underlying data object."
									},
									"type": {
										"type": "reference",
										"name": "Map",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseFluent.data",
										"id": 42
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseFluent.data",
								"id": 42
							}
						},
						{
							"id": 73,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 74,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calls the given function for every entry in the map.",
										"returns": "[[FluentMap]] object for chaining.\n"
									},
									"parameters": [
										{
											"id": 75,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The function to call. This accepts two arguments:\n\n1.  Value of the entry.\n1.  Key of the entry."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 76,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 77,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 78,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "V"
																	}
																},
																{
																	"id": 79,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "K"
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentMap",
										"id": 67,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								70
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								80
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								73
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseFluent",
							"id": 36,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Map",
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "K"
										},
										{
											"type": "typeParameter",
											"name": "V"
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 82,
					"name": "Maps",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Collection of methods to help manipulate maps.",
						"text": "The general flow is to input a map, do a bunch of transformations, and output the transformed\nmap at the end. Note that the input map should never be used again. This class does not make any\nguarantee that it will / will not modify the input map.\n\nExample:\n\n```typescript\nlet map = new Map<number, number>([[1, 2], [3, 4]]);\nMaps\n    .of(map)\n    .forEach((value: number, key: number) => {\n      console.log(value + key);\n    });\n```\n\nNote that every key and value in the map must be of the same type.\n"
					},
					"children": [
						{
							"id": 83,
							"name": "fromRecord",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 84,
									"name": "fromRecord",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts by using any `Record` objects.",
										"returns": "Map wrapper object to do operations on.\n"
									},
									"typeParameter": [
										{
											"id": 85,
											"name": "V",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the map's value."
											}
										}
									],
									"parameters": [
										{
											"id": 86,
											"name": "record",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Record object to start from."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 87,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 88,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 89,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentMap",
										"id": 67,
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							]
						},
						{
							"id": 90,
							"name": "of",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 91,
									"name": "of",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts by using a map.",
										"returns": "Map wrapper object to do operations on.\n"
									},
									"typeParameter": [
										{
											"id": 92,
											"name": "K",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the map's key."
											}
										},
										{
											"id": 93,
											"name": "V",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the map's value."
											}
										}
									],
									"parameters": [
										{
											"id": 94,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The map object to start with."
											},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "K"
													},
													{
														"type": "typeParameter",
														"name": "V"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentMap",
										"id": 67,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "K"
											},
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								83,
								90
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						67,
						82
					]
				}
			]
		},
		{
			"id": 95,
			"name": "\"collection/records\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/collection/records.ts",
			"children": [
				{
					"id": 100,
					"name": "FluentRecord",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Chainable object to manipulate a record."
					},
					"typeParameter": [
						{
							"id": 101,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "Type of the record's value.\n"
							}
						}
					],
					"children": [
						{
							"id": 102,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 103,
									"name": "new FluentRecord",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 104,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The underlying record object to modify.\n"
											},
											"type": {
												"type": "reference",
												"name": "IRecord",
												"id": 96,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentRecord",
										"id": 100
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseFluent.__constructor",
										"id": 39
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseFluent.__constructor",
								"id": 39
							}
						},
						{
							"id": 130,
							"name": "data",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The underlying data object."
							},
							"getSignature": [
								{
									"id": 131,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The underlying data object."
									},
									"type": {
										"type": "reference",
										"name": "IRecord",
										"id": 96,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseFluent.data",
										"id": 42
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseFluent.data",
								"id": 42
							}
						},
						{
							"id": 105,
							"name": "addAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 106,
									"name": "addAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds all values in the given map, overriding the values whenever there is conflict.",
										"returns": "[[FluentRecord]] object for chaining.\n"
									},
									"parameters": [
										{
											"id": 107,
											"name": "map",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The map whose values should be added."
											},
											"type": {
												"type": "reference",
												"name": "Map",
												"typeArguments": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentRecord",
										"id": 100,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						},
						{
							"id": 108,
							"name": "filter",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 109,
									"name": "filter",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Filters entries of the record based on the given filter function.",
										"returns": "[[FluentRecord]] object for chaining.\n"
									},
									"parameters": [
										{
											"id": 110,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function used to filter the record. This function accepts two arguments:\n\n1.  The value of the record entry.\n1.  The key of the record entry.\n\nAnd should return true iff the entry should be kept in the record."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 111,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 112,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 113,
																	"name": "value",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T"
																	}
																},
																{
																	"id": 114,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "boolean"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentRecord",
										"id": 100,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						},
						{
							"id": 115,
							"name": "forEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 116,
									"name": "forEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Calls the given function for every entry in the record.",
										"returns": "[[FluentRecord]] object for chaining.\n"
									},
									"parameters": [
										{
											"id": 117,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The function to call. This accepts two arguments:\n\n1.  Value of the entry.\n1.  Key of the entry."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 118,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 119,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 120,
																	"name": "arg",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T"
																	}
																},
																{
																	"id": 121,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentRecord",
										"id": 100,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						},
						{
							"id": 122,
							"name": "mapValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 123,
									"name": "mapValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Maps the values of the record using the input function.",
										"returns": "[[FluentRecord]] object for chaining.\n"
									},
									"typeParameter": [
										{
											"id": 124,
											"name": "V",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "The type of the new value."
											}
										}
									],
									"parameters": [
										{
											"id": 125,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The mapping function. This accepts two arguments:\n\n1.  Value of the entry.\n1.  Key of the entry.\n\nAnd should return the new value for the entry."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 126,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 127,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 128,
																	"name": "arg",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "typeParameter",
																		"name": "T"
																	}
																},
																{
																	"id": 129,
																	"name": "key",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "typeParameter",
																"name": "V"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentRecord",
										"id": 100,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "V"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								102
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								130
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								105,
								108,
								115,
								122
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseFluent",
							"id": 36,
							"typeArguments": [
								{
									"type": "reference",
									"name": "IRecord",
									"id": 96,
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T"
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 132,
					"name": "Records",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Collection of methods to help manipulate records.",
						"text": "Records are objects with string indexes. This class supports records whose values are of the same\ntype.\n\nThe general flow is to input a record, do a bunch of transformations, and output the transformed\nrecord at the end. Note that the input record should never be used again. This class does not\nmake any guarantee that it will / will not modify the input record.\n\nExample:\n\n```typescript\nRecords\n    .of({'a': 1, 'b': 2})\n    .mapValue((value: number) => {\n      return value + 1;\n    })\n    .data;  // {'a': 2, 'b':3}\n```\n\nNote that every value in the record must be of the same type.\n"
					},
					"children": [
						{
							"id": 133,
							"name": "of",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 134,
									"name": "of",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts by using a record.",
										"returns": "Record wrapper object to do operations on.\n"
									},
									"typeParameter": [
										{
											"id": 135,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the record's value."
											}
										}
									],
									"parameters": [
										{
											"id": 136,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The record object to start with."
											},
											"type": {
												"type": "reference",
												"name": "IRecord",
												"id": 96,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentRecord",
										"id": 100,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								133
							]
						}
					]
				},
				{
					"id": 96,
					"name": "IRecord",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Represents a record."
					},
					"typeParameter": [
						{
							"id": 97,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of the record value.\n"
							}
						}
					],
					"indexSignature": [
						{
							"id": 98,
							"name": "__index",
							"kind": 8192,
							"kindString": "Index signature",
							"flags": {},
							"comment": {
								"shortText": "Represents a record."
							},
							"parameters": [
								{
									"id": 99,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "typeParameter",
								"name": "T"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						100,
						132
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						96
					]
				}
			]
		},
		{
			"id": 137,
			"name": "\"collection/sets\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/collection/sets.ts",
			"children": [
				{
					"id": 138,
					"name": "FluentSet",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Chainable object to manipulate a set."
					},
					"typeParameter": [
						{
							"id": 139,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The type of element in the set.\n"
							}
						}
					],
					"children": [
						{
							"id": 140,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 141,
									"name": "new FluentSet",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 142,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The underlying set to modify.\n"
											},
											"type": {
												"type": "reference",
												"name": "Set",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentSet",
										"id": 138
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseFluent.__constructor",
										"id": 39
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseFluent.__constructor",
								"id": 39
							}
						},
						{
							"id": 143,
							"name": "data",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The underlying data object."
							},
							"getSignature": [
								{
									"id": 144,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The underlying data object."
									},
									"type": {
										"type": "reference",
										"name": "Set",
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseFluent.data",
										"id": 42
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseFluent.data",
								"id": 42
							}
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								140
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								143
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseFluent",
							"id": 36,
							"typeArguments": [
								{
									"type": "reference",
									"name": "Set",
									"typeArguments": [
										{
											"type": "typeParameter",
											"name": "T"
										}
									]
								}
							]
						}
					]
				},
				{
					"id": 145,
					"name": "Sets",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Collection of methods to help manipulate sets.",
						"text": "The general flow is to input a set, do a bunch of transformations, and output the transformed\nset at the end. Note that the input set should never be used again. This class does not make any\nguarantee that it will / will not modify the input set.\n\nExample:\n\n```typescript\nSet\n    .fromArray([1, 2, 3])\n    .data;  // Set([1, 2, 3])\n```\n\nNote that every value in the set must be of the same type.\n"
					},
					"children": [
						{
							"id": 146,
							"name": "fromArray",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 147,
									"name": "fromArray",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts by using an array object.",
										"returns": "Set wrapper object to do operations on.\n"
									},
									"typeParameter": [
										{
											"id": 148,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the array element."
											}
										}
									],
									"parameters": [
										{
											"id": 149,
											"name": "array",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Array object to start from."
											},
											"type": {
												"type": "typeParameter",
												"isArray": true,
												"name": "T"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentSet",
										"id": 138,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						},
						{
							"id": 150,
							"name": "of",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 151,
									"name": "of",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Starts by using a set.",
										"returns": "Set wrapper object to do operations on.\n"
									},
									"typeParameter": [
										{
											"id": 152,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "Type of the set element."
											}
										}
									],
									"parameters": [
										{
											"id": 153,
											"name": "set",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Set",
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "T"
													}
												]
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "FluentSet",
										"id": 138,
										"typeArguments": [
											{
												"type": "typeParameter",
												"name": "T"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								146,
								150
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						138,
						145
					]
				}
			]
		},
		{
			"id": 204,
			"name": "\"data/a-cache\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/data/a-cache.ts",
			"children": [
				{
					"id": 205,
					"name": "Cache",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "A cache object.",
						"text": "Every object with a cache will have one instance of this object for every cache group.\n"
					},
					"children": [
						{
							"id": 208,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {},
							"signatures": [
								{
									"id": 209,
									"name": "new Cache",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 210,
											"name": "obj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The obj to cache the data for.\n"
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Cache",
										"id": 205
									}
								}
							]
						},
						{
							"id": 206,
							"name": "data_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "instrinct",
										"name": "string"
									},
									{
										"type": "instrinct",
										"name": "any"
									}
								]
							}
						},
						{
							"id": 207,
							"name": "obj_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "instrinct",
								"name": "any"
							}
						},
						{
							"id": 218,
							"name": "clearAll",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 219,
									"name": "clearAll",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all cached values stored."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 211,
							"name": "getValue",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 212,
									"name": "getValue",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Gets the value for the given method.",
										"text": "If there is a value cached, it returns that value. Otherwise, it will execute the given\ndelegate function, caches the return value, and returns that value.\n",
										"returns": "The return value of the delegate if the data is not cached, or the cached value.\n"
									},
									"typeParameter": [
										{
											"id": 213,
											"name": "T",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {},
											"comment": {
												"text": "The type of the return value of the function."
											}
										}
									],
									"parameters": [
										{
											"id": 214,
											"name": "methodName",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of method to get the value of."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 215,
											"name": "delegate",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function to execute if the value is not cached."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 216,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 217,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "typeParameter",
																"name": "T"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "T"
									}
								}
							]
						},
						{
							"id": 220,
							"name": "get",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 221,
									"name": "get",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the cache corresponding to the given cache group in the given object, if any.",
										"text": "If there are no cache objects created, this will create a new cache object.\n",
										"returns": "The associated cache object.\n"
									},
									"parameters": [
										{
											"id": 222,
											"name": "obj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The object to return the cache object of."
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 223,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "The name of the cache group that corresponds to the cache object to return."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Cache",
										"id": 205
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								208
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								206,
								207
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								218,
								211,
								220
							]
						}
					]
				},
				{
					"id": 224,
					"name": "ICacheFunc",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Interface for the annotation.",
						"text": "See [[ACache]] for more documentation.\n"
					},
					"decorates": [
						{
							"type": "reference",
							"name": "params",
							"id": 531
						}
					],
					"signatures": [
						{
							"id": 225,
							"name": "__call",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Annotates a getter or function with no arguments to cache their results.",
								"text": "See [[ACache]] for more documentation.\n"
							},
							"parameters": [
								{
									"id": 226,
									"name": "key",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {
										"isOptional": true
									},
									"comment": {
										"text": "Cache group to associate this cache with.\n"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "MethodDecorator"
							}
						}
					],
					"children": [
						{
							"id": 227,
							"name": "clear",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 228,
									"name": "clear",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Clears all cached values in the given object that correspond to the given cache group name."
									},
									"parameters": [
										{
											"id": 229,
											"name": "obj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Object whose cached values should be cleared."
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										},
										{
											"id": 230,
											"name": "key",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isOptional": true
											},
											"comment": {
												"text": "Cache group name whose associated caches should be cleared.\n"
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								227
							]
						}
					]
				},
				{
					"id": 233,
					"name": "ACache",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "Annotates getters and functions with zero arguments to cache its result.",
						"text": "To use this, just annotate the method whose return value you'd like to cache. You can clear the\ncache by calling the [[clear]] method.\n\nExample use case:\n\n```typescript\nimport Cache from './a-cache';\n\nlet i = 0;\n\nclass TestClass {\n  @Cache()\n  get now(): number {\n    i++;\n    return i;\n  }\n}\n\nlet testClass = new TestClass();\ntestClass.now();  // 1\ntestClass.now();  // 1\n\n// Clear the cache.\nCache.clear(testClass);\ntestClass.now();  // 2\n```\n\nYou can also assign key identifiers to each cache call. This lets you to selectively clear a\ngroup of cache values. For example:\n\n```typescript\nimport Cache from './a-cache';\n\nlet i = 0;\nlet j = 0;\n\nclass TestClass {\n  @Cache('i')\n  get i(): number {\n    i++;\n    return i;\n  }\n\n  @Cache('j')\n  get j(): number {\n    j++;\n    return j;\n  }\n}\n\nlet testClass = new TestClass();\ntestClass.i;  // 1\ntestClass.j;  // 1\n\n// Clear the cache just for i.\nCache.clear(testClass, 'i');\ntestClass.i;  // 2\ntestClass.j;  // 1\n```\n",
						"tags": [
							{
								"tag": "param",
								"text": "Cache group to associate the cache with.\n",
								"param": "key"
							}
						]
					},
					"type": {
						"type": "reference",
						"name": "ICacheFunc",
						"id": 224
					},
					"defaultValue": " <any> function(key?: string): MethodDecorator {\n  return (\n      target: Object,\n      propertyKey: string,\n      descriptor: TypedPropertyDescriptor<any>): TypedPropertyDescriptor<any> => {\n    if (descriptor.get) {\n      const original = descriptor.get;\n      descriptor.get = function(...args: any[]): any {\n        return Cache.get(this, key).getValue(propertyKey, original.bind(this));\n      };\n    } else if (descriptor.value) {\n      const original = descriptor.value;\n      descriptor.value = function(...args: any[]): any {\n        return Cache.get(this, key).getValue(propertyKey, original.bind(this));\n      };\n    } else {\n      throw Error(`Property ${propertyKey} has to be a getter or a function`);\n    }\n\n    return descriptor;\n  };\n}"
				},
				{
					"id": 231,
					"name": "___cache",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "instrinct",
						"name": "symbol"
					},
					"defaultValue": " Symbol('cache')"
				},
				{
					"id": 232,
					"name": "___cacheMap",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "instrinct",
						"name": "symbol"
					},
					"defaultValue": " Symbol('cacheMap')"
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						205
					]
				},
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						224
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						233,
						231,
						232
					]
				}
			]
		},
		{
			"id": 234,
			"name": "\"data/a-serializable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/data/a-serializable.ts",
			"comment": {
				"shortText": "Provides a convenient way to serialize / deserialize objects to / from JSON.",
				"text": "This uses three different parts:\n\n1.  [[Serializable]]: This annotates the class to be serializable. You will need to give the\n    class a unique ID for serialization.\n1.  [[Field]]: This annotates fields in the class as serializable. Like [[Serializable]], each\n    field also needs an ID that uniquely identifies the field in the class. Note that the field\n    has to be JSON serializable, or is annotated with [[Serializable]].\n1.  [[Serializer]]: This class actually does the conversion from / to JSON.\n\nExample class:\n\n```typescript\n// Ignore the \\, there is something wrong with the doc parser.\n\\@Field('example')\nclass Example {\n  @Field('fieldA') private fieldA_: number;\n  @Field('fieldB') private fieldB_: string;\n\n  constructor(a?: number, b?: string) {\n    this.fieldA_ = a;\n    this.fieldB_ = b;\n  }\n}\n\nlet example = new Example(1, 'b');\nlet json = Serializer.toJSON(example); // {_type: 'example', fieldA: 1, fieldB: 'b'}\nSerializer.fromJSON(json); // This is the same as new Example(1, 'b');\n```\n\nNote that the class' constructor must be able to be called without any arguments.\n"
			},
			"children": [
				{
					"id": 235,
					"name": "Serializer",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Manages conversion of serializable objects to / from JSON objects."
					},
					"children": [
						{
							"id": 236,
							"name": "fromJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 237,
									"name": "fromJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts the given JSON object to a known [[Serializable]] object.",
										"returns": "The known [[Serializable]] object converted from the JSON object.\n"
									},
									"parameters": [
										{
											"id": 238,
											"name": "json",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The JSON object to convert."
											},
											"type": {
												"type": "reference",
												"name": "IJson"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 239,
							"name": "toJSON",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 240,
									"name": "toJSON",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts the given [[Serializable]] object to JSON object.",
										"returns": "The JSON object corresponding to the [[Serializable]] object.\n"
									},
									"parameters": [
										{
											"id": 241,
											"name": "obj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The [[Serializable]] object to convert."
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IJson"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								236,
								239
							]
						}
					]
				},
				{
					"id": 245,
					"name": "CTORS",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "Map",
						"typeArguments": [
							{
								"type": "instrinct",
								"name": "string"
							},
							{
								"type": "instrinct",
								"name": "any"
							}
						]
					},
					"defaultValue": " new Map<string, any>()"
				},
				{
					"id": 244,
					"name": "TYPE_FIELD",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "instrinct",
						"name": "string"
					},
					"defaultValue": "\"_type\""
				},
				{
					"id": 242,
					"name": "___fields",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {},
					"type": {
						"type": "instrinct",
						"name": "symbol"
					},
					"defaultValue": " Symbol('fields')"
				},
				{
					"id": 243,
					"name": "___name",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "instrinct",
						"name": "symbol"
					},
					"defaultValue": " Symbol('name')"
				},
				{
					"id": 252,
					"name": "Field",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 253,
							"name": "Field",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Annotates a property in a [[Serializable]] class and marks it to be exported when converted to\nJSON object."
							},
							"parameters": [
								{
									"id": 254,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Name of the field. This name must be unique within the class and must not start with\n   `_`.\n"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "PropertyDecorator"
							}
						}
					]
				},
				{
					"id": 249,
					"name": "Serializable",
					"kind": 64,
					"kindString": "Function",
					"flags": {
						"isExported": true
					},
					"signatures": [
						{
							"id": 250,
							"name": "Serializable",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"comment": {
								"shortText": "Annotates a class and marks it as serializable."
							},
							"parameters": [
								{
									"id": 251,
									"name": "name",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"comment": {
										"text": "Name of the class. This name should be unique within the binary.\n"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							],
							"type": {
								"type": "reference",
								"name": "ClassDecorator"
							}
						}
					]
				},
				{
					"id": 246,
					"name": "initField_",
					"kind": 64,
					"kindString": "Function",
					"flags": {},
					"signatures": [
						{
							"id": 247,
							"name": "initField_",
							"kind": 4096,
							"kindString": "Call signature",
							"flags": {},
							"parameters": [
								{
									"id": 248,
									"name": "obj",
									"kind": 32768,
									"kindString": "Parameter",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "Object"
									}
								}
							],
							"type": {
								"type": "instrinct",
								"name": "void"
							}
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						235
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						245,
						244,
						242,
						243
					]
				},
				{
					"title": "Functions",
					"kind": 64,
					"children": [
						252,
						249,
						246
					]
				}
			]
		},
		{
			"id": 255,
			"name": "\"dispose/base-disposable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/dispose/base-disposable.ts",
			"children": [
				{
					"id": 256,
					"name": "BaseDisposable",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Base class of all disposable objects."
					},
					"children": [
						{
							"id": 258,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 259,
									"name": "new BaseDisposable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BaseDisposable",
										"id": 256
									}
								}
							]
						},
						{
							"id": 257,
							"name": "disposables_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "reference",
								"isArray": true,
								"name": "BaseDisposable",
								"id": 256
							}
						},
						{
							"id": 260,
							"name": "addDisposable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 261,
									"name": "addDisposable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds the given disposable so they are disposed when this object is disposed."
									},
									"parameters": [
										{
											"id": 262,
											"name": "disposables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Disposable objects to be disposed when this object is disposed.\n"
											},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "BaseDisposable",
												"id": 256
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 265,
							"name": "dispose",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 266,
									"name": "dispose",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dispose this object."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 263,
							"name": "disposeInternal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 264,
									"name": "disposeInternal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Override this method for custom logic that are ran during disposal."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								258
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								257
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								260,
								265,
								263
							]
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "DisposableFunction",
							"id": 271
						},
						{
							"type": "reference",
							"name": "BaseListenable",
							"id": 288
						},
						{
							"type": "reference",
							"name": "HttpRequest",
							"id": 402
						},
						{
							"type": "reference",
							"name": "BemClassCtrl",
							"id": 491
						},
						{
							"type": "reference",
							"name": "RouteService",
							"id": 522
						}
					]
				},
				{
					"id": 267,
					"name": "TRACKED_DISPOSABLES",
					"kind": 32,
					"kindString": "Variable",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Contains undisposed objects."
					},
					"type": {
						"type": "reference",
						"isArray": true,
						"name": "BaseDisposable",
						"id": 256
					},
					"defaultValue": " []"
				},
				{
					"id": 268,
					"name": "Flags",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Flags to control the behavior of [[BaseDisposable]]."
					},
					"children": [
						{
							"id": 269,
							"name": "enableTracking",
							"kind": 32,
							"kindString": "Variable",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Set to true to keep track of undisposed objects. This is used mainly for testing."
							},
							"type": {
								"type": "instrinct",
								"name": "boolean"
							},
							"defaultValue": "false"
						}
					],
					"groups": [
						{
							"title": "Variables",
							"kind": 32,
							"children": [
								269
							]
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						256
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						267
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						268
					]
				}
			]
		},
		{
			"id": 270,
			"name": "\"dispose/disposable-function\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/dispose/disposable-function.ts",
			"children": [
				{
					"id": 271,
					"name": "DisposableFunction",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Wrapper around a function that executes the function when this object is disposed."
					},
					"children": [
						{
							"id": 273,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {},
							"signatures": [
								{
									"id": 274,
									"name": "new DisposableFunction",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 275,
											"name": "fn",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Function to execute when this object is disposed.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 276,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 277,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DisposableFunction",
										"id": 271
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseDisposable.__constructor",
										"id": 258
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseDisposable.__constructor",
								"id": 258
							}
						},
						{
							"id": 272,
							"name": "fn_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "reference",
								"name": "Function"
							}
						},
						{
							"id": 282,
							"name": "addDisposable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 283,
									"name": "addDisposable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds the given disposable so they are disposed when this object is disposed."
									},
									"parameters": [
										{
											"id": 284,
											"name": "disposables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Disposable objects to be disposed when this object is disposed.\n"
											},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "BaseDisposable",
												"id": 256
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.addDisposable",
										"id": 260
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.addDisposable",
								"id": 260
							}
						},
						{
							"id": 285,
							"name": "dispose",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 286,
									"name": "dispose",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dispose this object."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.dispose",
										"id": 265
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.dispose",
								"id": 265
							}
						},
						{
							"id": 278,
							"name": "disposeInternal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 279,
									"name": "disposeInternal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": "\n"
											}
										]
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseDisposable.disposeInternal",
										"id": 263
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseDisposable.disposeInternal",
								"id": 263
							}
						},
						{
							"id": 280,
							"name": "run",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 281,
									"name": "run",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the inner function."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								273
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								272
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								282,
								285,
								278,
								280
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseDisposable",
							"id": 256
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						271
					]
				}
			]
		},
		{
			"id": 287,
			"name": "\"event/base-listenable\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/event/base-listenable.ts",
			"children": [
				{
					"id": 288,
					"name": "BaseListenable",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Base class for classes that can dispatch events.",
						"text": "To use this, you need two parts:\n\n1.  Class that dispatches the event.\n1.  Enum of event types dispatched by that class.\n"
					},
					"typeParameter": [
						{
							"id": 289,
							"name": "T",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "Type of event that this class dispatches.\n"
							}
						}
					],
					"children": [
						{
							"id": 294,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 295,
									"name": "new BaseListenable",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BaseListenable",
										"id": 288
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseDisposable.__constructor",
										"id": 258
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseDisposable.__constructor",
								"id": 258
							}
						},
						{
							"id": 290,
							"name": "callbacksMap_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "reference",
								"name": "Map",
								"typeArguments": [
									{
										"type": "typeParameter",
										"name": "T"
									},
									{
										"type": "reflection",
										"isArray": true,
										"declaration": {
											"id": 291,
											"name": "__type",
											"kind": 65536,
											"kindString": "Type literal",
											"flags": {},
											"signatures": [
												{
													"id": 292,
													"name": "__call",
													"kind": 4096,
													"kindString": "Call signature",
													"flags": {},
													"parameters": [
														{
															"id": 293,
															"name": "data",
															"kind": 32768,
															"kindString": "Parameter",
															"flags": {},
															"type": {
																"type": "instrinct",
																"name": "any"
															}
														}
													],
													"type": {
														"type": "instrinct",
														"name": "void"
													}
												}
											]
										}
									}
								]
							}
						},
						{
							"id": 309,
							"name": "addDisposable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 310,
									"name": "addDisposable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds the given disposable so they are disposed when this object is disposed."
									},
									"parameters": [
										{
											"id": 311,
											"name": "disposables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Disposable objects to be disposed when this object is disposed.\n"
											},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "BaseDisposable",
												"id": 256
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.addDisposable",
										"id": 260
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.addDisposable",
								"id": 260
							}
						},
						{
							"id": 298,
							"name": "dispatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 299,
									"name": "dispatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 300,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Type of event to dispatch."
											},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										},
										{
											"id": 301,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Any payloads that are associated with the event, if any.\n"
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											},
											"defaultValue": " null"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 312,
							"name": "dispose",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 313,
									"name": "dispose",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dispose this object."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.dispose",
										"id": 265
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.dispose",
								"id": 265
							}
						},
						{
							"id": 296,
							"name": "disposeInternal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 297,
									"name": "disposeInternal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": "\n"
											}
										]
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseDisposable.disposeInternal",
										"id": 263
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseDisposable.disposeInternal",
								"id": 263
							}
						},
						{
							"id": 302,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 303,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens to an event dispatched by this object.",
										"returns": "[[DisposableFunction]] that should be disposed to stop listening to the event.\n"
									},
									"parameters": [
										{
											"id": 304,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Type of event to listen to."
											},
											"type": {
												"type": "typeParameter",
												"name": "T"
											}
										},
										{
											"id": 305,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The callback to be called when the specified event is dispatched."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 306,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 307,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 308,
																	"name": "payload",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DisposableFunction",
										"id": 271
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								294
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								290
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								309,
								298,
								312,
								296,
								302
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseDisposable",
							"id": 256
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "ListenableElement",
							"id": 336
						},
						{
							"type": "reference",
							"name": "BaseService",
							"id": 446
						},
						{
							"type": "reference",
							"name": "OverflowWatcher",
							"id": 610
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						288
					]
				}
			]
		},
		{
			"id": 330,
			"name": "\"event/listenable-element\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/event/listenable-element.ts",
			"children": [
				{
					"id": 331,
					"name": "EventType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Corresponds to DOM events. This must be the upper case version of the corresponding DOM events."
					},
					"children": [
						{
							"id": 332,
							"name": "BEFOREUNLOAD",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The `beforeunload` DOM event."
							}
						},
						{
							"id": 333,
							"name": "CLICK",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The `click` DOM event."
							}
						},
						{
							"id": 334,
							"name": "LOAD",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The `load` DOM event."
							}
						},
						{
							"id": 335,
							"name": "SCROLL",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The `scroll` DOM event."
							}
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								332,
								333,
								334,
								335
							]
						}
					]
				},
				{
					"id": 336,
					"name": "ListenableElement",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Wraps an EventTarget to make it extends [[BaseListenable]]."
					},
					"children": [
						{
							"id": 340,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {},
							"signatures": [
								{
									"id": 341,
									"name": "new ListenableElement",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 342,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The EventTarget to wrap.\n"
											},
											"type": {
												"type": "reference",
												"name": "EventTarget"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "ListenableElement",
										"id": 336
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseListenable.__constructor",
										"id": 294
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseListenable.__constructor",
								"id": 294
							}
						},
						{
							"id": 337,
							"name": "element_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "reference",
								"name": "EventTarget"
							}
						},
						{
							"id": 338,
							"name": "forwardedEvents_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "reference",
								"name": "Set",
								"typeArguments": [
									{
										"type": "reference",
										"name": "EventType",
										"id": 331
									}
								]
							}
						},
						{
							"id": 339,
							"name": "listener_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "reference",
								"name": "EventListener"
							}
						},
						{
							"id": 348,
							"name": "element",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"comment": {
								"shortText": "The wrapped EventTarget"
							},
							"getSignature": [
								{
									"id": 349,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "The wrapped EventTarget"
									},
									"type": {
										"type": "reference",
										"name": "EventTarget"
									}
								}
							]
						},
						{
							"id": 361,
							"name": "addDisposable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 362,
									"name": "addDisposable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds the given disposable so they are disposed when this object is disposed."
									},
									"parameters": [
										{
											"id": 363,
											"name": "disposables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Disposable objects to be disposed when this object is disposed.\n"
											},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "BaseDisposable",
												"id": 256
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.addDisposable",
										"id": 260
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.addDisposable",
								"id": 260
							}
						},
						{
							"id": 357,
							"name": "dispatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 358,
									"name": "dispatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 359,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Type of event to dispatch."
											},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 331
											}
										},
										{
											"id": 360,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Any payloads that are associated with the event, if any.\n"
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											},
											"defaultValue": " null"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseListenable.dispatch",
										"id": 298
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseListenable.dispatch",
								"id": 298
							}
						},
						{
							"id": 364,
							"name": "dispose",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 365,
									"name": "dispose",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dispose this object."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.dispose",
										"id": 265
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.dispose",
								"id": 265
							}
						},
						{
							"id": 346,
							"name": "disposeInternal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 347,
									"name": "disposeInternal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": "BaseDisposable\n"
											}
										]
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseListenable.disposeInternal",
										"id": 296
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseListenable.disposeInternal",
								"id": 296
							}
						},
						{
							"id": 350,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 351,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": "BaseListenable\n"
											}
										]
									},
									"parameters": [
										{
											"id": 352,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 331
											}
										},
										{
											"id": 353,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 354,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 355,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 356,
																	"name": "data",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DisposableFunction",
										"id": 271
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseListenable.on",
										"id": 302
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseListenable.on",
								"id": 302
							}
						},
						{
							"id": 343,
							"name": "onEvent_",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 344,
									"name": "onEvent_",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 345,
											"name": "event",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "Event"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								340
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								337,
								338,
								339
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								348
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								361,
								357,
								364,
								346,
								350,
								343
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseListenable",
							"id": 288,
							"typeArguments": [
								{
									"type": "reference",
									"name": "EventType",
									"id": 331
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						331
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						336
					]
				}
			]
		},
		{
			"id": 18,
			"name": "\"jsons\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/jsons.ts",
			"children": [
				{
					"id": 19,
					"name": "Jsons",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Various utility methods to work with JSONs.",
						"tags": [
							{
								"tag": "todo",
								"text": "Turn this into Fluent\n"
							}
						]
					},
					"children": [
						{
							"id": 20,
							"name": "deepClone",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 21,
									"name": "deepClone",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Recursively clones the given JSON.",
										"returns": "The cloned JSON.\n"
									},
									"parameters": [
										{
											"id": 22,
											"name": "original",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The JSON to be cloned."
											},
											"type": {
												"type": "reference",
												"name": "IJson"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "IJson"
									}
								}
							]
						},
						{
							"id": 23,
							"name": "mixin",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 24,
									"name": "mixin",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Mixins the two given JSONs.",
										"text": "This will deep clone any objects in the fromObj. This will also overwrites any keys in the\ntoObj with the value in fromObj.\n"
									},
									"parameters": [
										{
											"id": 25,
											"name": "fromObj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "IJson"
											}
										},
										{
											"id": 26,
											"name": "toObj",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "\n"
											},
											"type": {
												"type": "reference",
												"name": "IJson"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								20,
								23
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						19
					]
				}
			]
		},
		{
			"id": 366,
			"name": "\"mock/mock-element\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/mock/mock-element.ts",
			"children": [
				{
					"id": 367,
					"name": "MockElement",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Fake implementation of an HTMLElement."
					},
					"children": [
						{
							"id": 372,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {},
							"signatures": [
								{
									"id": 373,
									"name": "new MockElement",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 374,
											"name": "queries",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Used to implement [[querySelector]]. The key is the query, and the value is the\n   value(s) to return for the query.\n"
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 375,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 376,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 377,
																	"name": "query",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "MockElement",
										"id": 367
									}
								}
							]
						},
						{
							"id": 368,
							"name": "queries_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "reflection",
								"declaration": {
									"id": 369,
									"name": "__type",
									"kind": 65536,
									"kindString": "Type literal",
									"flags": {},
									"indexSignature": [
										{
											"id": 370,
											"name": "__index",
											"kind": 8192,
											"kindString": "Index signature",
											"flags": {},
											"parameters": [
												{
													"id": 371,
													"name": "query",
													"kind": 32768,
													"kindString": "Parameter",
													"flags": {},
													"type": {
														"type": "instrinct",
														"name": "string"
													}
												}
											],
											"type": {
												"type": "instrinct",
												"name": "any"
											}
										}
									]
								}
							}
						},
						{
							"id": 378,
							"name": "addEventListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 379,
									"name": "addEventListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stub implementation."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 382,
							"name": "querySelector",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 383,
									"name": "querySelector",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Fake implementation of HTMLElement's query selector, based on the mapping provided in the\nconstructor.",
										"returns": "The value corresponding to the query, as stored in the map given in the constructor.\n"
									},
									"parameters": [
										{
											"id": 384,
											"name": "query",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The query to use."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 380,
							"name": "removeEventListener",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 381,
									"name": "removeEventListener",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Stub implementation."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								372
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								368
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								378,
								382,
								380
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						367
					]
				}
			]
		},
		{
			"id": 385,
			"name": "\"mock/mocks\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/mock/mocks.ts",
			"children": [
				{
					"id": 386,
					"name": "Mocks",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Contains various utility methods to create mocks for testing."
					},
					"children": [
						{
							"id": 387,
							"name": "builder",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 388,
									"name": "builder",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a mock builder.",
										"text": "Each method of the builder returns the instance of the builder.",
										"returns": "The mock builder object.\n"
									},
									"parameters": [
										{
											"id": 389,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name to identify the mock."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 390,
											"name": "methods",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of builder methods to generate."
											},
											"type": {
												"type": "instrinct",
												"isArray": true,
												"name": "string"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 391,
							"name": "element",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 392,
									"name": "element",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a mock element.",
										"returns": "The mock element object.\n"
									},
									"parameters": [
										{
											"id": 393,
											"name": "queries",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Used to implement [[querySelector]]. The key is the query, and the value is the\n   value(s) to return for the query."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 394,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"indexSignature": [
														{
															"id": 395,
															"name": "__index",
															"kind": 8192,
															"kindString": "Index signature",
															"flags": {},
															"parameters": [
																{
																	"id": 396,
																	"name": "query",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "string"
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "any"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							]
						},
						{
							"id": 397,
							"name": "object",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 398,
									"name": "object",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a mock object.",
										"returns": "The mock object instance.\n"
									},
									"parameters": [
										{
											"id": 399,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name to identify the mock object."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								387,
								391,
								397
							]
						}
					]
				},
				{
					"id": 400,
					"name": "___id",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "instrinct",
						"name": "symbol"
					},
					"defaultValue": " Symbol('id')"
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						386
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						400
					]
				}
			]
		},
		{
			"id": 401,
			"name": "\"net/http\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/net/http.ts",
			"children": [
				{
					"id": 441,
					"name": "Http",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Utility to make HTTP requests.",
						"text": "Base use case is to start with the [[Http]] object, set all the parameters, and call [[send]].\nThe send will send the request and return a Promise. For example:\n\n```typescript\nimport Http from './net/http';\n\nHttp.post('http://path')\n    .setFormData({\n      'cost': '$2',\n      'food': 'ice cream'\n    })\n    .send()\n    .then((response: string) => {\n      // Do something with the response\n    });\n```\n"
					},
					"children": [
						{
							"id": 442,
							"name": "post",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 443,
									"name": "post",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Start to send an HTTP POST request.",
										"returns": "HTTP POST request object for setting up and sending.\n"
									},
									"parameters": [
										{
											"id": 444,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The path to send the request to."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HttpPostRequest",
										"id": 420
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								442
							]
						}
					]
				},
				{
					"id": 420,
					"name": "HttpPostRequest",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Represents an HTTP POST request."
					},
					"children": [
						{
							"id": 422,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {},
							"signatures": [
								{
									"id": 423,
									"name": "new HttpPostRequest",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 424,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Path to send the request to.\n"
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HttpPostRequest",
										"id": 420
									},
									"overwrites": {
										"type": "reference",
										"name": "HttpRequest.__constructor",
										"id": 405
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "HttpRequest.__constructor",
								"id": 405
							}
						},
						{
							"id": 421,
							"name": "formData_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						},
						{
							"id": 430,
							"name": "listenableRequest",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"comment": {
								"shortText": "The XMLHttpRequest object wrapped as a [[ListenableElement]]"
							},
							"type": {
								"type": "reference",
								"name": "ListenableElement",
								"id": 336
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "HttpRequest.listenableRequest",
								"id": 403
							}
						},
						{
							"id": 431,
							"name": "request",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"comment": {
								"shortText": "The XMLHttpRequest object."
							},
							"type": {
								"type": "reference",
								"name": "XMLHttpRequest"
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "HttpRequest.request",
								"id": 404
							}
						},
						{
							"id": 425,
							"name": "sentData",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isProtected": true
							},
							"comment": {
								"returns": "The data to be sent.\n"
							},
							"getSignature": [
								{
									"id": 426,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"returns": "The data to be sent.\n"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									},
									"overwrites": {
										"type": "reference",
										"name": "HttpRequest.sentData",
										"id": 409
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "HttpRequest.sentData",
								"id": 409
							}
						},
						{
							"id": 434,
							"name": "addDisposable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 435,
									"name": "addDisposable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds the given disposable so they are disposed when this object is disposed."
									},
									"parameters": [
										{
											"id": 436,
											"name": "disposables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Disposable objects to be disposed when this object is disposed.\n"
											},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "BaseDisposable",
												"id": 256
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.addDisposable",
										"id": 260
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.addDisposable",
								"id": 260
							}
						},
						{
							"id": 439,
							"name": "dispose",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 440,
									"name": "dispose",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dispose this object."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.dispose",
										"id": 265
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.dispose",
								"id": 265
							}
						},
						{
							"id": 437,
							"name": "disposeInternal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 438,
									"name": "disposeInternal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Override this method for custom logic that are ran during disposal."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.disposeInternal",
										"id": 263
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.disposeInternal",
								"id": 263
							}
						},
						{
							"id": 432,
							"name": "send",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 433,
									"name": "send",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends the HTTP request.",
										"returns": "Promise that will be resolved with the response text if successful, or rejected with\n   the XMLHttpRequest request object otherwise.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											}
										]
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "HttpRequest.send",
										"id": 411
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "HttpRequest.send",
								"id": 411
							}
						},
						{
							"id": 427,
							"name": "setFormData",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 428,
									"name": "setFormData",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sets the form data to be sent.",
										"returns": "This object for chaining.\n"
									},
									"parameters": [
										{
											"id": 429,
											"name": "data",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "JSON representation of the form data to be sent. The key corresponds to each form\n   field."
											},
											"type": {
												"type": "reference",
												"name": "IJson"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HttpPostRequest",
										"id": 420
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								422
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								421,
								430,
								431
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								425
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								434,
								439,
								437,
								432,
								427
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "HttpRequest",
							"id": 402
						}
					]
				},
				{
					"id": 402,
					"name": "HttpRequest",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Base class for all HTTP requests."
					},
					"children": [
						{
							"id": 405,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {},
							"signatures": [
								{
									"id": 406,
									"name": "new HttpRequest",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 407,
											"name": "method",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The HTTP method to send."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 408,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The path to send the request to.\n"
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "HttpRequest",
										"id": 402
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseDisposable.__constructor",
										"id": 258
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseDisposable.__constructor",
								"id": 258
							}
						},
						{
							"id": 403,
							"name": "listenableRequest",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"comment": {
								"shortText": "The XMLHttpRequest object wrapped as a [[ListenableElement]]"
							},
							"type": {
								"type": "reference",
								"name": "ListenableElement",
								"id": 336
							}
						},
						{
							"id": 404,
							"name": "request",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isProtected": true
							},
							"comment": {
								"shortText": "The XMLHttpRequest object."
							},
							"type": {
								"type": "reference",
								"name": "XMLHttpRequest"
							}
						},
						{
							"id": 409,
							"name": "sentData",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isProtected": true
							},
							"comment": {
								"returns": "The data to be sent.\n"
							},
							"getSignature": [
								{
									"id": 410,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"returns": "The data to be sent.\n"
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 413,
							"name": "addDisposable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 414,
									"name": "addDisposable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds the given disposable so they are disposed when this object is disposed."
									},
									"parameters": [
										{
											"id": 415,
											"name": "disposables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Disposable objects to be disposed when this object is disposed.\n"
											},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "BaseDisposable",
												"id": 256
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.addDisposable",
										"id": 260
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.addDisposable",
								"id": 260
							}
						},
						{
							"id": 418,
							"name": "dispose",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 419,
									"name": "dispose",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dispose this object."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.dispose",
										"id": 265
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.dispose",
								"id": 265
							}
						},
						{
							"id": 416,
							"name": "disposeInternal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 417,
									"name": "disposeInternal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Override this method for custom logic that are ran during disposal."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.disposeInternal",
										"id": 263
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.disposeInternal",
								"id": 263
							}
						},
						{
							"id": 411,
							"name": "send",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 412,
									"name": "send",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Sends the HTTP request.",
										"returns": "Promise that will be resolved with the response text if successful, or rejected with\n   the XMLHttpRequest request object otherwise.\n"
									},
									"type": {
										"type": "reference",
										"name": "Promise",
										"typeArguments": [
											{
												"type": "instrinct",
												"name": "string"
											}
										]
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								405
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								403,
								404
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								409
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								413,
								418,
								416,
								411
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseDisposable",
							"id": 256
						}
					],
					"extendedBy": [
						{
							"type": "reference",
							"name": "HttpPostRequest",
							"id": 420
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						441,
						420,
						402
					]
				}
			]
		},
		{
			"id": 445,
			"name": "\"ng/base-service\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/ng/base-service.ts",
			"children": [
				{
					"id": 446,
					"name": "BaseService",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Base class for all Angular services.",
						"text": "This sets the service as a [[BaseListenable]]. This class also listens for\n`beforeunload` events to dispose itself.\n"
					},
					"typeParameter": [
						{
							"id": 447,
							"name": "E",
							"kind": 131072,
							"kindString": "Type parameter",
							"flags": {},
							"comment": {
								"shortText": "The event type enum that this service can dispatch.\n"
							}
						}
					],
					"children": [
						{
							"id": 448,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {},
							"signatures": [
								{
									"id": 449,
									"name": "new BaseService",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 450,
											"name": "window",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Reference to the window object.\n"
											},
											"type": {
												"type": "reference",
												"name": "Window"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "BaseService",
										"id": 446
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseListenable.__constructor",
										"id": 294
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseListenable.__constructor",
								"id": 294
							}
						},
						{
							"id": 466,
							"name": "addDisposable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 467,
									"name": "addDisposable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds the given disposable so they are disposed when this object is disposed."
									},
									"parameters": [
										{
											"id": 468,
											"name": "disposables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Disposable objects to be disposed when this object is disposed.\n"
											},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "BaseDisposable",
												"id": 256
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.addDisposable",
										"id": 260
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.addDisposable",
								"id": 260
							}
						},
						{
							"id": 455,
							"name": "dispatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 456,
									"name": "dispatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 457,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Type of event to dispatch."
											},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										},
										{
											"id": 458,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Any payloads that are associated with the event, if any.\n"
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											},
											"defaultValue": " null"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseListenable.dispatch",
										"id": 298
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseListenable.dispatch",
								"id": 298
							}
						},
						{
							"id": 469,
							"name": "dispose",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 470,
									"name": "dispose",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dispose this object."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.dispose",
										"id": 265
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.dispose",
								"id": 265
							}
						},
						{
							"id": 453,
							"name": "disposeInternal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 454,
									"name": "disposeInternal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": "\n"
											}
										]
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseDisposable.disposeInternal",
										"id": 263
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseListenable.disposeInternal",
										"id": 296
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseDisposable.disposeInternal",
								"id": 263
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseListenable.disposeInternal",
								"id": 296
							}
						},
						{
							"id": 459,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 460,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens to an event dispatched by this object.",
										"returns": "[[DisposableFunction]] that should be disposed to stop listening to the event.\n"
									},
									"parameters": [
										{
											"id": 461,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Type of event to listen to."
											},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										},
										{
											"id": 462,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The callback to be called when the specified event is dispatched."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 463,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 464,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 465,
																	"name": "payload",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DisposableFunction",
										"id": 271
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseListenable.on",
										"id": 302
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseListenable.on",
								"id": 302
							}
						},
						{
							"id": 451,
							"name": "onBeforeUnload_",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 452,
									"name": "onBeforeUnload_",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								448
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								466,
								455,
								469,
								453,
								459,
								451
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseListenable",
							"id": 288,
							"typeArguments": [
								{
									"type": "typeParameter",
									"name": "E"
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						446
					]
				}
			]
		},
		{
			"id": 490,
			"name": "\"ng/bem-class\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/ng/bem-class.ts",
			"children": [
				{
					"id": 491,
					"name": "BemClassCtrl",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Controller for the `gs-bem-class` directive."
					},
					"children": [
						{
							"id": 495,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 496,
									"name": "new BemClassCtrl",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "BemClassCtrl",
										"id": 491
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseDisposable.__constructor",
										"id": 258
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseDisposable.__constructor",
								"id": 258
							}
						},
						{
							"id": 492,
							"name": "appliedClasses_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"type": {
								"type": "instrinct",
								"isArray": true,
								"name": "string"
							}
						},
						{
							"id": 493,
							"name": "classPrefix_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"type": {
								"type": "instrinct",
								"name": "string"
							}
						},
						{
							"id": 494,
							"name": "element_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "HTMLElement"
							}
						},
						{
							"id": 508,
							"name": "addDisposable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 509,
									"name": "addDisposable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds the given disposable so they are disposed when this object is disposed."
									},
									"parameters": [
										{
											"id": 510,
											"name": "disposables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Disposable objects to be disposed when this object is disposed.\n"
											},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "BaseDisposable",
												"id": 256
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.addDisposable",
										"id": 260
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.addDisposable",
								"id": 260
							}
						},
						{
							"id": 513,
							"name": "dispose",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 514,
									"name": "dispose",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dispose this object."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.dispose",
										"id": 265
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.dispose",
								"id": 265
							}
						},
						{
							"id": 511,
							"name": "disposeInternal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 512,
									"name": "disposeInternal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Override this method for custom logic that are ran during disposal."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.disposeInternal",
										"id": 263
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.disposeInternal",
								"id": 263
							}
						},
						{
							"id": 503,
							"name": "onLink",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 504,
									"name": "onLink",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Handler called during linking step."
									},
									"parameters": [
										{
											"id": 505,
											"name": "scope",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {},
											"type": {
												"type": "reference",
												"name": "IScope"
											}
										},
										{
											"id": 506,
											"name": "attrValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value of the `gs-bem-class` attribute."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 507,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element that the directive is attached to.\n"
											},
											"type": {
												"type": "reference",
												"name": "HTMLElement"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 497,
							"name": "onWatchValueChange_",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 498,
									"name": "onWatchValueChange_",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"parameters": [
										{
											"id": 499,
											"name": "newValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "union",
												"types": [
													{
														"type": "instrinct",
														"name": "string"
													},
													{
														"type": "instrinct",
														"isArray": true,
														"name": "string"
													},
													{
														"type": "reflection",
														"declaration": {
															"id": 500,
															"name": "__type",
															"kind": 65536,
															"kindString": "Type literal",
															"flags": {},
															"indexSignature": [
																{
																	"id": 501,
																	"name": "__index",
																	"kind": 8192,
																	"kindString": "Index signature",
																	"flags": {},
																	"parameters": [
																		{
																			"id": 502,
																			"name": "className",
																			"kind": 32768,
																			"kindString": "Parameter",
																			"flags": {},
																			"type": {
																				"type": "instrinct",
																				"name": "string"
																			}
																		}
																	],
																	"type": {
																		"type": "instrinct",
																		"name": "boolean"
																	}
																}
															]
														}
													}
												]
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								495
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								492,
								493,
								494
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								508,
								513,
								511,
								503,
								497
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseDisposable",
							"id": 256
						}
					]
				},
				{
					"id": 515,
					"name": "CSS_ROOT_ATTR_",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "instrinct",
						"name": "string"
					},
					"defaultValue": "\"gs-bem-root\""
				},
				{
					"id": 516,
					"name": "NgModule",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "Attribute directive to apply BEM to CSS classes.",
						"text": "Using this consists of two parts:\n\n1.  Use `gs-bem-class` instead of `ng-class` or `class` on the elements you want to apply this\n    to.\n1.  At the root of your directive, add a `gs-bem-root` attribute.\n\nThis directive will replace the CSS classes specified in `gs-bem-class` by prepending the value\nin `gs-bem-root`.\n\n```html\n<div gs-bem-root=\"root-elem\">\n  <ul>\n    <li gs-bem-class=\"list-item\">\n      This tag will have CSS class: root-elem__list-item\n    </li>\n  </ul>\n</div>\n```\n\nThe value of the attribute can take the following possible forms:\n\n1.  **Simple string**: This string will simple be prepended with the `gs-bem-root` value.\n1.  **Array of strings**: All of the string elements in the array will be prepended with the\n    `gs-bem-root` value.\n1.  **Record of booleans**: If the value of the entry is true, the key of that entry will be\n    applied, with the `gs-bem-root` value prepended to the key.\n"
					},
					"type": {
						"type": "reference",
						"name": "IModule"
					},
					"defaultValue": " angular\n    .module('gsTools.ng.BemClass', [])\n    .directive('gsBemClass', () => {\n      return {\n        controller: BemClassCtrl,\n        link: (\n            scope: angular.IScope,\n            element: angular.IAugmentedJQuery,\n            attr: angular.IAttributes,\n            ctrl: BemClassCtrl): void => {\n          ctrl.onLink(scope, attr['gsBemClass'], element[0]);\n        },\n        restrict: 'A',\n      };\n    })"
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						491
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						515,
						516
					]
				}
			]
		},
		{
			"id": 517,
			"name": "\"ng/fake-scope\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/ng/fake-scope.ts",
			"children": [
				{
					"id": 518,
					"name": "FakeScope",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Utility class to generate a fake angular `Scope` object."
					},
					"children": [
						{
							"id": 519,
							"name": "create",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 520,
									"name": "create",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Creates a fake angular `Scope` object.",
										"text": "This overrides `$on` and `$watch` to return a deregister function that makes sure that it is\ncalled by the end of the test. This uses the [[DisposableFunction]] mechanism. So to enable\nthis check, you will need to setup [[TestDispose]].\n",
										"returns": "The fake Angular Scope object.\n"
									},
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								519
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						518
					]
				}
			]
		},
		{
			"id": 521,
			"name": "\"ng/route-service\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/ng/route-service.ts",
			"children": [
				{
					"id": 522,
					"name": "RouteService",
					"kind": 128,
					"kindString": "Class",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "The wrapper for Angular's `ngRoute` service."
					},
					"children": [
						{
							"id": 525,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {
								"isExported": true
							},
							"comment": {},
							"signatures": [
								{
									"id": 526,
									"name": "new RouteService",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 527,
											"name": "$location",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "Angular's location service."
											},
											"type": {
												"type": "reference",
												"name": "ILocationService"
											}
										},
										{
											"id": 528,
											"name": "$rootScope",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The root scope.\n"
											},
											"type": {
												"type": "reference",
												"name": "IScope"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "RouteService",
										"id": 522
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseDisposable.__constructor",
										"id": 258
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseDisposable.__constructor",
								"id": 258
							}
						},
						{
							"id": 523,
							"name": "$location_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "ILocationService"
							}
						},
						{
							"id": 524,
							"name": "tempParams_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"type": {
								"type": "reference",
								"name": "IJson"
							}
						},
						{
							"id": 531,
							"name": "params",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Routing parameters, both in memory only and URL search parameters."
							},
							"decorators": [
								{
									"name": "Cache",
									"type": {
										"type": "reference",
										"name": "Cache",
										"id": 224
									},
									"arguments": {}
								}
							],
							"getSignature": [
								{
									"id": 532,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Routing parameters, both in memory only and URL search parameters."
									},
									"type": {
										"type": "reference",
										"name": "IJson"
									}
								}
							]
						},
						{
							"id": 533,
							"name": "path",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "Current routing path."
							},
							"getSignature": [
								{
									"id": 534,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "Current routing path."
									},
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							]
						},
						{
							"id": 540,
							"name": "addDisposable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 541,
									"name": "addDisposable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds the given disposable so they are disposed when this object is disposed."
									},
									"parameters": [
										{
											"id": 542,
											"name": "disposables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Disposable objects to be disposed when this object is disposed.\n"
											},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "BaseDisposable",
												"id": 256
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.addDisposable",
										"id": 260
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.addDisposable",
								"id": 260
							}
						},
						{
							"id": 545,
							"name": "dispose",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 546,
									"name": "dispose",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dispose this object."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.dispose",
										"id": 265
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.dispose",
								"id": 265
							}
						},
						{
							"id": 543,
							"name": "disposeInternal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 544,
									"name": "disposeInternal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Override this method for custom logic that are ran during disposal."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.disposeInternal",
										"id": 263
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.disposeInternal",
								"id": 263
							}
						},
						{
							"id": 529,
							"name": "onRouteChangeSuccess_",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true,
								"isExported": true
							},
							"signatures": [
								{
									"id": 530,
									"name": "onRouteChangeSuccess_",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 535,
							"name": "to",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isExported": true
							},
							"signatures": [
								{
									"id": 536,
									"name": "to",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Navigates to the given path."
									},
									"parameters": [
										{
											"id": 537,
											"name": "path",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The path to navigate to."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 538,
											"name": "searchParams",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Parameters and their values that will be displayed in the URL bar as search\n   params. The values will be JSON stringified."
											},
											"type": {
												"type": "reference",
												"name": "IJson"
											},
											"defaultValue": " {}"
										},
										{
											"id": 539,
											"name": "tempParams",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Other parameters and their values to set.\n"
											},
											"type": {
												"type": "reference",
												"name": "IJson"
											},
											"defaultValue": " {}"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								525
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								523,
								524
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								531,
								533
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								540,
								545,
								543,
								529,
								535
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseDisposable",
							"id": 256
						}
					]
				},
				{
					"id": 547,
					"name": "NgModule",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"comment": {
						"shortText": "An enhanced version of Angular's `ngRoute` service.",
						"text": "This adds an in memory parameter. When navigating, you can set parameters that affect the URL\nsearch parameters, or just the in memory parameter.\n\nFor example:\n\n```typescript\nimport RouteService from './ng/route-service';\n\n// Navigates to \"/path?param1=value\"\nRouteService.to('/path', {'param1': 'value'}, {'param2': 'value'});\n\nexpect(RouteService.params).toEqual({\n  'param1': 'value',\n  'param2': 'value',  // You can still get this even though it is not in the URL\n});\n```\n"
					},
					"type": {
						"type": "reference",
						"name": "IModule"
					},
					"defaultValue": " angular\n    .module('gsTools.ng.RouteService', ['ngRoute'])\n    .service('gsRouteService', RouteService)"
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						522
					]
				},
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						547
					]
				}
			]
		},
		{
			"id": 548,
			"name": "\"testing/i-test-setup\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/testing/i-test-setup.ts",
			"children": [
				{
					"id": 549,
					"name": "ITestSetup",
					"kind": 256,
					"kindString": "Interface",
					"flags": {},
					"comment": {
						"shortText": "Interface to implement for [[TestSetup]] code."
					},
					"children": [
						{
							"id": 550,
							"name": "afterEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 551,
									"name": "afterEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the code in jasmine's `afterEach` logic."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 552,
							"name": "beforeEach",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 553,
									"name": "beforeEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the code in jasmine's `beforeEach` logic."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								550,
								552
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Interfaces",
					"kind": 256,
					"children": [
						549
					]
				}
			]
		},
		{
			"id": 554,
			"name": "\"testing/test-async\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/testing/test-async.ts",
			"children": [
				{
					"id": 555,
					"name": "TestSetup",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"comment": {
						"shortText": "Test setup object for testing any code using code from the `async` directory.",
						"text": "This replaces `Asyncs.run` to run synchronously to make testing easier.\n"
					},
					"children": [
						{
							"id": 556,
							"name": "afterEach",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 557,
									"name": "afterEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the code in jasmine's `afterEach` logic."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 558,
							"name": "beforeEach",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 559,
									"name": "beforeEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the code in jasmine's `beforeEach` logic."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								556,
								558
							]
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						555
					]
				}
			]
		},
		{
			"id": 560,
			"name": "\"testing/test-dispose\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/testing/test-dispose.ts",
			"children": [
				{
					"id": 561,
					"name": "DISPOSABLES",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "reference",
						"name": "Array",
						"typeArguments": [
							{
								"type": "instrinct",
								"name": "any"
							}
						]
					},
					"defaultValue": " []"
				},
				{
					"id": 562,
					"name": "TestSetup",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"comment": {
						"shortText": "Test setup object for testing any code using code from the `dispose` directory.",
						"text": "This checks that all [[BaseDisposable]] objects are disposed at the end of the test. Objects that\nneed to be disposed manually (because they should be disposed through some flow not covered by\nthe test) can be disposed by using the [[add]] method.\n"
					},
					"children": [
						{
							"id": 563,
							"name": "add",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 564,
									"name": "add",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds the given disposables to be disposed at the end of the test."
									},
									"parameters": [
										{
											"id": 565,
											"name": "disposables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "BaseDisposable",
												"id": 256
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 566,
							"name": "afterEach",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 567,
									"name": "afterEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the code in jasmine's `afterEach` logic."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 568,
							"name": "beforeEach",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 569,
									"name": "beforeEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the code in jasmine's `beforeEach` logic."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								563,
								566,
								568
							]
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						561
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						562
					]
				}
			]
		},
		{
			"id": 570,
			"name": "\"testing/test-event\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/testing/test-event.ts",
			"children": [
				{
					"id": 571,
					"name": "___calls",
					"kind": 32,
					"kindString": "Variable",
					"flags": {},
					"type": {
						"type": "instrinct",
						"name": "symbol"
					},
					"defaultValue": " Symbol('calls')"
				},
				{
					"id": 572,
					"name": "TestSetup",
					"kind": 2097152,
					"kindString": "Object literal",
					"flags": {},
					"comment": {
						"tags": [
							{
								"tag": "deprecated",
								"text": "Use spyOn dispatchEvent.\n"
							}
						]
					},
					"children": [
						{
							"id": 583,
							"name": "afterEach",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 584,
									"name": "afterEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the code in jasmine's `afterEach` logic."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 585,
							"name": "beforeEach",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 586,
									"name": "beforeEach",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Runs the code in jasmine's `beforeEach` logic."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						},
						{
							"id": 573,
							"name": "getPayloads",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 574,
									"name": "getPayloads",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "deprecated",
												"text": "Use spyOn dispatchEvent.\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 575,
											"name": "E",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 576,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BaseListenable",
												"id": 288,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											}
										},
										{
											"id": 577,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"name": "E"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"isArray": true,
										"name": "any"
									}
								}
							]
						},
						{
							"id": 578,
							"name": "spyOn",
							"kind": 64,
							"kindString": "Function",
							"flags": {},
							"signatures": [
								{
									"id": 579,
									"name": "spyOn",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "deprecated",
												"text": "Use spyOn dispatchEvent.\n"
											}
										]
									},
									"typeParameter": [
										{
											"id": 580,
											"name": "E",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 581,
											"name": "target",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"name": "BaseListenable",
												"id": 288,
												"typeArguments": [
													{
														"type": "typeParameter",
														"name": "E"
													}
												]
											}
										},
										{
											"id": 582,
											"name": "eventTypes",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "typeParameter",
												"isArray": true,
												"name": "E"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "any"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Functions",
							"kind": 64,
							"children": [
								583,
								585,
								573,
								578
							]
						}
					],
					"type": {
						"type": "instrinct",
						"name": "object"
					}
				}
			],
			"groups": [
				{
					"title": "Variables",
					"kind": 32,
					"children": [
						571
					]
				},
				{
					"title": "Object literals",
					"kind": 2097152,
					"children": [
						572
					]
				}
			]
		},
		{
			"id": 587,
			"name": "\"testing/test-setup\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/testing/test-setup.ts",
			"children": [
				{
					"id": 588,
					"name": "TestSetup",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Sets up testing logic for your project.",
						"text": "Each directory in `gs-tools` may contain special testing logic. Whenever you use them in your\nproject, you want to install the corresponding test setup file for tests in your project.\n\nA recommended way to use this is to create a `test-base.ts` file in your project to set up the\n`TestSetup` and include the `test-base` in every test. This `test-base` class should install the\ntest setup plugins to use, and call [[setup]] once during the test.\n\nExample `test-base` file:\n\n```typescript\nimport TestDispose from './testing/test-dispose';\nimport TestSetup from './testing/test-setup';\n\nconst testSetup = new TestSetup([TestDispose]);\nlet initialized = false;\nexport default = {\n  setup() {\n    if (!initialized) {\n      testSetup.setup();\n      initialized = true;\n    }\n  }\n};\n```\n\nIn your test:\n\n```\nimport TestBase from './test-base';\nTestBase.setup();\n\nimport DisposableClass from './disposable-class';\nimport TestDispose from './testing/test-dispose';\n\ndescribe('Some disposable class', () => {\n  it('should do something', () => {\n    let disposableClass = new DisposableClass();\n\n    // Without this, TestDispose will complain that disposableClass does not get disposed at the\n    // end of the test.\n    TestDispose.add(disposableClass);\n  });\n});\n```\n"
					},
					"children": [
						{
							"id": 590,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"signatures": [
								{
									"id": 591,
									"name": "new TestSetup",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"parameters": [
										{
											"id": 592,
											"name": "setups",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "ITestSetup",
												"id": 549
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "TestSetup",
										"id": 588
									}
								}
							]
						},
						{
							"id": 589,
							"name": "setups_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "reference",
								"isArray": true,
								"name": "ITestSetup",
								"id": 549
							}
						},
						{
							"id": 593,
							"name": "setup",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 594,
									"name": "setup",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								590
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								589
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								593
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						588
					]
				}
			]
		},
		{
			"id": 314,
			"name": "\"typescript/enums\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/typescript/enums.ts",
			"children": [
				{
					"id": 315,
					"name": "Enums",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Utility methods to work with typescript's enums."
					},
					"children": [
						{
							"id": 321,
							"name": "fromLowerCaseString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 322,
									"name": "fromLowerCaseString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts enum name (as lower case string) to the corresponding enum value.",
										"returns": "The enum value corresponding to the enum name.\n"
									},
									"typeParameter": [
										{
											"id": 323,
											"name": "E",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 324,
											"name": "stringValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The string value to convert to enum value."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 325,
											"name": "enumSet",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The set of enum values."
											},
											"type": {
												"type": "reference",
												"name": "IEnum"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							]
						},
						{
							"id": 316,
							"name": "fromNumberString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 317,
									"name": "fromNumberString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts enum number (as string) to the corresponding enum value.",
										"returns": "The enum value corresponding to the enum number.\n"
									},
									"typeParameter": [
										{
											"id": 318,
											"name": "E",
											"kind": 131072,
											"kindString": "Type parameter",
											"flags": {}
										}
									],
									"parameters": [
										{
											"id": 319,
											"name": "stringValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The number to convert to enum value."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 320,
											"name": "enumSet",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The set of enum values."
											},
											"type": {
												"type": "reference",
												"name": "IEnum"
											}
										}
									],
									"type": {
										"type": "typeParameter",
										"name": "E"
									}
								}
							]
						},
						{
							"id": 326,
							"name": "toLowerCaseString",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 327,
									"name": "toLowerCaseString",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Converts the given enum value to lower case version of its name.",
										"returns": "The lower case version of the enum name that corresponds to the enum value.\n"
									},
									"parameters": [
										{
											"id": 328,
											"name": "enumValue",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The enum value to convert."
											},
											"type": {
												"type": "instrinct",
												"name": "number"
											}
										},
										{
											"id": 329,
											"name": "enumSet",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The set of enum values."
											},
											"type": {
												"type": "reference",
												"name": "IEnum"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "string"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								321,
								316,
								326
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						315
					]
				}
			]
		},
		{
			"id": 595,
			"name": "\"ui/attributes\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/ui/attributes.ts",
			"children": [
				{
					"id": 596,
					"name": "Attributes",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Methods to manipulate DOM attributes."
					},
					"children": [
						{
							"id": 597,
							"name": "add",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 598,
									"name": "add",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds a new attribute to the given element.",
										"returns": "The newly added attribute.\n"
									},
									"parameters": [
										{
											"id": 599,
											"name": "name",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Name of the attribute to add."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 600,
											"name": "value",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Value of the attribute to set."
											},
											"type": {
												"type": "instrinct",
												"name": "string"
											}
										},
										{
											"id": 601,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Element to add the attribute to."
											},
											"type": {
												"type": "reference",
												"name": "HTMLElement"
											}
										},
										{
											"id": 602,
											"name": "document",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Reference to the document object."
											},
											"type": {
												"type": "reference",
												"name": "Document"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Attr"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								597
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						596
					]
				}
			]
		},
		{
			"id": 471,
			"name": "\"ui/doms\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/ui/doms.ts",
			"children": [
				{
					"id": 472,
					"name": "Doms",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Methods to manipulate DOM objects."
					},
					"children": [
						{
							"id": 473,
							"name": "domIterable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 474,
									"name": "domIterable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an iterable that uses a seed value and continuously transforms it.",
										"returns": "Iterable object that starts with the seed value and continuously steps through it.",
										"tags": [
											{
												"tag": "todo",
												"text": "Move to iterables.\n"
											}
										]
									},
									"parameters": [
										{
											"id": 475,
											"name": "start",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The seed value."
											},
											"type": {
												"type": "reference",
												"name": "HTMLElement"
											}
										},
										{
											"id": 476,
											"name": "stepper",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Function to step to the next value. Return null to stop the iteration."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 477,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 478,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 479,
																	"name": "fromEl",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "reference",
																		"name": "HTMLElement"
																	}
																}
															],
															"type": {
																"type": "reference",
																"name": "HTMLElement"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								}
							]
						},
						{
							"id": 480,
							"name": "offsetParentIterable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 481,
									"name": "offsetParentIterable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an iterable that navigates up the DOM hierarchy using the `offsetParent` property.",
										"returns": "The iterable that navigates up the `offsetParent` chain.\n"
									},
									"parameters": [
										{
											"id": 482,
											"name": "start",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The DOM element to start with."
											},
											"type": {
												"type": "reference",
												"name": "HTMLElement"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								}
							]
						},
						{
							"id": 483,
							"name": "parentIterable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 484,
									"name": "parentIterable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns an iterable that navigates up the DOM hierarchy using the `parentElement` property.",
										"returns": "The iterable that navigates up the parent chain.\n"
									},
									"parameters": [
										{
											"id": 485,
											"name": "start",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The DOM element to start with."
											},
											"type": {
												"type": "reference",
												"name": "HTMLElement"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "Iterable",
										"typeArguments": [
											{
												"type": "reference",
												"name": "HTMLElement"
											}
										]
									}
								}
							]
						},
						{
							"id": 486,
							"name": "relativeOffsetTop",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isStatic": true
							},
							"signatures": [
								{
									"id": 487,
									"name": "relativeOffsetTop",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Returns the relative offset top between the two given elements.",
										"returns": "The relative offset top between the two given elements.\n"
									},
									"parameters": [
										{
											"id": 488,
											"name": "fromEl",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element to do measurements from."
											},
											"type": {
												"type": "reference",
												"name": "HTMLElement"
											}
										},
										{
											"id": 489,
											"name": "toEl",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The element to do measurements to."
											},
											"type": {
												"type": "reference",
												"name": "HTMLElement"
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "number"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								473,
								480,
								483,
								486
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						472
					]
				}
			]
		},
		{
			"id": 603,
			"name": "\"ui/overflow-watcher\"",
			"kind": 1,
			"kindString": "External module",
			"flags": {
				"isExported": true
			},
			"originalName": "/Users/gsoed/proj/gs-tools/src/ui/overflow-watcher.ts",
			"children": [
				{
					"id": 608,
					"name": "EventType",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "Events dispatched by the watcher."
					},
					"children": [
						{
							"id": 609,
							"name": "CHANGED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The state of the element has changed."
							}
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								609
							]
						}
					]
				},
				{
					"id": 604,
					"name": "State",
					"kind": 4,
					"kindString": "Enumeration",
					"flags": {
						"isExported": true
					},
					"comment": {
						"shortText": "State of the element being watched."
					},
					"children": [
						{
							"id": 605,
							"name": "COVERED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The element is completely covered."
							}
						},
						{
							"id": 606,
							"name": "PARTIAL",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The element is partially covered."
							}
						},
						{
							"id": 607,
							"name": "UNCOVERED",
							"kind": 16,
							"kindString": "Enumeration member",
							"flags": {
								"isExported": true
							},
							"comment": {
								"shortText": "The element is completely uncovered."
							}
						}
					],
					"groups": [
						{
							"title": "Enumeration members",
							"kind": 16,
							"children": [
								605,
								606,
								607
							]
						}
					]
				},
				{
					"id": 610,
					"name": "OverflowWatcher",
					"kind": 128,
					"kindString": "Class",
					"flags": {},
					"comment": {
						"shortText": "Watches an element in the given container to see if the element is scrolled off the container.",
						"text": "To use this, give it the container element and the element to be watched. Listen to the\n[[CHANGED]] event for when the element's state ([[COVERED]], [[PARTIAL]], [[UNCOVERED]]) has\nchanged.\n"
					},
					"children": [
						{
							"id": 614,
							"name": "constructor",
							"kind": 512,
							"kindString": "Constructor",
							"flags": {},
							"comment": {},
							"signatures": [
								{
									"id": 615,
									"name": "new OverflowWatcher",
									"kind": 16384,
									"kindString": "Constructor signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 616,
											"name": "container",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The container element."
											},
											"type": {
												"type": "reference",
												"name": "HTMLElement"
											}
										},
										{
											"id": 617,
											"name": "element",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"shortText": "The element to watch.\n"
											},
											"type": {
												"type": "reference",
												"name": "HTMLElement"
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "OverflowWatcher",
										"id": 610
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseListenable.__constructor",
										"id": 294
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseListenable.__constructor",
								"id": 294
							}
						},
						{
							"id": 611,
							"name": "containerEl_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "reference",
								"name": "HTMLElement"
							}
						},
						{
							"id": 612,
							"name": "element_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "reference",
								"name": "HTMLElement"
							}
						},
						{
							"id": 613,
							"name": "state_",
							"kind": 1024,
							"kindString": "Property",
							"flags": {
								"isPrivate": true
							},
							"type": {
								"type": "reference",
								"name": "State",
								"id": 604
							}
						},
						{
							"id": 622,
							"name": "state",
							"kind": 262144,
							"kindString": "Accessor",
							"flags": {},
							"comment": {
								"shortText": "[[State]] of the element being watched."
							},
							"getSignature": [
								{
									"id": 623,
									"name": "__get",
									"kind": 524288,
									"kindString": "Get signature",
									"flags": {},
									"comment": {
										"shortText": "[[State]] of the element being watched."
									},
									"type": {
										"type": "reference",
										"name": "State",
										"id": 604
									}
								}
							]
						},
						{
							"id": 637,
							"name": "addDisposable",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 638,
									"name": "addDisposable",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Adds the given disposable so they are disposed when this object is disposed."
									},
									"parameters": [
										{
											"id": 639,
											"name": "disposables",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {
												"isRest": true
											},
											"comment": {
												"text": "Disposable objects to be disposed when this object is disposed.\n"
											},
											"type": {
												"type": "reference",
												"isArray": true,
												"name": "BaseDisposable",
												"id": 256
											}
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.addDisposable",
										"id": 260
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.addDisposable",
								"id": 260
							}
						},
						{
							"id": 626,
							"name": "dispatch",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 627,
									"name": "dispatch",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {},
									"parameters": [
										{
											"id": 628,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Type of event to dispatch."
											},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 608
											}
										},
										{
											"id": 629,
											"name": "payload",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Any payloads that are associated with the event, if any.\n"
											},
											"type": {
												"type": "instrinct",
												"name": "any"
											},
											"defaultValue": " null"
										}
									],
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseListenable.dispatch",
										"id": 298
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseListenable.dispatch",
								"id": 298
							}
						},
						{
							"id": 640,
							"name": "dispose",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 641,
									"name": "dispose",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Dispose this object."
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseDisposable.dispose",
										"id": 265
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseDisposable.dispose",
								"id": 265
							}
						},
						{
							"id": 624,
							"name": "disposeInternal",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 625,
									"name": "disposeInternal",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"tags": [
											{
												"tag": "override",
												"text": "\n"
											}
										]
									},
									"type": {
										"type": "instrinct",
										"name": "void"
									},
									"overwrites": {
										"type": "reference",
										"name": "BaseDisposable.disposeInternal",
										"id": 263
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseListenable.disposeInternal",
										"id": 296
									}
								}
							],
							"overwrites": {
								"type": "reference",
								"name": "BaseDisposable.disposeInternal",
								"id": 263
							},
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseListenable.disposeInternal",
								"id": 296
							}
						},
						{
							"id": 618,
							"name": "getState_",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 619,
									"name": "getState_",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "reference",
										"name": "State",
										"id": 604
									}
								}
							]
						},
						{
							"id": 630,
							"name": "on",
							"kind": 2048,
							"kindString": "Method",
							"flags": {},
							"signatures": [
								{
									"id": 631,
									"name": "on",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"comment": {
										"shortText": "Listens to an event dispatched by this object.",
										"returns": "[[DisposableFunction]] that should be disposed to stop listening to the event.\n"
									},
									"parameters": [
										{
											"id": 632,
											"name": "eventType",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "Type of event to listen to."
											},
											"type": {
												"type": "reference",
												"name": "EventType",
												"id": 608
											}
										},
										{
											"id": 633,
											"name": "callback",
											"kind": 32768,
											"kindString": "Parameter",
											"flags": {},
											"comment": {
												"text": "The callback to be called when the specified event is dispatched."
											},
											"type": {
												"type": "reflection",
												"declaration": {
													"id": 634,
													"name": "__type",
													"kind": 65536,
													"kindString": "Type literal",
													"flags": {},
													"signatures": [
														{
															"id": 635,
															"name": "__call",
															"kind": 4096,
															"kindString": "Call signature",
															"flags": {},
															"parameters": [
																{
																	"id": 636,
																	"name": "payload",
																	"kind": 32768,
																	"kindString": "Parameter",
																	"flags": {},
																	"type": {
																		"type": "instrinct",
																		"name": "any"
																	}
																}
															],
															"type": {
																"type": "instrinct",
																"name": "void"
															}
														}
													]
												}
											}
										}
									],
									"type": {
										"type": "reference",
										"name": "DisposableFunction",
										"id": 271
									},
									"inheritedFrom": {
										"type": "reference",
										"name": "BaseListenable.on",
										"id": 302
									}
								}
							],
							"inheritedFrom": {
								"type": "reference",
								"name": "BaseListenable.on",
								"id": 302
							}
						},
						{
							"id": 620,
							"name": "onScroll_",
							"kind": 2048,
							"kindString": "Method",
							"flags": {
								"isPrivate": true
							},
							"signatures": [
								{
									"id": 621,
									"name": "onScroll_",
									"kind": 4096,
									"kindString": "Call signature",
									"flags": {},
									"type": {
										"type": "instrinct",
										"name": "void"
									}
								}
							]
						}
					],
					"groups": [
						{
							"title": "Constructors",
							"kind": 512,
							"children": [
								614
							]
						},
						{
							"title": "Properties",
							"kind": 1024,
							"children": [
								611,
								612,
								613
							]
						},
						{
							"title": "Accessors",
							"kind": 262144,
							"children": [
								622
							]
						},
						{
							"title": "Methods",
							"kind": 2048,
							"children": [
								637,
								626,
								640,
								624,
								618,
								630,
								620
							]
						}
					],
					"extendedTypes": [
						{
							"type": "reference",
							"name": "BaseListenable",
							"id": 288,
							"typeArguments": [
								{
									"type": "reference",
									"name": "EventType",
									"id": 608
								}
							]
						}
					]
				}
			],
			"groups": [
				{
					"title": "Enumerations",
					"kind": 4,
					"children": [
						608,
						604
					]
				},
				{
					"title": "Classes",
					"kind": 128,
					"children": [
						610
					]
				}
			]
		}
	],
	"groups": [
		{
			"title": "External modules",
			"kind": 1,
			"children": [
				27,
				1,
				154,
				35,
				44,
				66,
				95,
				137,
				204,
				234,
				255,
				270,
				287,
				330,
				18,
				366,
				385,
				401,
				445,
				490,
				517,
				521,
				548,
				554,
				560,
				570,
				587,
				314,
				595,
				471,
				603
			]
		}
	]
}