{
  "api": {
    "name": "gs-testing",
    "entityType": "p",
    "examples": [],
    "ref": "gs-testing!",
    "summary": {
      "docNodeType": "p",
      "children": [
        {
          "docNodeType": "t",
          "text": "Library to do Typescript testing."
        }
      ]
    },
    "remarks": {
      "docNodeType": "p",
      "children": [
        {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "This follows a similar pattern to Jasmine, except that it has a much stronger type system; if you change the type of a value, the tests will break during compile time."
            }
          ]
        },
        {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "This also have stricter checking. This uses "
            },
            {
              "docNodeType": "c",
              "code": "==="
            },
            {
              "docNodeType": "t",
              "text": " for equality checks by default."
            }
          ]
        }
      ]
    },
    "hidden": false,
    "module": "",
    "classes": [
      {
        "name": "Environment",
        "entityType": "cl",
        "examples": [],
        "ref": "gs-testing!Environment_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Base class for all testing environments."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Environments allows you to specify logic that are ran before and after every test. This is equivalent to calling "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!init_function(1)"
                  },
                  "text": "init"
                },
                {
                  "docNodeType": "t",
                  "text": " and "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!teardown_function(1)"
                  },
                  "text": "teardown"
                },
                {
                  "docNodeType": "t",
                  "text": ", but you can package this better, since the init and teardown codes are in the same class."
                }
              ]
            },
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "To use an Environment, extend the class and install it using "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!runEnvironment_function(1)"
                  },
                  "text": "runEnvironment"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          ]
        },
        "hidden": false,
        "module": "environment",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare abstract class Environment "
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "innerAfterEach",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!Environment#innerAfterEach_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Runs after every test."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "protected abstract innerAfterEach(): "
                },
                {
                  "docNodeType": "t",
                  "text": "void"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isAbstract": true,
            "isGlobal": false,
            "isProtected": true,
            "overloads": []
          },
          {
            "name": "innerBeforeEach",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!Environment#innerBeforeEach_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Runs before ever test."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "protected abstract innerBeforeEach(): "
                },
                {
                  "docNodeType": "t",
                  "text": "void"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isAbstract": true,
            "isGlobal": false,
            "isProtected": true,
            "overloads": []
          }
        ],
        "isAbstract": true
      },
      {
        "name": "Fake",
        "entityType": "cl",
        "examples": [],
        "ref": "gs-testing!Fake_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Sets up fake behavior for jasmine Spies."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the "
            },
            {
              "docNodeType": "c",
              "code": "Fake"
            },
            {
              "docNodeType": "t",
              "text": " class."
            }
          ]
        },
        "hidden": false,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class Fake<R, A extends "
            },
            {
              "docNodeType": "t",
              "text": "unknown[]"
            },
            {
              "docNodeType": "t",
              "text": "> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!FakesContinuationBuilder_class"
              },
              "text": "FakesContinuationBuilder"
            },
            {
              "docNodeType": "t",
              "text": "<R, A> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "R",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Return type of the "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "A",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Argument types of the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Spy"
                    },
                    {
                      "docNodeType": "t",
                      "text": "."
                    }
                  ]
                },
                {
                  "docNodeType": "p",
                  "children": []
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "call",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!Fake#call_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Sets the target "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " to always calls the given handler and returns the return value of the handler."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "handler",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Handler to be called."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "call(handler: "
                },
                {
                  "docNodeType": "t",
                  "text": "(...args: A) => R"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!Spy_interface"
                  },
                  "text": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " The modified "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " object."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "isAbstract": false
      },
      {
        "name": "FakeFetch",
        "entityType": "cl",
        "examples": [],
        "ref": "gs-testing!FakeFetch_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Mocks out the Fetch API."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "To use this, call "
            },
            {
              "docNodeType": "c",
              "code": "install"
            },
            {
              "docNodeType": "t",
              "text": ". You can set the handling logic of requests using "
            },
            {
              "docNodeType": "c",
              "code": "handleRequest"
            },
            {
              "docNodeType": "t",
              "text": " and "
            },
            {
              "docNodeType": "c",
              "code": "onGet"
            },
            {
              "docNodeType": "t",
              "text": "."
            }
          ]
        },
        "hidden": false,
        "module": "fake",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class FakeFetch "
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "handleRequest",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!FakeFetch#handleRequest_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Sets the API to call the given handler when a request is sent."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "handler",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Function called when the request is sent."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "handleRequest(handler: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!HandlerFn_type"
                  },
                  "text": "HandlerFn"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "void"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "install",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!FakeFetch#install_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Overrides the implementation of "
                },
                {
                  "docNodeType": "c",
                  "code": "fetch"
                },
                {
                  "docNodeType": "t",
                  "text": " with a fake one."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "window",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "The window object to install the FakeFetch on."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "install(window: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Window"
                  },
                  "text": "Window"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "void"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "onGet",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!FakeFetch#onGet_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Starts setting the behavior when handling a GET request."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "url",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "The "
                    },
                    {
                      "docNodeType": "c",
                      "code": "GET"
                    },
                    {
                      "docNodeType": "t",
                      "text": " URL called."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "onGet(url: "
                },
                {
                  "docNodeType": "t",
                  "text": "string"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!ResponseBuilder_class"
                  },
                  "text": "ResponseBuilder"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to set the response for the specified "
                },
                {
                  "docNodeType": "c",
                  "code": "GET"
                },
                {
                  "docNodeType": "t",
                  "text": " request."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "isAbstract": false
      },
      {
        "name": "FakesContinuationBuilder",
        "entityType": "cl",
        "examples": [],
        "ref": "gs-testing!FakesContinuationBuilder_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Defines predicate that should be met for the behavior to be ran."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the "
            },
            {
              "docNodeType": "c",
              "code": "FakesContinuationBuilder"
            },
            {
              "docNodeType": "t",
              "text": " class."
            }
          ]
        },
        "hidden": false,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class FakesContinuationBuilder<R, A extends "
            },
            {
              "docNodeType": "t",
              "text": "unknown[]"
            },
            {
              "docNodeType": "t",
              "text": "> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "R",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Return type of the "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "A",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Argument types of the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Spy"
                    },
                    {
                      "docNodeType": "t",
                      "text": "."
                    }
                  ]
                },
                {
                  "docNodeType": "p",
                  "children": []
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "always",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!FakesContinuationBuilder#always_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Starts a condition that always matches."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "always(): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!ElseBuilder_class"
                  },
                  "text": "ElseBuilder"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Builder to chain the behavior if the arguments match the call."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "when",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!FakesContinuationBuilder#when_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Starts a matching condition."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "args",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Arguments to match. This also accepts matchers. If there are less specified arguments, the rest of the arguments are assumed to match."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "when(...args: "
                },
                {
                  "docNodeType": "t",
                  "text": "A"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!WhenBuilder_class"
                  },
                  "text": "WhenBuilder"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Builder to chain the behavior if the arguments match the call."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "isAbstract": false
      },
      {
        "name": "WhenBuilder",
        "entityType": "cl",
        "examples": [],
        "ref": "gs-testing!WhenBuilder_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Defines behavior ran if the condition matches."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class WhenBuilder<R, A extends "
            },
            {
              "docNodeType": "t",
              "text": "unknown[]"
            },
            {
              "docNodeType": "t",
              "text": "> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "R",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Return type of the "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "A",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Argument types of the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Spy"
                    },
                    {
                      "docNodeType": "t",
                      "text": "."
                    }
                  ]
                },
                {
                  "docNodeType": "p",
                  "children": []
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "call",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!WhenBuilder#call_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Sets the target spy to call the given handler and return the handler's return value if the condition is matched."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "handler",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Function to call if the condition matches."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "call(handler: "
                },
                {
                  "docNodeType": "t",
                  "text": "(...args: A) => R"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!FakesContinuationBuilder_class"
                  },
                  "text": "FakesContinuationBuilder"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " The modified "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " object."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "callOriginal",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!WhenBuilder#callOriginal_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Sets the target spy to call the original implementation if the condition is matched."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "callOriginal(): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!FakesContinuationBuilder_class"
                  },
                  "text": "FakesContinuationBuilder"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " The modified "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " object."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "return",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!WhenBuilder#return_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Sets the target spy to return the given value if the condition is matched."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "value",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Value to be returned."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "return(value: "
                },
                {
                  "docNodeType": "t",
                  "text": "R"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!FakesContinuationBuilder_class"
                  },
                  "text": "FakesContinuationBuilder"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " The modified "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " object."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "isAbstract": false
      }
    ],
    "constants": [
      {
        "name": "should",
        "entityType": "co",
        "examples": [
          {
            "docNodeType": "p",
            "children": [
              {
                "docNodeType": "p",
                "children": [
                  {
                    "docNodeType": "t",
                    "text": "Declaring a test:"
                  }
                ]
              },
              {
                "docNodeType": "cb",
                "code": "should('do something', () => {\n  assert(1).to.equal(1);\n});\n"
              },
              {
                "docNodeType": "p",
                "children": []
              }
            ]
          }
        ],
        "ref": "gs-testing!should_var",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Declares a test."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "This takes in the description of the test, and a test function. The test function will run the tests by calling assertion methods like "
                },
                {
                  "docNodeType": "li",
                  "link": null,
                  "text": "assert"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            },
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "The descriptor should start with a verb, so it reads nicely."
                }
              ]
            },
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Similar to "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!test_var"
                  },
                  "text": "test"
                },
                {
                  "docNodeType": "t",
                  "text": ", you can call "
                },
                {
                  "docNodeType": "c",
                  "code": "only"
                },
                {
                  "docNodeType": "t",
                  "text": " to make only this test ran in the suite."
                }
              ]
            },
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "You can also call "
                },
                {
                  "docNodeType": "c",
                  "code": "skip"
                },
                {
                  "docNodeType": "t",
                  "text": " to skip this test."
                }
              ]
            }
          ]
        },
        "hidden": false,
        "module": "core",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "should: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Should_interface"
              },
              "text": "Should"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "isGlobal": true,
        "isProtected": false
      },
      {
        "name": "test",
        "entityType": "co",
        "examples": [
          {
            "docNodeType": "p",
            "children": [
              {
                "docNodeType": "p",
                "children": [
                  {
                    "docNodeType": "t",
                    "text": "Simple test:"
                  }
                ]
              },
              {
                "docNodeType": "cb",
                "code": "test('testedFunction', () => {\n  should('do something', () => {\n    assert(1).to.equal(1);\n  });\n});\n"
              },
              {
                "docNodeType": "p",
                "children": []
              }
            ]
          },
          {
            "docNodeType": "p",
            "children": [
              {
                "docNodeType": "p",
                "children": [
                  {
                    "docNodeType": "t",
                    "text": "Hierarchical test:"
                  }
                ]
              },
              {
                "docNodeType": "cb",
                "code": "test('TestClass', init => {\n  const _ = init(() => {\n    return {c: new TestClass()};\n  });\n\n  test('testFunction', () => {\n    should('return 1' => {\n      assert(_.c.testFunction()).to.equal(1);\n    });\n  });\n});\n"
              },
              {
                "docNodeType": "p",
                "children": []
              }
            ]
          },
          {
            "docNodeType": "p",
            "children": [
              {
                "docNodeType": "p",
                "children": [
                  {
                    "docNodeType": "t",
                    "text": "Skipped and forced tests:"
                  }
                ]
              },
              {
                "docNodeType": "cb",
                "code": "test('TestClass', () => {\n  test.only('onlyFunction', () => {\n    // Tests in here will be the only ones that are ran.\n  });\n\n  test.skip('skipFunction', () => {\n    // Tests in here will not be ran.\n  });\n});\n"
              },
              {
                "docNodeType": "p",
                "children": []
              }
            ]
          }
        ],
        "ref": "gs-testing!test_var",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Wraps a group of tests."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "This takes in the description of the component tested and a test function. The test function must call "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!should_var"
                  },
                  "text": "should"
                },
                {
                  "docNodeType": "t",
                  "text": " for running every test."
                }
              ]
            },
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "This optionally takes in a base object. This base object will be passed to the "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!init_function(1)"
                  },
                  "text": "init"
                },
                {
                  "docNodeType": "t",
                  "text": " passed into the test function. This base object can be used to propagate test setup object into inner "
                },
                {
                  "docNodeType": "c",
                  "code": "test"
                },
                {
                  "docNodeType": "t",
                  "text": " calls."
                }
              ]
            },
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "You can call "
                },
                {
                  "docNodeType": "c",
                  "code": "only"
                },
                {
                  "docNodeType": "t",
                  "text": " to make only the tests declared by this is ran in the suite."
                }
              ]
            },
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "You can also call "
                },
                {
                  "docNodeType": "c",
                  "code": "skip"
                },
                {
                  "docNodeType": "t",
                  "text": " to skip the tests declared by this."
                }
              ]
            }
          ]
        },
        "hidden": false,
        "module": "core",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "test: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Test_interface"
              },
              "text": "Test"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "isGlobal": true,
        "isProtected": false
      }
    ],
    "functions": [
      {
        "name": "anyThat",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!anyThat_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Entry point for building a matcher that matches any objects."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function anyThat<T>(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!AnyTester_class"
              },
              "text": "AnyTester"
            },
            {
              "docNodeType": "t",
              "text": "<T, "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<T>>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of object to cast the matcher to."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher builder that matches any objects.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "anyThing",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!anyThing_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Matches anything."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function anyThing<T>(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<T>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of object to cast the matcher to."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher that matches anything.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "arrayThat",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!arrayThat_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Entry point for building a matcher that matches "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Array"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function arrayThat<T>(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!ArrayTester_class"
              },
              "text": "ArrayTester"
            },
            {
              "docNodeType": "t",
              "text": "<T, "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<T[]>>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of "
                },
                {
                  "docNodeType": "c",
                  "code": "Array"
                },
                {
                  "docNodeType": "t",
                  "text": " item to cast the matcher to."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher builder that matches "
            },
            {
              "docNodeType": "c",
              "code": "Array"
            },
            {
              "docNodeType": "t",
              "text": "s.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "assert",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!assert_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Asserts the given value to fulfill the requirements."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "This can take in various values. Depending on the value it's given the returning object to refine the check will be different."
            }
          ]
        },
        "hidden": false,
        "module": "core",
        "args": [
          {
            "name": "value",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Value to check."
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function assert(value: "
            },
            {
              "docNodeType": "t",
              "text": "boolean | null"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!AssertTesterFactory_class"
              },
              "text": "AssertTesterFactory"
            },
            {
              "docNodeType": "t",
              "text": "<boolean, "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!BooleanTester_class"
              },
              "text": "BooleanTester"
            },
            {
              "docNodeType": "t",
              "text": "<void>>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Object to further refine the boolean check.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": [
          {
            "args": [
              {
                "name": "value",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Value to check."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "export declare function assert<T>(value: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://rxjs-dev.firebaseapp.com/guide/observable"
                  },
                  "text": "Observable"
                },
                {
                  "docNodeType": "t",
                  "text": "<T>"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AssertTesterFactory_class"
                  },
                  "text": "AssertTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": "<"
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://rxjs-dev.firebaseapp.com/guide/observable"
                  },
                  "text": "Observable"
                },
                {
                  "docNodeType": "t",
                  "text": "<T>, "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!ObservableTester_class"
                  },
                  "text": "ObservableTester"
                },
                {
                  "docNodeType": "t",
                  "text": "<T, void>>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!assert_function(10)",
            "typeParams": [
              {
                "name": "T",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Type of values emitted by the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Observable"
                    },
                    {
                      "docNodeType": "t",
                      "text": "."
                    }
                  ]
                }
              }
            ],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to further refine the "
                },
                {
                  "docNodeType": "c",
                  "code": "Observable"
                },
                {
                  "docNodeType": "t",
                  "text": " check."
                }
              ]
            }
          },
          {
            "args": [
              {
                "name": "value",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Value to check."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "export declare function assert<T>(value: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Promise"
                  },
                  "text": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": "<T>"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AssertAsyncTesterFactory_class"
                  },
                  "text": "AssertAsyncTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": "<"
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Promise"
                  },
                  "text": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": "<T>, "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!PromiseTester_class"
                  },
                  "text": "PromiseTester"
                },
                {
                  "docNodeType": "t",
                  "text": "<T>>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!assert_function(11)",
            "typeParams": [
              {
                "name": "T",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Type of values that the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Promise"
                    },
                    {
                      "docNodeType": "t",
                      "text": " resolves with."
                    }
                  ]
                }
              }
            ],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to further refine the "
                },
                {
                  "docNodeType": "c",
                  "code": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": " check."
                }
              ]
            }
          },
          {
            "args": [
              {
                "name": "value",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Value to check."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "export declare function assert<T extends "
                },
                {
                  "docNodeType": "t",
                  "text": "object"
                },
                {
                  "docNodeType": "t",
                  "text": ">(value: "
                },
                {
                  "docNodeType": "t",
                  "text": "T"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AssertTesterFactory_class"
                  },
                  "text": "AssertTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": "<T, "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!ObjectTester_class"
                  },
                  "text": "ObjectTester"
                },
                {
                  "docNodeType": "t",
                  "text": "<T, void>>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!assert_function(12)",
            "typeParams": [
              {
                "name": "T",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Type of the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Object"
                    },
                    {
                      "docNodeType": "t",
                      "text": "."
                    }
                  ]
                }
              }
            ],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to further refine the "
                },
                {
                  "docNodeType": "c",
                  "code": "Object"
                },
                {
                  "docNodeType": "t",
                  "text": " check."
                }
              ]
            }
          },
          {
            "args": [
              {
                "name": "value",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Value to check."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "export declare function assert(value: "
                },
                {
                  "docNodeType": "t",
                  "text": "any"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AssertTesterFactory_class"
                  },
                  "text": "AssertTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": "<any, "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AnyTester_class"
                  },
                  "text": "AnyTester"
                },
                {
                  "docNodeType": "t",
                  "text": "<any, void>>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!assert_function(13)",
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to further refine the check. This applies to any type of values."
                }
              ]
            }
          },
          {
            "args": [
              {
                "name": "value",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Value to check."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "export declare function assert(value: "
                },
                {
                  "docNodeType": "t",
                  "text": "string | null"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AssertTesterFactory_class"
                  },
                  "text": "AssertTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": "<string, "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!StringTester_class"
                  },
                  "text": "StringTester"
                },
                {
                  "docNodeType": "t",
                  "text": "<void>>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!assert_function(2)",
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to further refine the string check."
                }
              ]
            }
          },
          {
            "args": [
              {
                "name": "value",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Value to check."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "export declare function assert(value: "
                },
                {
                  "docNodeType": "t",
                  "text": "number | null"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AssertTesterFactory_class"
                  },
                  "text": "AssertTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": "<number, "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!NumberTester_class"
                  },
                  "text": "NumberTester"
                },
                {
                  "docNodeType": "t",
                  "text": "<void>>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!assert_function(3)",
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to further refine the number check."
                }
              ]
            }
          },
          {
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "export declare function assert<R, A extends "
                },
                {
                  "docNodeType": "t",
                  "text": "any[]"
                },
                {
                  "docNodeType": "t",
                  "text": ">(spy: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!Spy_interface"
                  },
                  "text": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AssertTesterFactory_class"
                  },
                  "text": "AssertTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": "<"
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!Spy_interface"
                  },
                  "text": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>, "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!SpyTester_class"
                  },
                  "text": "SpyTester"
                },
                {
                  "docNodeType": "t",
                  "text": "<void, A>>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!assert_function(4)",
            "typeParams": [
              {
                "name": "R",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Type of the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Spy"
                    },
                    {
                      "docNodeType": "t",
                      "text": "'s return value."
                    }
                  ]
                }
              },
              {
                "name": "A",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Type of the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Spy"
                    },
                    {
                      "docNodeType": "t",
                      "text": "'s input arguments."
                    }
                  ]
                }
              }
            ],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to further refine the "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " check."
                }
              ]
            }
          },
          {
            "args": [
              {
                "name": "value",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Value to check."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "export declare function assert<T>(value: "
                },
                {
                  "docNodeType": "t",
                  "text": "readonly T[] | null"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AssertTesterFactory_class"
                  },
                  "text": "AssertTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": "<T[], "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!ArrayTester_class"
                  },
                  "text": "ArrayTester"
                },
                {
                  "docNodeType": "t",
                  "text": "<T, void>>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!assert_function(5)",
            "typeParams": [
              {
                "name": "T",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Type of elements in the array."
                    }
                  ]
                }
              }
            ],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to further refine the "
                },
                {
                  "docNodeType": "c",
                  "code": "Array"
                },
                {
                  "docNodeType": "t",
                  "text": " check."
                }
              ]
            }
          },
          {
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "export declare function assert<T>(set: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Set"
                  },
                  "text": "ReadonlySet"
                },
                {
                  "docNodeType": "t",
                  "text": "<T>"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AssertTesterFactory_class"
                  },
                  "text": "AssertTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": "<"
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Set"
                  },
                  "text": "ReadonlySet"
                },
                {
                  "docNodeType": "t",
                  "text": "<T>, "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!SetTester_class"
                  },
                  "text": "SetTester"
                },
                {
                  "docNodeType": "t",
                  "text": "<T, void>>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!assert_function(6)",
            "typeParams": [
              {
                "name": "T",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Type of elements in the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Set"
                    },
                    {
                      "docNodeType": "t",
                      "text": "."
                    }
                  ]
                }
              }
            ],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to further refine the "
                },
                {
                  "docNodeType": "c",
                  "code": "Set"
                },
                {
                  "docNodeType": "t",
                  "text": " check."
                }
              ]
            }
          },
          {
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "export declare function assert<K, V>(map: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Map"
                  },
                  "text": "ReadonlyMap"
                },
                {
                  "docNodeType": "t",
                  "text": "<K, V>"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AssertTesterFactory_class"
                  },
                  "text": "AssertTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": "<"
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Map"
                  },
                  "text": "ReadonlyMap"
                },
                {
                  "docNodeType": "t",
                  "text": "<K, V>, "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!MapTester_class"
                  },
                  "text": "MapTester"
                },
                {
                  "docNodeType": "t",
                  "text": "<K, V, void>>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!assert_function(7)",
            "typeParams": [
              {
                "name": "K",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Type of keys in the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Map"
                    },
                    {
                      "docNodeType": "t",
                      "text": "."
                    }
                  ]
                }
              },
              {
                "name": "V",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Type of vaues in the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Map"
                    },
                    {
                      "docNodeType": "t",
                      "text": "."
                    }
                  ]
                }
              }
            ],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to further refine the "
                },
                {
                  "docNodeType": "c",
                  "code": "Map"
                },
                {
                  "docNodeType": "t",
                  "text": " check."
                }
              ]
            }
          },
          {
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "export declare function assert<T, I extends "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Iterable"
                  },
                  "text": "Iterable"
                },
                {
                  "docNodeType": "t",
                  "text": "<T>"
                },
                {
                  "docNodeType": "t",
                  "text": ">(iterable: "
                },
                {
                  "docNodeType": "t",
                  "text": "I"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AssertTesterFactory_class"
                  },
                  "text": "AssertTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": "<I, "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!IterableTester_class"
                  },
                  "text": "IterableTester"
                },
                {
                  "docNodeType": "t",
                  "text": "<T, I, void>>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!assert_function(8)",
            "typeParams": [
              {
                "name": "T",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Type of values in the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Iterable"
                    },
                    {
                      "docNodeType": "t",
                      "text": "."
                    }
                  ]
                }
              },
              {
                "name": "I",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Type of the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Iterable"
                    },
                    {
                      "docNodeType": "t",
                      "text": " checked."
                    }
                  ]
                }
              }
            ],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to further refine the "
                },
                {
                  "docNodeType": "c",
                  "code": "Iterable"
                },
                {
                  "docNodeType": "t",
                  "text": " check."
                }
              ]
            }
          },
          {
            "args": [
              {
                "name": "value",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Value to check."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "export declare function assert(value: "
                },
                {
                  "docNodeType": "t",
                  "text": "() => any"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!AssertTesterFactory_class"
                  },
                  "text": "AssertTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": "<() => any, "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!FunctionTester_class"
                  },
                  "text": "FunctionTester"
                },
                {
                  "docNodeType": "t",
                  "text": "<void>>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!assert_function(9)",
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object to further refine the "
                },
                {
                  "docNodeType": "c",
                  "code": "Function"
                },
                {
                  "docNodeType": "t",
                  "text": " check."
                }
              ]
            }
          }
        ]
      },
      {
        "name": "booleanThat",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!booleanThat_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Entry point for building a matcher that matches booleans."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function booleanThat(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!BooleanTester_class"
              },
              "text": "BooleanTester"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<boolean>>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher builder that matches booleans.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "createSpy",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!createSpy_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Creates a new "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spy_interface"
              },
              "text": "Spy"
            },
            {
              "docNodeType": "t",
              "text": " object."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "spy",
        "args": [
          {
            "name": "spyName",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Name of the spy. This will be used for stringifying."
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function createSpy<R, A extends "
            },
            {
              "docNodeType": "t",
              "text": "unknown[]"
            },
            {
              "docNodeType": "t",
              "text": ">(spyName: "
            },
            {
              "docNodeType": "t",
              "text": "string"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spy_interface"
              },
              "text": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "<R, A>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "R",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Return type of the spied function."
                }
              ]
            }
          },
          {
            "name": "A",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Argument types of the spied function."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " The newly created "
            },
            {
              "docNodeType": "c",
              "code": "Spy"
            },
            {
              "docNodeType": "t",
              "text": " object.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "createSpyInstance",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!createSpyInstance_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Creates a "
            },
            {
              "docNodeType": "c",
              "code": "SpyObj"
            },
            {
              "docNodeType": "t",
              "text": " that is an instance of the given constructor."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "The resulting "
            },
            {
              "docNodeType": "c",
              "code": "SpyObj"
            },
            {
              "docNodeType": "t",
              "text": " will be initialized with spies of methods of the original class. This object is also an instance of the given constructor, so it will pass "
            },
            {
              "docNodeType": "c",
              "code": "instanceof"
            },
            {
              "docNodeType": "t",
              "text": " checks."
            }
          ]
        },
        "hidden": false,
        "module": "spy",
        "args": [
          {
            "name": "ctor",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Constructor of the instance of "
                },
                {
                  "docNodeType": "c",
                  "code": "SpyObj"
                },
                {
                  "docNodeType": "t",
                  "text": " to create."
                }
              ]
            }
          },
          {
            "name": "base",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Base object of the resulting "
                },
                {
                  "docNodeType": "c",
                  "code": "SpyObj"
                },
                {
                  "docNodeType": "t",
                  "text": ". Any properties here will be assigned to the resulting "
                },
                {
                  "docNodeType": "c",
                  "code": "SpyObj"
                },
                {
                  "docNodeType": "t",
                  "text": ". This is equivalent to calling "
                },
                {
                  "docNodeType": "c",
                  "code": "Object.assign"
                },
                {
                  "docNodeType": "t",
                  "text": " to the resulting "
                },
                {
                  "docNodeType": "c",
                  "code": "SpyObj"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "spyName",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Name of the "
                },
                {
                  "docNodeType": "c",
                  "code": "SpyObj"
                },
                {
                  "docNodeType": "t",
                  "text": ", to be used for stringifying its "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "s."
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function createSpyInstance<T extends "
            },
            {
              "docNodeType": "t",
              "text": "object"
            },
            {
              "docNodeType": "t",
              "text": ">(ctor: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Ctor_interface"
              },
              "text": "Ctor"
            },
            {
              "docNodeType": "t",
              "text": "<T>"
            },
            {
              "docNodeType": "t",
              "text": ", base?: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://www.staging-typescript.org/docs/handbook/utility-types.html#partialt"
              },
              "text": "Partial"
            },
            {
              "docNodeType": "t",
              "text": "<T>"
            },
            {
              "docNodeType": "t",
              "text": ", spyName?: "
            },
            {
              "docNodeType": "t",
              "text": "string"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!SpyObj_type"
              },
              "text": "SpyObj"
            },
            {
              "docNodeType": "t",
              "text": "<T>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the object to create."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " The created "
            },
            {
              "docNodeType": "c",
              "code": "SpyObj"
            },
            {
              "docNodeType": "t",
              "text": ".  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "createSpyObject",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!createSpyObject_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Creates a "
            },
            {
              "docNodeType": "c",
              "code": "SpyObj"
            },
            {
              "docNodeType": "t",
              "text": " with the given methods."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "spy",
        "args": [
          {
            "name": "spyName",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Name of the "
                },
                {
                  "docNodeType": "c",
                  "code": "SpyObj"
                },
                {
                  "docNodeType": "t",
                  "text": ", to be used for stringifying its "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "s."
                }
              ]
            }
          },
          {
            "name": "methodNames",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Names of methods to attach to the created "
                },
                {
                  "docNodeType": "c",
                  "code": "SpyObj"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "base",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Base object of the resulting "
                },
                {
                  "docNodeType": "c",
                  "code": "SpyObj"
                },
                {
                  "docNodeType": "t",
                  "text": ". Any properties here will be assigned to the resulting "
                },
                {
                  "docNodeType": "c",
                  "code": "SpyObj"
                },
                {
                  "docNodeType": "t",
                  "text": ". This is equivalent to calling "
                },
                {
                  "docNodeType": "c",
                  "code": "Object.assign"
                },
                {
                  "docNodeType": "t",
                  "text": " to the resulting "
                },
                {
                  "docNodeType": "c",
                  "code": "SpyObj"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function createSpyObject<T extends "
            },
            {
              "docNodeType": "t",
              "text": "{}"
            },
            {
              "docNodeType": "t",
              "text": ">(spyName: "
            },
            {
              "docNodeType": "t",
              "text": "string"
            },
            {
              "docNodeType": "t",
              "text": ", methodNames: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Array"
              },
              "text": "Array"
            },
            {
              "docNodeType": "t",
              "text": "<keyof T>"
            },
            {
              "docNodeType": "t",
              "text": ", base?: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://www.staging-typescript.org/docs/handbook/utility-types.html#partialt"
              },
              "text": "Partial"
            },
            {
              "docNodeType": "t",
              "text": "<T>"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!SpyObj_type"
              },
              "text": "SpyObj"
            },
            {
              "docNodeType": "t",
              "text": "<T>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the object to create."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " The created "
            },
            {
              "docNodeType": "c",
              "code": "SpyObj"
            },
            {
              "docNodeType": "t",
              "text": ".  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "createSpySubject",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!createSpySubject_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Creates an "
            },
            {
              "docNodeType": "c",
              "code": "Observable"
            },
            {
              "docNodeType": "t",
              "text": " that replays emissions of the given "
            },
            {
              "docNodeType": "c",
              "code": "Observable"
            },
            {
              "docNodeType": "t",
              "text": "."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "spy",
        "args": [
          {
            "name": "obs",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "c",
                  "code": "Observable"
                },
                {
                  "docNodeType": "t",
                  "text": " to spy on."
                }
              ]
            }
          },
          {
            "name": "historyCount",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Number of emissions to track."
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function createSpyObservable<T>(obs: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://rxjs-dev.firebaseapp.com/guide/observable"
              },
              "text": "Observable"
            },
            {
              "docNodeType": "t",
              "text": "<T>"
            },
            {
              "docNodeType": "t",
              "text": ", historyCount?: "
            },
            {
              "docNodeType": "t",
              "text": "number"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://rxjs-dev.firebaseapp.com/guide/observable"
              },
              "text": "Observable"
            },
            {
              "docNodeType": "t",
              "text": "<T>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the value emitted by the "
                },
                {
                  "docNodeType": "c",
                  "code": "Observable"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "c",
              "code": "Observable"
            },
            {
              "docNodeType": "t",
              "text": " that replays emissions of the given "
            },
            {
              "docNodeType": "c",
              "code": "Observable"
            },
            {
              "docNodeType": "t",
              "text": ".  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "elementThat",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!elementThat_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Entry point for building a matcher that matches "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Element"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function elementThat(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!ElementTester_class"
              },
              "text": "ElementTester"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Element"
              },
              "text": "Element"
            },
            {
              "docNodeType": "t",
              "text": ">>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher builder that matches "
            },
            {
              "docNodeType": "c",
              "code": "Element"
            },
            {
              "docNodeType": "t",
              "text": "s.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "fake",
        "entityType": "f",
        "examples": [
          {
            "docNodeType": "p",
            "children": [
              {
                "docNodeType": "p",
                "children": [
                  {
                    "docNodeType": "t",
                    "text": "Returns 2 if the first argument is 1."
                  }
                ]
              },
              {
                "docNodeType": "cb",
                "code": "fake(mockSpy).when(1).return(2);\n"
              },
              {
                "docNodeType": "p",
                "children": []
              }
            ]
          }
        ],
        "ref": "gs-testing!fake_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Starting point of specifying logic to mocks."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "To use this, pass in a "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spy_interface"
              },
              "text": "Spy"
            },
            {
              "docNodeType": "t",
              "text": " object. You can set the behavior by specifying a condition followed by the action taken if the condition is true."
            }
          ]
        },
        "hidden": false,
        "module": "spy",
        "args": [
          {
            "name": "targetSpy",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " object whose behavior should be modified."
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function fake<R, A extends "
            },
            {
              "docNodeType": "t",
              "text": "unknown[]"
            },
            {
              "docNodeType": "t",
              "text": ">(targetSpy: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spy_interface"
              },
              "text": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "<R, A>"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Fake_class"
              },
              "text": "Fake"
            },
            {
              "docNodeType": "t",
              "text": "<R, A>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "R",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Return type of the "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "A",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Argument types of the "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Builder object to specify the "
            },
            {
              "docNodeType": "c",
              "code": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "'s logic.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "init",
        "entityType": "f",
        "examples": [
          {
            "docNodeType": "p",
            "children": [
              {
                "docNodeType": "p",
                "children": [
                  {
                    "docNodeType": "t",
                    "text": "Simple test:"
                  }
                ]
              },
              {
                "docNodeType": "cb",
                "code": "test('testedFunction', init => {\n  const _ = init(() => {\n    return {a: 1};\n  });\n\n  should('do something', () => {\n    assert(_.a).to.equal(1);\n  });\n});\n"
              },
              {
                "docNodeType": "p",
                "children": []
              }
            ]
          },
          {
            "docNodeType": "p",
            "children": [
              {
                "docNodeType": "p",
                "children": [
                  {
                    "docNodeType": "t",
                    "text": "Chained calls:"
                  }
                ]
              },
              {
                "docNodeType": "cb",
                "code": "test('TestedClass', init => {\n  const _ = init(() => ({a: 1}));\n\n  test('testedFunction', _, init => {\n    const _ = init(_ => {\n      return {...a, b: _.a + 1};\n    });\n\n    should('do something', () => {\n      assert(_.a).to.equal(1);\n      assert(_.b).to.equal(2);\n    });\n  });\n});\n"
              },
              {
                "docNodeType": "p",
                "children": []
              }
            ]
          }
        ],
        "ref": "gs-testing!init_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Initializes each test and returns object to be used for the tests."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "This runs the given function and returns the object returned by it. This object is shallow read only and represents the state shared by multiple tests."
                }
              ]
            },
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "You can also chain the inits by passing the returned object to the next "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!test_var"
                  },
                  "text": "test"
                },
                {
                  "docNodeType": "t",
                  "text": " call. This lets you combine the test objects."
                }
              ]
            }
          ]
        },
        "hidden": true,
        "module": "",
        "args": [
          {
            "name": "initFn",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "The function to run before every test."
                }
              ]
            }
          },
          {
            "name": "base",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "The base object passed to the outer "
                },
                {
                  "docNodeType": "c",
                  "code": "test"
                },
                {
                  "docNodeType": "t",
                  "text": " function."
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function init<T extends "
            },
            {
              "docNodeType": "t",
              "text": "{}"
            },
            {
              "docNodeType": "t",
              "text": ", B>(initFn: "
            },
            {
              "docNodeType": "t",
              "text": "(base: B) => T"
            },
            {
              "docNodeType": "t",
              "text": ", base: "
            },
            {
              "docNodeType": "t",
              "text": "B"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://www.typescriptlang.org/docs/handbook/utility-types.html#readonlyt"
              },
              "text": "Readonly"
            },
            {
              "docNodeType": "t",
              "text": "<T>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the object returned by the "
                },
                {
                  "docNodeType": "c",
                  "code": "initFn"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "B",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the object returned by the "
                },
                {
                  "docNodeType": "c",
                  "code": "initFn"
                },
                {
                  "docNodeType": "t",
                  "text": " in the outer "
                },
                {
                  "docNodeType": "c",
                  "code": "test"
                },
                {
                  "docNodeType": "t",
                  "text": " function."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Readonly version of the object returned by the "
            },
            {
              "docNodeType": "c",
              "code": "initFn"
            },
            {
              "docNodeType": "t",
              "text": "."
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "iterableThat",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!iterableThat_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Entry point for building a matcher that matches "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Iterable"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function iterableThat<T, I extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Iterable"
              },
              "text": "Iterable"
            },
            {
              "docNodeType": "t",
              "text": "<T>"
            },
            {
              "docNodeType": "t",
              "text": ">(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!IterableTester_class"
              },
              "text": "IterableTester"
            },
            {
              "docNodeType": "t",
              "text": "<T, I, "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<I>>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the elements in the "
                },
                {
                  "docNodeType": "c",
                  "code": "Iterable"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "I",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the iterable."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher builder that matches "
            },
            {
              "docNodeType": "c",
              "code": "Iterable"
            },
            {
              "docNodeType": "t",
              "text": "s.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "mapThat",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!mapThat_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Entry point for building a matcher that matches "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Map"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function mapThat<K, V>(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MapTester_class"
              },
              "text": "MapTester"
            },
            {
              "docNodeType": "t",
              "text": "<K, V, "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Map"
              },
              "text": "Map"
            },
            {
              "docNodeType": "t",
              "text": "<K, V>>>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "K",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the "
                },
                {
                  "docNodeType": "c",
                  "code": "Map"
                },
                {
                  "docNodeType": "t",
                  "text": "'s keys."
                }
              ]
            }
          },
          {
            "name": "V",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the "
                },
                {
                  "docNodeType": "c",
                  "code": "Map"
                },
                {
                  "docNodeType": "t",
                  "text": "'s values."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher builder that matches "
            },
            {
              "docNodeType": "c",
              "code": "Map"
            },
            {
              "docNodeType": "t",
              "text": "s.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "mockTime",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!mockTime_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Controls the time in the given "
            },
            {
              "docNodeType": "c",
              "code": "globalThis"
            },
            {
              "docNodeType": "t",
              "text": " object."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "fake",
        "args": [
          {
            "name": "globalObj",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Reference to globalThis object to control the time"
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function install(globalObj: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!HasTime_interface"
              },
              "text": "HasTime"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!FakeTime_interface"
              },
              "text": "FakeTime"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Object to manipulate time.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "numberThat",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!numberThat_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Entry point for building a matcher that matches numbers."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function numberThat(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!NumberTester_class"
              },
              "text": "NumberTester"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<number>>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher builder that matches numbers.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "objectThat",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!objectThat_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Entry point for building a matcher that matches "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Object"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function objectThat<T extends "
            },
            {
              "docNodeType": "t",
              "text": "object"
            },
            {
              "docNodeType": "t",
              "text": ">(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!ObjectTester_class"
              },
              "text": "ObjectTester"
            },
            {
              "docNodeType": "t",
              "text": "<T, "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<T>>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the object to match."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher builder that matches "
            },
            {
              "docNodeType": "c",
              "code": "Object"
            },
            {
              "docNodeType": "t",
              "text": "s.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "resetCalls",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!resetCalls_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Resets any calls on the given "
            },
            {
              "docNodeType": "c",
              "code": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "spy",
        "args": [
          {
            "name": "spyObj",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Spy to reset the calls on.  "
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function resetCalls(spyObj: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spy_interface"
              },
              "text": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "<any, any[]>"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "t",
              "text": "void"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "resetStrategies",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!resetStrategies_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Resets any mocking logic on the given "
            },
            {
              "docNodeType": "c",
              "code": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "spy",
        "args": [
          {
            "name": "spyObj",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Spy to reset any mocking strategies on.  "
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function resetStrategies(spyObj: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spy_interface"
              },
              "text": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "<any, any>"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "t",
              "text": "void"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "run",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!run_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs the given observable during the test run."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Observable ran this way will be unsubscribed at the end of the test."
            }
          ]
        },
        "hidden": false,
        "module": "core",
        "args": [
          {
            "name": "obs",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "The observable to run.  "
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function run(obs: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://rxjs-dev.firebaseapp.com/guide/observable"
              },
              "text": "Observable"
            },
            {
              "docNodeType": "t",
              "text": "<unknown>"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "t",
              "text": "void"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "runEnvironment",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!runEnvironment_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Installs the "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Environment_class"
              },
              "text": "Environment"
            },
            {
              "docNodeType": "t",
              "text": " to run before and after every tests."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "environment",
        "args": [
          {
            "name": "environment",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "The environment to be installed."
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function runEnvironment(environment: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Environment_class"
              },
              "text": "Environment"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "t",
              "text": "void"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "setThat",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!setThat_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Entry point for building a matcher that matches "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Set"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function setThat<T>(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!SetTester_class"
              },
              "text": "SetTester"
            },
            {
              "docNodeType": "t",
              "text": "<T, "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Set"
              },
              "text": "Set"
            },
            {
              "docNodeType": "t",
              "text": "<T>>>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the elements in the "
                },
                {
                  "docNodeType": "c",
                  "code": "Set"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher builder that matches "
            },
            {
              "docNodeType": "c",
              "code": "Set"
            },
            {
              "docNodeType": "t",
              "text": "s.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "setup",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!setup_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs the function before every test."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "",
        "args": [
          {
            "name": "fn",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "The function to run."
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function setup(fn: "
            },
            {
              "docNodeType": "t",
              "text": "() => void"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "t",
              "text": "void"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "spy",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!spy_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Spies on a given property."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "This replaces the property on the object with the spy. This allows you to modify the behavior of the property, as well as tracking calls to the property."
                }
              ]
            },
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "NOTE: This requires the object to not be sealed."
                }
              ]
            }
          ]
        },
        "hidden": false,
        "module": "spy",
        "args": [
          {
            "name": "obj",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Object to spy on."
                }
              ]
            }
          },
          {
            "name": "key",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Property key to spy on."
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function spy<O extends "
            },
            {
              "docNodeType": "t",
              "text": "{}"
            },
            {
              "docNodeType": "t",
              "text": ", K extends "
            },
            {
              "docNodeType": "t",
              "text": "keyof O"
            },
            {
              "docNodeType": "t",
              "text": ">(obj: "
            },
            {
              "docNodeType": "t",
              "text": "O"
            },
            {
              "docNodeType": "t",
              "text": ", key: "
            },
            {
              "docNodeType": "t",
              "text": "K"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spied_type"
              },
              "text": "Spied"
            },
            {
              "docNodeType": "t",
              "text": "<O[K]>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Object to spy on."
                }
              ]
            }
          },
          {
            "name": "K",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Property key of the spied object."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " The spied property."
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "spyThat",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!spyThat_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Entry point for building a matcher that matches "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spy_interface"
              },
              "text": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function spyThat<R, A extends "
            },
            {
              "docNodeType": "t",
              "text": "unknown[]"
            },
            {
              "docNodeType": "t",
              "text": ">(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!SpyTester_class"
              },
              "text": "SpyTester"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spy_interface"
              },
              "text": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "<R, A>>, A>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "R",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Return type of the spied function."
                }
              ]
            }
          },
          {
            "name": "A",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Arguments types of the spied function."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher builder that matches "
            },
            {
              "docNodeType": "c",
              "code": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "s.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "stringThat",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!stringThat_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Entry point for building a matcher that matches strings."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function stringThat(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!StringTester_class"
              },
              "text": "StringTester"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<string>>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher builder that matches strings.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "teardown",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!teardown_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs the given function after every test."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "core",
        "args": [
          {
            "name": "fn",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Function to run.  "
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function teardown(fn: "
            },
            {
              "docNodeType": "t",
              "text": "() => void"
            },
            {
              "docNodeType": "t",
              "text": "): "
            },
            {
              "docNodeType": "t",
              "text": "void"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      },
      {
        "name": "tupleThat",
        "entityType": "f",
        "examples": [],
        "ref": "gs-testing!tupleThat_function(1)",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Entry point for building a matcher that matches tuples."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": false,
        "module": "matcher",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare function tupleThat<T extends "
            },
            {
              "docNodeType": "t",
              "text": "unknown[]"
            },
            {
              "docNodeType": "t",
              "text": ">(): "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!TupleTester_class"
              },
              "text": "TupleTester"
            },
            {
              "docNodeType": "t",
              "text": "<T, "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!MatcherType_type"
              },
              "text": "MatcherType"
            },
            {
              "docNodeType": "t",
              "text": "<T>>"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the tuple."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " Matcher builder that matches tuples.  "
            }
          ]
        },
        "isAbstract": false,
        "isGlobal": true,
        "isProtected": false,
        "overloads": []
      }
    ],
    "interfaces": [
      {
        "name": "AnyTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!AnyTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for any kind of objects."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the "
            },
            {
              "docNodeType": "c",
              "code": "AnyTester"
            },
            {
              "docNodeType": "t",
              "text": " class."
            }
          ]
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class AnyTester<T, O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!BaseTester_class"
              },
              "text": "BaseTester"
            },
            {
              "docNodeType": "t",
              "text": "<T, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of object to be tested."
                }
              ]
            }
          },
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "beAFunction",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!AnyTester#beAFunction_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the value is a function."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "beAFunction(): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "beAnInstanceOf",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!AnyTester#beAnInstanceOf_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the value is an instance of the given class."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "ctor",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Constructor of the class to check."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "beAnInstanceOf(ctor: "
                },
                {
                  "docNodeType": "t",
                  "text": "new (...args: any[]) => T"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "beDefined",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!AnyTester#beDefined_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the value is defined."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "beDefined(): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "beFalsy",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!AnyTester#beFalsy_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the value is falsy."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "beFalsy(): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "beNull",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!AnyTester#beNull_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the value is null."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "beNull(): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "beTruthy",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!AnyTester#beTruthy_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the value is truthy."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "beTruthy(): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "equal",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!AnyTester#equal_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the value is exactly the same instance as the given object."
                }
              ]
            },
            "remarks": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "This takes the object to be compared agains, or a "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!Matcher_class"
                  },
                  "text": "Matcher"
                },
                {
                  "docNodeType": "t",
                  "text": ". If this is given an object, this simply does a "
                },
                {
                  "docNodeType": "c",
                  "code": "==="
                },
                {
                  "docNodeType": "t",
                  "text": " between the actual object and expected object. Otherwise, this uses the "
                },
                {
                  "docNodeType": "c",
                  "code": "Matcher"
                },
                {
                  "docNodeType": "t",
                  "text": "'s logic for comparison."
                }
              ]
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "expected",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Expected object to be compared, or a matcher."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "equal(expected: "
                },
                {
                  "docNodeType": "t",
                  "text": "T"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "passPredicate",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!AnyTester#passPredicate_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the value passes the given predicate."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "predicate",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Function that takes the actual value and returns "
                    },
                    {
                      "docNodeType": "c",
                      "code": "true"
                    },
                    {
                      "docNodeType": "t",
                      "text": " iff the check should pass."
                    }
                  ]
                }
              },
              {
                "name": "description",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Description of the predicate. This is used for error messagee and should start with a verb."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "passPredicate(predicate: "
                },
                {
                  "docNodeType": "t",
                  "text": "(value: T) => boolean"
                },
                {
                  "docNodeType": "t",
                  "text": ", description: "
                },
                {
                  "docNodeType": "t",
                  "text": "string"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "ArrayTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!ArrayTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Array"
              },
              "text": "Array"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class ArrayTester<T, O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!IterableTester_class"
              },
              "text": "IterableTester"
            },
            {
              "docNodeType": "t",
              "text": "<T, T[], O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of item in the array to be tested."
                }
              ]
            }
          },
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "haveElementAt",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ArrayTester#haveElementAt_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks if the array has the given element at the given index."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "expected",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "The expected item."
                    }
                  ]
                }
              },
              {
                "name": "index",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Index of the array to check."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "haveElementAt(expected: "
                },
                {
                  "docNodeType": "t",
                  "text": "T"
                },
                {
                  "docNodeType": "t",
                  "text": ", index: "
                },
                {
                  "docNodeType": "t",
                  "text": "number"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "haveExactElements",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ArrayTester#haveExactElements_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks if the array has the given elements at the exact order."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "haveExactElements(expected: "
                },
                {
                  "docNodeType": "t",
                  "text": "readonly T[]"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "AssertAsyncTesterFactory",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!AssertAsyncTesterFactory_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Generates async testers for assertions."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "This is returned by "
                },
                {
                  "docNodeType": "li",
                  "link": null,
                  "text": "assert"
                },
                {
                  "docNodeType": "t",
                  "text": " to chain assertions, when "
                },
                {
                  "docNodeType": "li",
                  "link": null,
                  "text": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": " is passed in as argument. Ths class either returns the tester with the assertion logic reversed, or not."
                }
              ]
            },
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the "
                },
                {
                  "docNodeType": "c",
                  "code": "AssertAsyncTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": " class."
                }
              ]
            }
          ]
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class AssertAsyncTesterFactory<V, T extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!BaseAsyncTester_class"
              },
              "text": "BaseAsyncTester"
            },
            {
              "docNodeType": "t",
              "text": "<V>"
            },
            {
              "docNodeType": "t",
              "text": "> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "V",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the value to be tested."
                }
              ]
            }
          },
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the tester to be returned."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [
          {
            "name": "to",
            "entityType": "co",
            "examples": [],
            "ref": "gs-testing!AssertAsyncTesterFactory#to_member",
            "summary": {
              "docNodeType": "p",
              "children": []
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "get to(): "
                },
                {
                  "docNodeType": "t",
                  "text": "T"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isGlobal": false,
            "isProtected": false
          },
          {
            "name": "toNot",
            "entityType": "co",
            "examples": [],
            "ref": "gs-testing!AssertAsyncTesterFactory#toNot_member",
            "summary": {
              "docNodeType": "p",
              "children": []
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "get toNot(): "
                },
                {
                  "docNodeType": "t",
                  "text": "T"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isGlobal": false,
            "isProtected": false
          }
        ],
        "methods": [],
        "callSignatures": []
      },
      {
        "name": "AssertTesterFactory",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!AssertTesterFactory_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Generates testers for assertions."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "This is returned by "
                },
                {
                  "docNodeType": "li",
                  "link": null,
                  "text": "assert"
                },
                {
                  "docNodeType": "t",
                  "text": " to chain assertions. Ths class either returns the tester with the assertion logic reversed, or not."
                }
              ]
            },
            {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the "
                },
                {
                  "docNodeType": "c",
                  "code": "AssertTesterFactory"
                },
                {
                  "docNodeType": "t",
                  "text": " class."
                }
              ]
            }
          ]
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class AssertTesterFactory<V, T extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!BaseTester_class"
              },
              "text": "BaseTester"
            },
            {
              "docNodeType": "t",
              "text": "<V, void>"
            },
            {
              "docNodeType": "t",
              "text": "> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "V",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the value to be tested."
                }
              ]
            }
          },
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the tester to be returned."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [
          {
            "name": "to",
            "entityType": "co",
            "examples": [],
            "ref": "gs-testing!AssertTesterFactory#to_member",
            "summary": {
              "docNodeType": "p",
              "children": []
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "get to(): "
                },
                {
                  "docNodeType": "t",
                  "text": "T"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isGlobal": false,
            "isProtected": false
          },
          {
            "name": "toNot",
            "entityType": "co",
            "examples": [],
            "ref": "gs-testing!AssertTesterFactory#toNot_member",
            "summary": {
              "docNodeType": "p",
              "children": []
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "get toNot(): "
                },
                {
                  "docNodeType": "t",
                  "text": "T"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isGlobal": false,
            "isProtected": false
          }
        ],
        "methods": [],
        "callSignatures": []
      },
      {
        "name": "BaseAsyncTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!BaseAsyncTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Base classes for all async testers."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the "
            },
            {
              "docNodeType": "c",
              "code": "BaseAsyncTester"
            },
            {
              "docNodeType": "t",
              "text": " class."
            }
          ]
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare abstract class BaseAsyncTester<T> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "e"
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [],
        "callSignatures": []
      },
      {
        "name": "BaseTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!BaseTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Base class of all testers."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the "
            },
            {
              "docNodeType": "c",
              "code": "BaseTester"
            },
            {
              "docNodeType": "t",
              "text": " class."
            }
          ]
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare abstract class BaseTester<T, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of object to be tested."
                }
              ]
            }
          },
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [],
        "callSignatures": []
      },
      {
        "name": "BooleanTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!BooleanTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Performs tests related to booleans."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class BooleanTester<O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!AnyTester_class"
              },
              "text": "AnyTester"
            },
            {
              "docNodeType": "t",
              "text": "<boolean, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "beFalse",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!BooleanTester#beFalse_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Asserts that the value is false."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "beFalse(): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "beTrue",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!BooleanTester#beTrue_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Asserts that the value is true."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "beTrue(): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "Ctor",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!Ctor_interface",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Represents a constructor."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export interface Ctor<T extends "
            },
            {
              "docNodeType": "t",
              "text": "object"
            },
            {
              "docNodeType": "t",
              "text": "> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of object instantiated by the constructor.  "
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [
          {
            "name": "name",
            "entityType": "co",
            "examples": [],
            "ref": "gs-testing!Ctor#name_member",
            "summary": {
              "docNodeType": "e"
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "readonly name: "
                },
                {
                  "docNodeType": "t",
                  "text": "string"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isGlobal": false,
            "isProtected": false
          },
          {
            "name": "prototype",
            "entityType": "co",
            "examples": [],
            "ref": "gs-testing!Ctor#prototype_member",
            "summary": {
              "docNodeType": "e"
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "readonly prototype: "
                },
                {
                  "docNodeType": "t",
                  "text": "T"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isGlobal": false,
            "isProtected": false
          }
        ],
        "methods": [],
        "callSignatures": []
      },
      {
        "name": "ElementTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!ElementTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Element"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class ElementTester<O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!AnyTester_class"
              },
              "text": "AnyTester"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Element"
              },
              "text": "Element"
            },
            {
              "docNodeType": "t",
              "text": ", O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "haveAttributesWithValues",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ElementTester#haveAttributesWithValues_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the "
                },
                {
                  "docNodeType": "c",
                  "code": "Element"
                },
                {
                  "docNodeType": "t",
                  "text": " has the specified attributes."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "attributes",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Attributes whose values should be checked."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "haveAttributesWithValues(attributes: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Iterable"
                  },
                  "text": "Iterable"
                },
                {
                  "docNodeType": "t",
                  "text": "<[string, string]>"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "haveTag",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ElementTester#haveTag_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Checks that the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Element"
                    },
                    {
                      "docNodeType": "t",
                      "text": " has the given tag."
                    }
                  ]
                },
                {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "TODO: This should be able to take string|StringMatcher"
                    }
                  ]
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "tag",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Expected tag of the element."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "haveTag(tag: "
                },
                {
                  "docNodeType": "t",
                  "text": "string"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "ElseBuilder",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!ElseBuilder_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Defines behavior when none of the other conditions have been met."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the "
            },
            {
              "docNodeType": "c",
              "code": "ElseBuilder"
            },
            {
              "docNodeType": "t",
              "text": " class."
            }
          ]
        },
        "hidden": false,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class ElseBuilder<R, A extends "
            },
            {
              "docNodeType": "t",
              "text": "unknown[]"
            },
            {
              "docNodeType": "t",
              "text": "> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "R",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Return type of the "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "A",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Argument types of the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Spy"
                    },
                    {
                      "docNodeType": "t",
                      "text": "."
                    }
                  ]
                },
                {
                  "docNodeType": "p",
                  "children": []
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "call",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ElseBuilder#call_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Sets the target spy to call the given handler and return the handler's return value if none of the other conditions are matched."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "handler",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Function to call if the condition matches."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "call(handler: "
                },
                {
                  "docNodeType": "t",
                  "text": "(...args: A) => R"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!Spy_interface"
                  },
                  "text": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " The modified "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " object."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "callOriginal",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ElseBuilder#callOriginal_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Sets the target spy to call the original implementation if none of the other conditions are matched."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "callOriginal(): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!Spy_interface"
                  },
                  "text": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " The modified "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " object."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "return",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ElseBuilder#return_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Sets the target spy to return the given value if none of the other conditions are matched."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "value",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Value to be returned."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "return(value?: "
                },
                {
                  "docNodeType": "t",
                  "text": "R"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!Spy_interface"
                  },
                  "text": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " The modified "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " object."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "returnValues",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ElseBuilder#returnValues_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Sets the target spy to return the given values in order if none of the other conditions are matched."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "returnValues(...values: "
                },
                {
                  "docNodeType": "t",
                  "text": "R[]"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!Spy_interface"
                  },
                  "text": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " The modified "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " object."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "throwError",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ElseBuilder#throwError_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Sets the target spy to throw the given "
                },
                {
                  "docNodeType": "li",
                  "link": null,
                  "text": "Error"
                },
                {
                  "docNodeType": "t",
                  "text": " if none of the other conditions are matched."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "error",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Error to be thrown."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "throwError(error: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Error"
                  },
                  "text": "Error"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!Spy_interface"
                  },
                  "text": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": "<R, A>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " The modified "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " object."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "FakeTime",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!FakeTime_interface",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Overrides the time related functions in "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Window"
              },
              "text": "Window"
            },
            {
              "docNodeType": "t",
              "text": " so we can control it for tests."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "To use this, call "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!mockTime_function(1)"
              },
              "text": "mockTime"
            },
            {
              "docNodeType": "t",
              "text": " with the reference to "
            },
            {
              "docNodeType": "c",
              "code": "Window"
            },
            {
              "docNodeType": "t",
              "text": ". This will override all time related functions."
            }
          ]
        },
        "hidden": false,
        "module": "fake",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export interface FakeTime "
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "tick",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!FakeTime#tick_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Moves the time forward by the specified amount."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "ms",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Time in millis to move forward by."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "tick(ms: "
                },
                {
                  "docNodeType": "t",
                  "text": "number"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "void"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "tickToTrigger",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!FakeTime#tickToTrigger_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Moves the time forward until a "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=setTimeout"
                  },
                  "text": "setTimeout"
                },
                {
                  "docNodeType": "t",
                  "text": " or a "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=setInterval"
                  },
                  "text": "setInterval"
                },
                {
                  "docNodeType": "t",
                  "text": " is triggered."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "tickToTrigger(): "
                },
                {
                  "docNodeType": "t",
                  "text": "void"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "FunctionTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!FunctionTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Function"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class FunctionTester<O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!AnyTester_class"
              },
              "text": "AnyTester"
            },
            {
              "docNodeType": "t",
              "text": "<() => any, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "throw",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!FunctionTester#throw_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that invoking the given function will throw an error."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "throw(): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "throwErrorWithMessage",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!FunctionTester#throwErrorWithMessage_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that invoking the given function will throw error with message matching the given Regexp."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "regexp",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Regular expression that the error message should match."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "throwErrorWithMessage(regexp: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=RegExp"
                  },
                  "text": "RegExp"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "HasTime",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!HasTime_interface",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Any objects that can control time."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export interface HasTime "
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "clearInterval",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!HasTime#clearInterval_member(1)",
            "summary": {
              "docNodeType": "e"
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "clearInterval(ref: "
                },
                {
                  "docNodeType": "t",
                  "text": "unknown"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "void"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "clearTimeout",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!HasTime#clearTimeout_member(1)",
            "summary": {
              "docNodeType": "e"
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "clearTimeout(ref: "
                },
                {
                  "docNodeType": "t",
                  "text": "unknown"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "void"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "setInterval",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!HasTime#setInterval_member(1)",
            "summary": {
              "docNodeType": "e"
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "setInterval(fn: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Function"
                  },
                  "text": "Function"
                },
                {
                  "docNodeType": "t",
                  "text": ", delay: "
                },
                {
                  "docNodeType": "t",
                  "text": "number"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "unknown"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "setTimeout",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!HasTime#setTimeout_member(1)",
            "summary": {
              "docNodeType": "e"
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "setTimeout(fn: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Function"
                  },
                  "text": "Function"
                },
                {
                  "docNodeType": "t",
                  "text": ", delay: "
                },
                {
                  "docNodeType": "t",
                  "text": "number"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "unknown"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "IterableTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!IterableTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Iterable"
              },
              "text": "Iterable"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class IterableTester<T, I extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Iterable"
              },
              "text": "Iterable"
            },
            {
              "docNodeType": "t",
              "text": "<T>"
            },
            {
              "docNodeType": "t",
              "text": ", O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!AnyTester_class"
              },
              "text": "AnyTester"
            },
            {
              "docNodeType": "t",
              "text": "<I, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of item in the "
                },
                {
                  "docNodeType": "c",
                  "code": "Iterable"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "I",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the "
                },
                {
                  "docNodeType": "c",
                  "code": "Iterable"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock.  "
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "beEmpty",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!IterableTester#beEmpty_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks if the "
                },
                {
                  "docNodeType": "c",
                  "code": "Iterable"
                },
                {
                  "docNodeType": "t",
                  "text": " is empty."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "beEmpty(): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "startWith",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!IterableTester#startWith_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks if the "
                },
                {
                  "docNodeType": "c",
                  "code": "Iterable"
                },
                {
                  "docNodeType": "t",
                  "text": " starts with the elements in the given iterable with the same order."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "expected",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "The iterable that the tested "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Iterable"
                    },
                    {
                      "docNodeType": "t",
                      "text": " should start with."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "startWith(expected: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Iterable"
                  },
                  "text": "Iterable"
                },
                {
                  "docNodeType": "t",
                  "text": "<T>"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "MapTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!MapTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Map"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class MapTester<K, V, O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!IterableTester_class"
              },
              "text": "IterableTester"
            },
            {
              "docNodeType": "t",
              "text": "<[K, V], "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Map"
              },
              "text": "Map"
            },
            {
              "docNodeType": "t",
              "text": "<K, V>, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "K",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of key of the "
                },
                {
                  "docNodeType": "c",
                  "code": "Map"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "V",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of value of the "
                },
                {
                  "docNodeType": "c",
                  "code": "Map"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "haveExactElements",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!MapTester#haveExactElements_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the "
                },
                {
                  "docNodeType": "c",
                  "code": "Map"
                },
                {
                  "docNodeType": "t",
                  "text": " contains and only contains elements in the specified "
                },
                {
                  "docNodeType": "c",
                  "code": "Map"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "expected",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Elements that should be in the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Map"
                    },
                    {
                      "docNodeType": "t",
                      "text": " and the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Map"
                    },
                    {
                      "docNodeType": "t",
                      "text": " should only contain these."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "haveExactElements(expected: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Map"
                  },
                  "text": "ReadonlyMap"
                },
                {
                  "docNodeType": "t",
                  "text": "<K, V>"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "Matcher",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!Matcher_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Matches an object according to the given logic."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the "
            },
            {
              "docNodeType": "c",
              "code": "Matcher"
            },
            {
              "docNodeType": "t",
              "text": " class."
            }
          ]
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class Matcher<T> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of object to match.  "
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [],
        "callSignatures": []
      },
      {
        "name": "NumberTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!NumberTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Number"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class NumberTester<O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!AnyTester_class"
              },
              "text": "AnyTester"
            },
            {
              "docNodeType": "t",
              "text": "<number, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "beANaN",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!NumberTester#beANaN_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks the the number is "
                },
                {
                  "docNodeType": "c",
                  "code": "NaN"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "beANaN(): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "beCloseTo",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!NumberTester#beCloseTo_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the number is close to the given number."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "expected",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "The expected value."
                    }
                  ]
                }
              },
              {
                "name": "decimals",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "The number of decimal places to check for equality."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "beCloseTo(expected: "
                },
                {
                  "docNodeType": "t",
                  "text": "number"
                },
                {
                  "docNodeType": "t",
                  "text": ", decimals: "
                },
                {
                  "docNodeType": "t",
                  "text": "number"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "ObjectTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!ObjectTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Object"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class ObjectTester<T extends "
            },
            {
              "docNodeType": "t",
              "text": "object"
            },
            {
              "docNodeType": "t",
              "text": ", O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!AnyTester_class"
              },
              "text": "AnyTester"
            },
            {
              "docNodeType": "t",
              "text": "<T, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the object to match."
                }
              ]
            }
          },
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "haveProperties",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ObjectTester#haveProperties_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the actual object contains the given properties. This only does a shallow check."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "expected",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Object whose properties are expected to have."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "haveProperties(expected: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://www.staging-typescript.org/docs/handbook/utility-types.html#partialt"
                  },
                  "text": "Partial"
                },
                {
                  "docNodeType": "t",
                  "text": "<T>"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "ObservableTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!ObservableTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Observable"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class ObservableTester<T, O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!BaseTester_class"
              },
              "text": "BaseTester"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://rxjs-dev.firebaseapp.com/guide/observable"
              },
              "text": "Observable"
            },
            {
              "docNodeType": "t",
              "text": "<T>, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of items emitted by the "
                },
                {
                  "docNodeType": "c",
                  "code": "Observable"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "emit",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ObservableTester#emit_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the "
                },
                {
                  "docNodeType": "c",
                  "code": "Observable"
                },
                {
                  "docNodeType": "t",
                  "text": " emits a value."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "emit(): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "emitErrorWithMessage",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ObservableTester#emitErrorWithMessage_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the "
                },
                {
                  "docNodeType": "c",
                  "code": "Observable"
                },
                {
                  "docNodeType": "t",
                  "text": " emits an "
                },
                {
                  "docNodeType": "c",
                  "code": "Error"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "expected",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Regular expression that should match the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Error"
                    },
                    {
                      "docNodeType": "t",
                      "text": " message."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "emitErrorWithMessage(expected: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=RegExp"
                  },
                  "text": "RegExp"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "emitSequence",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ObservableTester#emitSequence_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the "
                },
                {
                  "docNodeType": "c",
                  "code": "Observable"
                },
                {
                  "docNodeType": "t",
                  "text": " emits the given emissions in sequence."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "expected",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Sequence of emissions that the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Observable"
                    },
                    {
                      "docNodeType": "t",
                      "text": " is expected to emit."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "emitSequence(expected: "
                },
                {
                  "docNodeType": "t",
                  "text": "readonly T[]"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "emitWith",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ObservableTester#emitWith_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the "
                },
                {
                  "docNodeType": "c",
                  "code": "Observable"
                },
                {
                  "docNodeType": "t",
                  "text": " emits the given item."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "expected",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Item that the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Observable"
                    },
                    {
                      "docNodeType": "t",
                      "text": " is expected to emit."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "emitWith(expected: "
                },
                {
                  "docNodeType": "t",
                  "text": "T"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "PromiseTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!PromiseTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Promise"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class PromiseTester<T> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!BaseAsyncTester_class"
              },
              "text": "BaseAsyncTester"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Promise"
              },
              "text": "Promise"
            },
            {
              "docNodeType": "t",
              "text": "<T>> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of item returned by the "
                },
                {
                  "docNodeType": "c",
                  "code": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": " on resolution."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "reject",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!PromiseTester#reject_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the "
                },
                {
                  "docNodeType": "c",
                  "code": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": " rejects."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "reject(): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Promise"
                  },
                  "text": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": "<void>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "c",
                  "code": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": " that is resolved when the check is complete."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "rejectWithErrorMessage",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!PromiseTester#rejectWithErrorMessage_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the "
                },
                {
                  "docNodeType": "c",
                  "code": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": " rejects with "
                },
                {
                  "docNodeType": "c",
                  "code": "Error"
                },
                {
                  "docNodeType": "t",
                  "text": " whose message matches the given "
                },
                {
                  "docNodeType": "c",
                  "code": "RegExp"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "regexp",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Regular expression that the error message should match."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "rejectWithErrorMessage(regexp: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=RegExp"
                  },
                  "text": "RegExp"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Promise"
                  },
                  "text": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": "<void>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "c",
                  "code": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": " that is resolved when the check is complete."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "resolveWith",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!PromiseTester#resolveWith_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the "
                },
                {
                  "docNodeType": "c",
                  "code": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": " resolved with the given value."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "expected",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "The expected value to resolve with."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "resolveWith(expected: "
                },
                {
                  "docNodeType": "t",
                  "text": "T"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Promise"
                  },
                  "text": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": "<void>"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "c",
                  "code": "Promise"
                },
                {
                  "docNodeType": "t",
                  "text": " that is resolved when the check is complete."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "ResponseBuilder",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!ResponseBuilder_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Builder for responding to a fetch request."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the "
            },
            {
              "docNodeType": "c",
              "code": "ResponseBuilder"
            },
            {
              "docNodeType": "t",
              "text": " class."
            }
          ]
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class ResponseBuilder "
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "respond",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ResponseBuilder#respond_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Sets "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!FakeFetch_class"
                  },
                  "text": "FakeFetch"
                },
                {
                  "docNodeType": "t",
                  "text": " to respond with the given response object."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "response",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Response object to send back."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "respond(response: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Response"
                  },
                  "text": "Response"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!FakeFetch_class"
                  },
                  "text": "FakeFetch"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "c",
                  "code": "FakeFetch"
                },
                {
                  "docNodeType": "t",
                  "text": " object for chaining."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "text",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!ResponseBuilder#text_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Sets "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!FakeFetch_class"
                  },
                  "text": "FakeFetch"
                },
                {
                  "docNodeType": "t",
                  "text": " to respond with a response object containing the given string."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "content",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "The text content to respond with."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "text(content: "
                },
                {
                  "docNodeType": "t",
                  "text": "string"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!FakeFetch_class"
                  },
                  "text": "FakeFetch"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "c",
                  "code": "FakeFetch"
                },
                {
                  "docNodeType": "t",
                  "text": " object for chaining."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "SetTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!SetTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "Set"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class SetTester<T, O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!IterableTester_class"
              },
              "text": "IterableTester"
            },
            {
              "docNodeType": "t",
              "text": "<T, "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Set"
              },
              "text": "Set"
            },
            {
              "docNodeType": "t",
              "text": "<T>, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of items in the "
                },
                {
                  "docNodeType": "c",
                  "code": "Set"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            }
          },
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "haveExactElements",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!SetTester#haveExactElements_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the "
                },
                {
                  "docNodeType": "c",
                  "code": "Set"
                },
                {
                  "docNodeType": "t",
                  "text": " contains and only contains elements in the specified "
                },
                {
                  "docNodeType": "c",
                  "code": "Set"
                },
                {
                  "docNodeType": "t",
                  "text": "."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "expected",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Elements that should be in the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Set"
                    },
                    {
                      "docNodeType": "t",
                      "text": " and the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Set"
                    },
                    {
                      "docNodeType": "t",
                      "text": " should only contain these."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "haveExactElements(expected: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=Set"
                  },
                  "text": "ReadonlySet"
                },
                {
                  "docNodeType": "t",
                  "text": "<T>"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "Should",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!Should_interface",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " should  "
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export interface Should extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!ShouldRunFn_type"
              },
              "text": "ShouldRunFn"
            },
            {
              "docNodeType": "t",
              "text": " "
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [
          {
            "name": "only",
            "entityType": "co",
            "examples": [],
            "ref": "gs-testing!Should#only_member",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Runs only this test."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "readonly only: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!ShouldRunFn_type"
                  },
                  "text": "ShouldRunFn"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isGlobal": false,
            "isProtected": false
          },
          {
            "name": "skip",
            "entityType": "co",
            "examples": [],
            "ref": "gs-testing!Should#skip_member",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Do not run this test."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "readonly skip: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!ShouldRunFn_type"
                  },
                  "text": "ShouldRunFn"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isGlobal": false,
            "isProtected": false
          }
        ],
        "methods": [],
        "callSignatures": []
      },
      {
        "name": "Spy",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!Spy_interface",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "A spy function."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "spy",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export interface Spy<R, A extends "
            },
            {
              "docNodeType": "t",
              "text": "unknown[]"
            },
            {
              "docNodeType": "t",
              "text": "> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "R",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Return type of the spied function."
                }
              ]
            }
          },
          {
            "name": "A",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Argument types of the spied function."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [],
        "callSignatures": []
      },
      {
        "name": "SpyTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!SpyTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spy_interface"
              },
              "text": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class SpyTester<O, A extends "
            },
            {
              "docNodeType": "t",
              "text": "any[] "
            },
            {
              "docNodeType": "t",
              "text": "= "
            },
            {
              "docNodeType": "t",
              "text": "any[]"
            },
            {
              "docNodeType": "t",
              "text": "> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!BaseTester_class"
              },
              "text": "BaseTester"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spy_interface"
              },
              "text": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "<any, A>, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          },
          {
            "name": "A",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " arguments."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "haveBeenCalled",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!SpyTester#haveBeenCalled_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the given "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " has been called."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "minTimes",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Minimum number of times that the spy has been called."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "haveBeenCalled(minTimes?: "
                },
                {
                  "docNodeType": "t",
                  "text": "number"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          },
          {
            "name": "haveBeenCalledWith",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!SpyTester#haveBeenCalledWith_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the given "
                },
                {
                  "docNodeType": "c",
                  "code": "Spy"
                },
                {
                  "docNodeType": "t",
                  "text": " has been called with the given arguments."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "args",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Arguments that the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "Spy"
                    },
                    {
                      "docNodeType": "t",
                      "text": " is expected to have been called with."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "haveBeenCalledWith(...args: "
                },
                {
                  "docNodeType": "t",
                  "text": "A"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "StringTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!StringTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for "
            },
            {
              "docNodeType": "li",
              "link": null,
              "text": "String"
            },
            {
              "docNodeType": "t",
              "text": "s."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class StringTester<O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!AnyTester_class"
              },
              "text": "AnyTester"
            },
            {
              "docNodeType": "t",
              "text": "<string, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "match",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!StringTester#match_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks that the value matches the given regexp."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "regexp",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "c",
                      "code": "RegExp"
                    },
                    {
                      "docNodeType": "t",
                      "text": " that should match the string value."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "match(regexp: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": false,
                    "link": "https://developer.mozilla.org/en-US/search?q=RegExp"
                  },
                  "text": "RegExp"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      },
      {
        "name": "Test",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!Test_interface",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " test  "
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export interface Test extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!TestRunFn_interface"
              },
              "text": "TestRunFn"
            },
            {
              "docNodeType": "t",
              "text": " "
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [
          {
            "name": "only",
            "entityType": "co",
            "examples": [],
            "ref": "gs-testing!Test#only_member",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Runs only the tests declared inside this scope."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "readonly only: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!TestRunFn_interface"
                  },
                  "text": "TestRunFn"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isGlobal": false,
            "isProtected": false
          },
          {
            "name": "skip",
            "entityType": "co",
            "examples": [],
            "ref": "gs-testing!Test#skip_member",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Do not run any tests declared inside this scope."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "readonly skip: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!TestRunFn_interface"
                  },
                  "text": "TestRunFn"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            },
            "isGlobal": false,
            "isProtected": false
          }
        ],
        "methods": [],
        "callSignatures": []
      },
      {
        "name": "TestRunFn",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!TestRunFn_interface",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": " test  "
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export interface TestRunFn "
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [],
        "callSignatures": [
          {
            "args": [
              {
                "name": "desc",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Component that is tested."
                    }
                  ]
                }
              },
              {
                "name": "testFn",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Function that declares the test specs."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "(desc: "
                },
                {
                  "docNodeType": "t",
                  "text": "string"
                },
                {
                  "docNodeType": "t",
                  "text": ", testFn: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!TestFn_type"
                  },
                  "text": "TestFn"
                },
                {
                  "docNodeType": "t",
                  "text": "<{}>"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "void"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!TestRunFn_call(1)",
            "typeParams": [],
            "returns": {
              "docNodeType": "e"
            }
          },
          {
            "args": [
              {
                "name": "desc",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Component that is tested."
                    }
                  ]
                }
              },
              {
                "name": "base",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Base object to be passed into the "
                    },
                    {
                      "docNodeType": "li",
                      "link": {
                        "isCode": true,
                        "link": "gs-testing!init_function(1)"
                      },
                      "text": "init"
                    },
                    {
                      "docNodeType": "t",
                      "text": " passed into the "
                    },
                    {
                      "docNodeType": "c",
                      "code": "testFn"
                    },
                    {
                      "docNodeType": "t",
                      "text": "."
                    }
                  ]
                }
              },
              {
                "name": "testFn",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Function that declares the test specs."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "<B>(desc: "
                },
                {
                  "docNodeType": "t",
                  "text": "string"
                },
                {
                  "docNodeType": "t",
                  "text": ", base: "
                },
                {
                  "docNodeType": "t",
                  "text": "B"
                },
                {
                  "docNodeType": "t",
                  "text": ", testFn: "
                },
                {
                  "docNodeType": "li",
                  "link": {
                    "isCode": true,
                    "link": "gs-testing!TestFn_type"
                  },
                  "text": "TestFn"
                },
                {
                  "docNodeType": "t",
                  "text": "<B>"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "void"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "ref": "gs-testing!TestRunFn_call(2)",
            "typeParams": [
              {
                "name": "B",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Type of the base object."
                    }
                  ]
                }
              }
            ],
            "returns": {
              "docNodeType": "e"
            }
          }
        ]
      },
      {
        "name": "TupleTester",
        "entityType": "i",
        "examples": [],
        "ref": "gs-testing!TupleTester_class",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Runs tests for tuples."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare class TupleTester<T extends "
            },
            {
              "docNodeType": "t",
              "text": "unknown[]"
            },
            {
              "docNodeType": "t",
              "text": ", O> extends "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!BaseTester_class"
              },
              "text": "BaseTester"
            },
            {
              "docNodeType": "t",
              "text": "<T, O> "
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the tuple."
                }
              ]
            }
          },
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the returned mock."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        },
        "fields": [],
        "methods": [
          {
            "name": "haveExactElements",
            "entityType": "f",
            "examples": [],
            "ref": "gs-testing!TupleTester#haveExactElements_member(1)",
            "summary": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Checks if the tuple has the given elements at the exact order."
                }
              ]
            },
            "remarks": {
              "docNodeType": "e"
            },
            "hidden": false,
            "module": "",
            "args": [
              {
                "name": "expected",
                "description": {
                  "docNodeType": "p",
                  "children": [
                    {
                      "docNodeType": "t",
                      "text": "Tuple that should match the tested tuple."
                    }
                  ]
                }
              }
            ],
            "excerpt": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "haveExactElements(expected: "
                },
                {
                  "docNodeType": "t",
                  "text": "T"
                },
                {
                  "docNodeType": "t",
                  "text": "): "
                },
                {
                  "docNodeType": "t",
                  "text": "O"
                },
                {
                  "docNodeType": "t",
                  "text": ";"
                }
              ]
            },
            "typeParams": [],
            "returns": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": " Object for mocking or testing."
                }
              ]
            },
            "isAbstract": false,
            "isGlobal": false,
            "isProtected": false,
            "overloads": []
          }
        ],
        "callSignatures": []
      }
    ],
    "typedefs": [
      {
        "name": "HandlerFn",
        "entityType": "t",
        "examples": [],
        "ref": "gs-testing!HandlerFn_type",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Handles a request."
            }
          ]
        },
        "remarks": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Pass this to "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!FakeFetch_class"
              },
              "text": "FakeFetch"
            },
            {
              "docNodeType": "t",
              "text": " to set the behavior when request was sent."
            }
          ]
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare type HandlerFn = "
            },
            {
              "docNodeType": "t",
              "text": "(request?: string | "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Request"
              },
              "text": "Request"
            },
            {
              "docNodeType": "t",
              "text": ", init?: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Request"
              },
              "text": "RequestInit"
            },
            {
              "docNodeType": "t",
              "text": ") => "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://rxjs-dev.firebaseapp.com/guide/observable"
              },
              "text": "Observable"
            },
            {
              "docNodeType": "t",
              "text": "<"
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Response"
              },
              "text": "Response"
            },
            {
              "docNodeType": "t",
              "text": "> | null"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        }
      },
      {
        "name": "InitFn",
        "entityType": "t",
        "examples": [],
        "ref": "gs-testing!InitFn_type",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Initialization function ran at the start of every test."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare type InitFn<B> = "
            },
            {
              "docNodeType": "t",
              "text": "<T>(provider: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!InitProvider_type"
              },
              "text": "InitProvider"
            },
            {
              "docNodeType": "t",
              "text": "<B, T>) => T & B"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "B",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the base object passed to the initialization function."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        }
      },
      {
        "name": "InitProvider",
        "entityType": "t",
        "examples": [],
        "ref": "gs-testing!InitProvider_type",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Actual initialization logic."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare type InitProvider<B, T> = "
            },
            {
              "docNodeType": "t",
              "text": "(base: B) => T & B"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "B",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the base object."
                }
              ]
            }
          },
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the object returned by the function."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        }
      },
      {
        "name": "MatcherType",
        "entityType": "t",
        "examples": [],
        "ref": "gs-testing!MatcherType_type",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Mixes in the object with "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Matcher_class"
              },
              "text": "Matcher"
            },
            {
              "docNodeType": "t",
              "text": " for that object."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare type MatcherType<T> = "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Matcher_class"
              },
              "text": "Matcher"
            },
            {
              "docNodeType": "t",
              "text": "<T> & T"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the object that the Matcher matches."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        }
      },
      {
        "name": "ShouldFn",
        "entityType": "t",
        "examples": [],
        "ref": "gs-testing!ShouldFn_type",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Function to be passed to "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!should_var"
              },
              "text": "should"
            },
            {
              "docNodeType": "t",
              "text": "."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare type ShouldFn = "
            },
            {
              "docNodeType": "t",
              "text": "() => (void | "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Promise"
              },
              "text": "Promise"
            },
            {
              "docNodeType": "t",
              "text": "<void>)"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        }
      },
      {
        "name": "ShouldRunFn",
        "entityType": "t",
        "examples": [],
        "ref": "gs-testing!ShouldRunFn_type",
        "summary": {
          "docNodeType": "p",
          "children": []
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [
          {
            "name": "desc",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Description of the test."
                }
              ]
            }
          },
          {
            "name": "testFn",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Function that runs the test."
                }
              ]
            }
          }
        ],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare type ShouldRunFn = "
            },
            {
              "docNodeType": "t",
              "text": "(desc: string, testFn?: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!ShouldFn_type"
              },
              "text": "ShouldFn"
            },
            {
              "docNodeType": "t",
              "text": ") => void"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [],
        "returns": {
          "docNodeType": "e"
        }
      },
      {
        "name": "Spied",
        "entityType": "t",
        "examples": [],
        "ref": "gs-testing!Spied_type",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Properties of a "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!SpyObj_type"
              },
              "text": "SpyObj"
            },
            {
              "docNodeType": "t",
              "text": "."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare type Spied<T> = "
            },
            {
              "docNodeType": "t",
              "text": "T extends (...args: infer A) => infer R ? "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spy_interface"
              },
              "text": "Spy"
            },
            {
              "docNodeType": "t",
              "text": "<R, A> : T"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the object."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        }
      },
      {
        "name": "SpyObj",
        "entityType": "t",
        "examples": [],
        "ref": "gs-testing!SpyObj_type",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Object whose methods are all spied."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "spy",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare type SpyObj<O extends "
            },
            {
              "docNodeType": "t",
              "text": "{}"
            },
            {
              "docNodeType": "t",
              "text": "> = "
            },
            {
              "docNodeType": "t",
              "text": "{\n    [K in keyof O]: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!Spied_type"
              },
              "text": "Spied"
            },
            {
              "docNodeType": "t",
              "text": "<O[K]>;\n} & O"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "O",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the object."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        }
      },
      {
        "name": "TestFn",
        "entityType": "t",
        "examples": [],
        "ref": "gs-testing!TestFn_type",
        "summary": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "Function to be passed to "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!test_var"
              },
              "text": "test"
            },
            {
              "docNodeType": "t",
              "text": "."
            }
          ]
        },
        "remarks": {
          "docNodeType": "e"
        },
        "hidden": true,
        "module": "",
        "args": [],
        "excerpt": {
          "docNodeType": "p",
          "children": [
            {
              "docNodeType": "t",
              "text": "export declare type TestFn<T> = "
            },
            {
              "docNodeType": "t",
              "text": "(initFn: "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": true,
                "link": "gs-testing!InitFn_type"
              },
              "text": "InitFn"
            },
            {
              "docNodeType": "t",
              "text": "<T>) => (void | "
            },
            {
              "docNodeType": "li",
              "link": {
                "isCode": false,
                "link": "https://developer.mozilla.org/en-US/search?q=Promise"
              },
              "text": "Promise"
            },
            {
              "docNodeType": "t",
              "text": "<void>)"
            },
            {
              "docNodeType": "t",
              "text": ";"
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "description": {
              "docNodeType": "p",
              "children": [
                {
                  "docNodeType": "t",
                  "text": "Type of the base object for initialization."
                }
              ]
            }
          }
        ],
        "returns": {
          "docNodeType": "e"
        }
      }
    ]
  },
  "config": {
    "baseColor": "GREEN",
    "accentColor": "PINK",
    "darkMode": true
  },
  "icon": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<svg\n   xmlns:dc=\"http://purl.org/dc/elements/1.1/\"\n   xmlns:cc=\"http://creativecommons.org/ns#\"\n   xmlns:rdf=\"http://www.w3.org/1999/02/22-rdf-syntax-ns#\"\n   xmlns:svg=\"http://www.w3.org/2000/svg\"\n   xmlns=\"http://www.w3.org/2000/svg\"\n   xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\"\n   xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\"\n   height=\"100\"\n   width=\"100\"\n   inkscape:version=\"1.0 (4035a4f, 2020-05-01)\"\n   sodipodi:docname=\"icon.svg\"\n   id=\"svg6413\"\n   version=\"1.1\"\n   y=\"0px\"\n   x=\"0px\"\n   viewBox=\"0 0 100 100\"\n   data-name=\"Layer 1\">\n  <metadata\n     id=\"metadata6419\">\n    <rdf:RDF>\n      <cc:Work\n         rdf:about=\"\">\n        <dc:format>image/svg+xml</dc:format>\n        <dc:type\n           rdf:resource=\"http://purl.org/dc/dcmitype/StillImage\" />\n        <dc:title>118all</dc:title>\n      </cc:Work>\n    </rdf:RDF>\n  </metadata>\n  <defs\n     id=\"defs6417\" />\n  <sodipodi:namedview\n     inkscape:current-layer=\"svg6413\"\n     inkscape:window-maximized=\"0\"\n     inkscape:window-y=\"26\"\n     inkscape:window-x=\"0\"\n     inkscape:cy=\"64.370748\"\n     inkscape:cx=\"8.2482998\"\n     inkscape:zoom=\"5.88\"\n     showgrid=\"false\"\n     id=\"namedview6415\"\n     inkscape:window-height=\"1024\"\n     inkscape:window-width=\"1680\"\n     inkscape:pageshadow=\"2\"\n     inkscape:pageopacity=\"0\"\n     guidetolerance=\"10\"\n     gridtolerance=\"10\"\n     objecttolerance=\"10\"\n     borderopacity=\"1\"\n     bordercolor=\"#666666\"\n     pagecolor=\"#ffffff\"\n     inkscape:document-rotation=\"0\" />\n  <title\n     id=\"title6397\">118all</title>\n  <path\n     style=\"stroke-width:1.11985\"\n     d=\"m 38.969502,62.574694 -5.65523,5.644032 -5.644031,-5.644032 -4.748153,4.748154 5.644031,5.655229 -5.644031,5.644032 4.748153,4.748153 5.644031,-5.644031 5.65523,5.644031 4.748153,-4.748153 -5.644031,-5.644032 5.644031,-5.655229 z m 11.53443,7.03264 h 26.484392 v 6.719085 H 50.503932 Z M 32.160829,46.191326 27.558256,42.462234 23.325233,47.691921 33.000715,55.519655 46.416488,39.92018 41.321182,35.541576 Z m 18.903027,-2.978797 h 26.484392 v 6.719085 H 51.063856 Z M 90.941624,6.7055042 h -30.32547 a 11.791994,11.791994 0 0 0 -21.277102,0 H 9.058376 V 100 H 90.941624 Z M 44.467953,13.424589 45.039075,10.77055 a 5.0841075,5.0841075 0 0 1 9.933048,0 l 0.571122,2.654039 h 6.506314 v 6.215153 H 37.961639 V 13.424589 Z M 84.222539,93.292111 H 15.777461 V 13.424589 h 15.465094 v 12.934238 h 37.51489 V 13.424589 h 15.465094 z\"\n     id=\"foreground\" />\n</svg>\n",
  "name": "gs-tools"
}