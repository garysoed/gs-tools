{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.9.1",
    "schemaVersion": 1003,
    "oldestForwardsCompatibleVersion": 1001
  },
  "kind": "Package",
  "canonicalReference": "gs-testing!",
  "docComment": "/**\n * Library to do Typescript testing.\n *\n * @remarks\n *\n * This follows a similar pattern to Jasmine, except that it has a much stronger type system; if you change the type of a value, the tests will break during compile time.\n *\n * This also have stricter checking. This uses `===` for equality checks by default.\n *\n * @packageDocumentation\n */\n",
  "name": "gs-testing",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "gs-testing!",
      "name": "",
      "members": [
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!AnyTester:class",
          "docComment": "/**\n * Runs tests for any kind of objects.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `AnyTester` class.\n *\n * @typeParam T - Type of object to be tested.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AnyTester<T, O> extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTester",
              "canonicalReference": "gs-testing!BaseTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "AnyTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!AnyTester#beAFunction:member(1)",
              "docComment": "/**\n * Checks that the value is a function.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beAFunction(): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "beAFunction"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!AnyTester#beAnInstanceOf:member(1)",
              "docComment": "/**\n * Checks that the value is an instance of the given class.\n *\n * @param ctor - Constructor of the class to check.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beAnInstanceOf(ctor: "
                },
                {
                  "kind": "Content",
                  "text": "new (...args: any[]) => T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ctor",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "beAnInstanceOf"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!AnyTester#beDefined:member(1)",
              "docComment": "/**\n * Checks that the value is defined.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beDefined(): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "beDefined"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!AnyTester#beFalsy:member(1)",
              "docComment": "/**\n * Checks that the value is falsy.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beFalsy(): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "beFalsy"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!AnyTester#beNull:member(1)",
              "docComment": "/**\n * Checks that the value is null.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beNull(): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "beNull"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!AnyTester#beTruthy:member(1)",
              "docComment": "/**\n * Checks that the value is truthy.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beTruthy(): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "beTruthy"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!AnyTester#equal:member(1)",
              "docComment": "/**\n * Checks that the value is exactly the same instance as the given object.\n *\n * @remarks\n *\n * This takes the object to be compared agains, or a {@link Matcher}. If this is given an object, this simply does a `===` between the actual object and expected object. Otherwise, this uses the `Matcher`'s logic for comparison.\n *\n * @param expected - Expected object to be compared, or a matcher.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "equal(expected: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "equal"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!AnyTester#passPredicate:member(1)",
              "docComment": "/**\n * Checks that the value passes the given predicate.\n *\n * @param predicate - Function that takes the actual value and returns `true` iff the check should pass.\n *\n * @param description - Description of the predicate. This is used for error messagee and should start with a verb.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "passPredicate(predicate: "
                },
                {
                  "kind": "Content",
                  "text": "(value: T) => boolean"
                },
                {
                  "kind": "Content",
                  "text": ", description: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "predicate",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "description",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "passPredicate"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!anyThat:function(1)",
          "docComment": "/**\n * Entry point for building a matcher that matches any objects.\n *\n * @typeParam T - Type of object to cast the matcher to.\n *\n * @returns Matcher builder that matches any objects.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function anyThat<T>(): "
            },
            {
              "kind": "Reference",
              "text": "AnyTester",
              "canonicalReference": "gs-testing!AnyTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, "
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "anyThat"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!anyThing:function(1)",
          "docComment": "/**\n * Matches anything.\n *\n * @typeParam T - Type of object to cast the matcher to.\n *\n * @returns Matcher that matches anything.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function anyThing<T>(): "
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "anyThing"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!ArrayTester:class",
          "docComment": "/**\n * Runs tests for {@link mdn://Array | Array}s.\n *\n * @typeParam T - Type of item in the array to be tested.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ArrayTester<T, O> extends "
            },
            {
              "kind": "Reference",
              "text": "IterableTester",
              "canonicalReference": "gs-testing!IterableTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, T[], O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ArrayTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ArrayTester#haveElementAt:member(1)",
              "docComment": "/**\n * Checks if the array has the given element at the given index.\n *\n * @param expected - The expected item.\n *\n * @param index - Index of the array to check.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "haveElementAt(expected: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ", index: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "index",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "haveElementAt"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ArrayTester#haveExactElements:member(1)",
              "docComment": "/**\n * Checks if the array has the given elements at the exact order.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "haveExactElements(expected: "
                },
                {
                  "kind": "Content",
                  "text": "readonly T[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "haveExactElements"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!arrayThat:function(1)",
          "docComment": "/**\n * Entry point for building a matcher that matches {@link Array}s.\n *\n * @typeParam T - Type of `Array` item to cast the matcher to.\n *\n * @returns Matcher builder that matches `Array`s.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function arrayThat<T>(): "
            },
            {
              "kind": "Reference",
              "text": "ArrayTester",
              "canonicalReference": "gs-testing!ArrayTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, "
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<T[]>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "arrayThat"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(1)",
          "docComment": "/**\n * Asserts the given value to fulfill the requirements.\n *\n * @remarks\n *\n * This can take in various values. Depending on the value it's given the returning object to refine the check will be different.\n *\n * @param value - Value to check.\n *\n * @returns Object to further refine the boolean check.  @thModule core\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert(value: "
            },
            {
              "kind": "Content",
              "text": "boolean | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertTesterFactory",
              "canonicalReference": "gs-testing!AssertTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<boolean, "
            },
            {
              "kind": "Reference",
              "text": "BooleanTester",
              "canonicalReference": "gs-testing!BooleanTester:class"
            },
            {
              "kind": "Content",
              "text": "<void>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(10)",
          "docComment": "/**\n * @param value - Value to check.\n *\n * @typeParam T - Type of values emitted by the `Observable`.\n *\n * @returns Object to further refine the `Observable` check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert<T>(value: "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertTesterFactory",
              "canonicalReference": "gs-testing!AssertTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<T>, "
            },
            {
              "kind": "Reference",
              "text": "ObservableTester",
              "canonicalReference": "gs-testing!ObservableTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, void>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 10,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(11)",
          "docComment": "/**\n * @param value - Value to check.\n *\n * @typeParam T - Type of values that the `Promise` resolves with.\n *\n * @returns Object to further refine the `Promise` check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert<T>(value: "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertAsyncTesterFactory",
              "canonicalReference": "gs-testing!AssertAsyncTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T>, "
            },
            {
              "kind": "Reference",
              "text": "PromiseTester",
              "canonicalReference": "gs-testing!PromiseTester:class"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 11,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(12)",
          "docComment": "/**\n * @param value - Value to check.\n *\n * @typeParam T - Type of the `Object`.\n *\n * @returns Object to further refine the `Object` check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert<T extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ">(value: "
            },
            {
              "kind": "Content",
              "text": "T"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertTesterFactory",
              "canonicalReference": "gs-testing!AssertTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<T, "
            },
            {
              "kind": "Reference",
              "text": "ObjectTester",
              "canonicalReference": "gs-testing!ObjectTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, void>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 12,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(13)",
          "docComment": "/**\n * @param value - Value to check.\n *\n * @returns Object to further refine the check. This applies to any type of values.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert(value: "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertTesterFactory",
              "canonicalReference": "gs-testing!AssertTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<any, "
            },
            {
              "kind": "Reference",
              "text": "AnyTester",
              "canonicalReference": "gs-testing!AnyTester:class"
            },
            {
              "kind": "Content",
              "text": "<any, void>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 13,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(2)",
          "docComment": "/**\n * @param value - Value to check.\n *\n * @returns Object to further refine the string check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert(value: "
            },
            {
              "kind": "Content",
              "text": "string | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertTesterFactory",
              "canonicalReference": "gs-testing!AssertTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<string, "
            },
            {
              "kind": "Reference",
              "text": "StringTester",
              "canonicalReference": "gs-testing!StringTester:class"
            },
            {
              "kind": "Content",
              "text": "<void>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 2,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(3)",
          "docComment": "/**\n * @param value - Value to check.\n *\n * @returns Object to further refine the number check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert(value: "
            },
            {
              "kind": "Content",
              "text": "number | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertTesterFactory",
              "canonicalReference": "gs-testing!AssertTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<number, "
            },
            {
              "kind": "Reference",
              "text": "NumberTester",
              "canonicalReference": "gs-testing!NumberTester:class"
            },
            {
              "kind": "Content",
              "text": "<void>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 3,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(4)",
          "docComment": "/**\n * @param value - Value to check.\n *\n * @typeParam R - Type of the `Spy`'s return value.\n *\n * @typeParam A - Type of the `Spy`'s input arguments.\n *\n * @returns Object to further refine the `Spy` check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert<R, A extends "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": ">(spy: "
            },
            {
              "kind": "Reference",
              "text": "Spy",
              "canonicalReference": "gs-testing!Spy:interface"
            },
            {
              "kind": "Content",
              "text": "<R, A>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertTesterFactory",
              "canonicalReference": "gs-testing!AssertTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Spy",
              "canonicalReference": "gs-testing!Spy:interface"
            },
            {
              "kind": "Content",
              "text": "<R, A>, "
            },
            {
              "kind": "Reference",
              "text": "SpyTester",
              "canonicalReference": "gs-testing!SpyTester:class"
            },
            {
              "kind": "Content",
              "text": "<void, A>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 4,
          "parameters": [
            {
              "parameterName": "spy",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(5)",
          "docComment": "/**\n * @param value - Value to check.\n *\n * @typeParam T - Type of elements in the array.\n *\n * @returns Object to further refine the `Array` check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert<T>(value: "
            },
            {
              "kind": "Content",
              "text": "readonly T[] | null"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertTesterFactory",
              "canonicalReference": "gs-testing!AssertTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<T[], "
            },
            {
              "kind": "Reference",
              "text": "ArrayTester",
              "canonicalReference": "gs-testing!ArrayTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, void>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 5,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(6)",
          "docComment": "/**\n * @param value - Value to check.\n *\n * @typeParam T - Type of elements in the `Set`.\n *\n * @returns Object to further refine the `Set` check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert<T>(set: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertTesterFactory",
              "canonicalReference": "gs-testing!AssertTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ReadonlySet",
              "canonicalReference": "!ReadonlySet:interface"
            },
            {
              "kind": "Content",
              "text": "<T>, "
            },
            {
              "kind": "Reference",
              "text": "SetTester",
              "canonicalReference": "gs-testing!SetTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, void>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 6,
          "parameters": [
            {
              "parameterName": "set",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(7)",
          "docComment": "/**\n * @param value - Value to check.\n *\n * @typeParam K - Type of keys in the `Map`.\n *\n * @typeParam V - Type of vaues in the `Map`.\n *\n * @returns Object to further refine the `Map` check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert<K, V>(map: "
            },
            {
              "kind": "Reference",
              "text": "ReadonlyMap",
              "canonicalReference": "!ReadonlyMap:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertTesterFactory",
              "canonicalReference": "gs-testing!AssertTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "ReadonlyMap",
              "canonicalReference": "!ReadonlyMap:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>, "
            },
            {
              "kind": "Reference",
              "text": "MapTester",
              "canonicalReference": "gs-testing!MapTester:class"
            },
            {
              "kind": "Content",
              "text": "<K, V, void>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 7,
          "parameters": [
            {
              "parameterName": "map",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(8)",
          "docComment": "/**\n * @param value - Value to check.\n *\n * @typeParam T - Type of values in the `Iterable`.\n *\n * @typeParam I - Type of the `Iterable` checked.\n *\n * @returns Object to further refine the `Iterable` check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert<T, I extends "
            },
            {
              "kind": "Reference",
              "text": "Iterable",
              "canonicalReference": "!Iterable:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ">(iterable: "
            },
            {
              "kind": "Content",
              "text": "I"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertTesterFactory",
              "canonicalReference": "gs-testing!AssertTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<I, "
            },
            {
              "kind": "Reference",
              "text": "IterableTester",
              "canonicalReference": "gs-testing!IterableTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, I, void>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 10
          },
          "releaseTag": "Public",
          "overloadIndex": 8,
          "parameters": [
            {
              "parameterName": "iterable",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!assert:function(9)",
          "docComment": "/**\n * @param value - Value to check.\n *\n * @returns Object to further refine the `Function` check.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function assert(value: "
            },
            {
              "kind": "Content",
              "text": "() => any"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "AssertTesterFactory",
              "canonicalReference": "gs-testing!AssertTesterFactory:class"
            },
            {
              "kind": "Content",
              "text": "<() => any, "
            },
            {
              "kind": "Reference",
              "text": "FunctionTester",
              "canonicalReference": "gs-testing!FunctionTester:class"
            },
            {
              "kind": "Content",
              "text": "<void>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 9,
          "parameters": [
            {
              "parameterName": "value",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "assert"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!AssertAsyncTesterFactory:class",
          "docComment": "/**\n * Generates async testers for assertions.\n *\n * @remarks\n *\n * This is returned by {@link assert} to chain assertions, when {@link Promise} is passed in as argument. Ths class either returns the tester with the assertion logic reversed, or not.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `AssertAsyncTesterFactory` class.\n *\n * @typeParam V - Type of the value to be tested.\n *\n * @typeParam T - Type of the tester to be returned.\n *\n * @thHidden\n *\n * @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AssertAsyncTesterFactory<V, T extends "
            },
            {
              "kind": "Reference",
              "text": "BaseAsyncTester",
              "canonicalReference": "gs-testing!BaseAsyncTester:class"
            },
            {
              "kind": "Content",
              "text": "<V>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "AssertAsyncTesterFactory",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "gs-testing!AssertAsyncTesterFactory#to:member",
              "docComment": "/**\n * @returns Instance of the assert with no check reversals.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get to(): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "to",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "gs-testing!AssertAsyncTesterFactory#toNot:member",
              "docComment": "/**\n * @returns Instance of the assert with check reversal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get toNot(): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "toNot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!AssertTesterFactory:class",
          "docComment": "/**\n * Generates testers for assertions.\n *\n * @remarks\n *\n * This is returned by {@link assert} to chain assertions. Ths class either returns the tester with the assertion logic reversed, or not.\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `AssertTesterFactory` class.\n *\n * @typeParam V - Type of the value to be tested.\n *\n * @typeParam T - Type of the tester to be returned.\n *\n * @thHidden\n *\n * @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class AssertTesterFactory<V, T extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTester",
              "canonicalReference": "gs-testing!BaseTester:class"
            },
            {
              "kind": "Content",
              "text": "<V, void>"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "AssertTesterFactory",
          "members": [
            {
              "kind": "Property",
              "canonicalReference": "gs-testing!AssertTesterFactory#to:member",
              "docComment": "/**\n * @returns Instance of the assert with no check reversals.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get to(): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "to",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "gs-testing!AssertTesterFactory#toNot:member",
              "docComment": "/**\n * @returns Instance of the assert with check reversal.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get toNot(): "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "toNot",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!BaseAsyncTester:class",
          "docComment": "/**\n * Base classes for all async testers.\n *\n * @thHidden\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `BaseAsyncTester` class.\n *\n * @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class BaseAsyncTester<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "BaseAsyncTester",
          "members": [],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!BaseTester:class",
          "docComment": "/**\n * Base class of all testers.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `BaseTester` class.\n *\n * @typeParam T - Type of object to be tested.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class BaseTester<T, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "BaseTester",
          "members": [],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!BooleanTester:class",
          "docComment": "/**\n * Performs tests related to booleans.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class BooleanTester<O> extends "
            },
            {
              "kind": "Reference",
              "text": "AnyTester",
              "canonicalReference": "gs-testing!AnyTester:class"
            },
            {
              "kind": "Content",
              "text": "<boolean, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "BooleanTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!BooleanTester#beFalse:member(1)",
              "docComment": "/**\n * Asserts that the value is false.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beFalse(): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "beFalse"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!BooleanTester#beTrue:member(1)",
              "docComment": "/**\n * Asserts that the value is true.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beTrue(): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "beTrue"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!booleanThat:function(1)",
          "docComment": "/**\n * Entry point for building a matcher that matches booleans.\n *\n * @returns Matcher builder that matches booleans.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function booleanThat(): "
            },
            {
              "kind": "Reference",
              "text": "BooleanTester",
              "canonicalReference": "gs-testing!BooleanTester:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<boolean>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "booleanThat"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!createSpy:function(1)",
          "docComment": "/**\n * Creates a new {@link Spy} object.\n *\n * @param spyName - Name of the spy. This will be used for stringifying.\n *\n * @typeParam R - Return type of the spied function.\n *\n * @typeParam A - Argument types of the spied function.\n *\n * @returns The newly created `Spy` object.  @thModule spy\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createSpy<R, A extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": ">(spyName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Spy",
              "canonicalReference": "gs-testing!Spy:interface"
            },
            {
              "kind": "Content",
              "text": "<R, A>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 5,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "spyName",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createSpy"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!createSpyInstance:function(1)",
          "docComment": "/**\n * Creates a `SpyObj` that is an instance of the given constructor.\n *\n * @remarks\n *\n * The resulting `SpyObj` will be initialized with spies of methods of the original class. This object is also an instance of the given constructor, so it will pass `instanceof` checks.\n *\n * @param ctor - Constructor of the instance of `SpyObj` to create.\n *\n * @param base - Base object of the resulting `SpyObj`. Any properties here will be assigned to the resulting `SpyObj`. This is equivalent to calling `Object.assign` to the resulting `SpyObj`.\n *\n * @param spyName - Name of the `SpyObj`, to be used for stringifying its `Spy`s.\n *\n * @typeParam T - Type of the object to create.\n *\n * @returns The created `SpyObj`.  @thModule spy\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createSpyInstance<T extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ">(ctor: "
            },
            {
              "kind": "Reference",
              "text": "Ctor",
              "canonicalReference": "gs-testing!Ctor:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", base?: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", spyName?: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "SpyObj",
              "canonicalReference": "gs-testing!SpyObj:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "ctor",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            },
            {
              "parameterName": "base",
              "parameterTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 8
              }
            },
            {
              "parameterName": "spyName",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createSpyInstance"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!createSpyObject:function(1)",
          "docComment": "/**\n * Creates a `SpyObj` with the given methods.\n *\n * @param spyName - Name of the `SpyObj`, to be used for stringifying its `Spy`s.\n *\n * @param methodNames - Names of methods to attach to the created `SpyObj`.\n *\n * @param base - Base object of the resulting `SpyObj`. Any properties here will be assigned to the resulting `SpyObj`. This is equivalent to calling `Object.assign` to the resulting `SpyObj`.\n *\n * @typeParam T - Type of the object to create.\n *\n * @returns The created `SpyObj`.  @thModule spy\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createSpyObject<T extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ">(spyName: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", methodNames: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<keyof T>"
            },
            {
              "kind": "Content",
              "text": ", base?: "
            },
            {
              "kind": "Reference",
              "text": "Partial",
              "canonicalReference": "!Partial:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "SpyObj",
              "canonicalReference": "gs-testing!SpyObj:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 13
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "spyName",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "methodNames",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 7
              }
            },
            {
              "parameterName": "base",
              "parameterTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 10
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createSpyObject"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!createSpySubject:function(1)",
          "docComment": "/**\n * Creates an `Observable` that replays emissions of the given `Observable`.\n *\n * @param obs - `Observable` to spy on.\n *\n * @param historyCount - Number of emissions to track.\n *\n * @typeParam T - Type of the value emitted by the `Observable`.\n *\n * @returns `Observable` that replays emissions of the given `Observable`.  @thModule spy\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createSpyObservable<T>(obs: "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", historyCount?: "
            },
            {
              "kind": "Content",
              "text": "number"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obs",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            },
            {
              "parameterName": "historyCount",
              "parameterTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "createSpySubject"
        },
        {
          "kind": "Interface",
          "canonicalReference": "gs-testing!Ctor:interface",
          "docComment": "/**\n * Represents a constructor.\n *\n * @typeParam T - Type of object instantiated by the constructor.  @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Ctor<T extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Ctor",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "gs-testing!Ctor#name:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly name: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "name",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "gs-testing!Ctor#prototype:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly prototype: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "prototype",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!ElementTester:class",
          "docComment": "/**\n * Runs tests for {@link Element}s.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ElementTester<O> extends "
            },
            {
              "kind": "Reference",
              "text": "AnyTester",
              "canonicalReference": "gs-testing!AnyTester:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ", O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ElementTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ElementTester#haveAttributesWithValues:member(1)",
              "docComment": "/**\n * Checks that the `Element` has the specified attributes.\n *\n * @param attributes - Attributes whose values should be checked.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "haveAttributesWithValues(attributes: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<[string, string]>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "attributes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "haveAttributesWithValues"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ElementTester#haveTag:member(1)",
              "docComment": "/**\n * Checks that the `Element` has the given tag.\n *\n * TODO: This should be able to take string|StringMatcher\n *\n * @param tag - Expected tag of the element.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "haveTag(tag: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "tag",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "haveTag"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!elementThat:function(1)",
          "docComment": "/**\n * Entry point for building a matcher that matches {@link Element}s.\n *\n * @returns Matcher builder that matches `Element`s.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function elementThat(): "
            },
            {
              "kind": "Reference",
              "text": "ElementTester",
              "canonicalReference": "gs-testing!ElementTester:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Element",
              "canonicalReference": "!Element:interface"
            },
            {
              "kind": "Content",
              "text": ">>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "elementThat"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!ElseBuilder:class",
          "docComment": "/**\n * Defines behavior when none of the other conditions have been met.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `ElseBuilder` class.\n *\n * @typeParam R - Return type of the `Spy`.\n *\n * @typeParam A - Argument types of the `Spy`.\n *\n * @hidden\n *\n * @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ElseBuilder<R, A extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ElseBuilder",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ElseBuilder#call:member(1)",
              "docComment": "/**\n * Sets the target spy to call the given handler and return the handler's return value if none of the other conditions are matched.\n *\n * @param handler - Function to call if the condition matches.\n *\n * @returns The modified `Spy` object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "call(handler: "
                },
                {
                  "kind": "Content",
                  "text": "(...args: A) => R"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Spy",
                  "canonicalReference": "gs-testing!Spy:interface"
                },
                {
                  "kind": "Content",
                  "text": "<R, A>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "call"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ElseBuilder#callOriginal:member(1)",
              "docComment": "/**\n * Sets the target spy to call the original implementation if none of the other conditions are matched.\n *\n * @returns The modified `Spy` object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callOriginal(): "
                },
                {
                  "kind": "Reference",
                  "text": "Spy",
                  "canonicalReference": "gs-testing!Spy:interface"
                },
                {
                  "kind": "Content",
                  "text": "<R, A>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "callOriginal"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ElseBuilder#return:member(1)",
              "docComment": "/**\n * Sets the target spy to return the given value if none of the other conditions are matched.\n *\n * @param value - Value to be returned.\n *\n * @returns The modified `Spy` object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "return(value?: "
                },
                {
                  "kind": "Content",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Spy",
                  "canonicalReference": "gs-testing!Spy:interface"
                },
                {
                  "kind": "Content",
                  "text": "<R, A>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "return"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ElseBuilder#returnValues:member(1)",
              "docComment": "/**\n * Sets the target spy to return the given values in order if none of the other conditions are matched.\n *\n * @param value - Values to be returned.\n *\n * @returns The modified `Spy` object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "returnValues(...values: "
                },
                {
                  "kind": "Content",
                  "text": "R[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Spy",
                  "canonicalReference": "gs-testing!Spy:interface"
                },
                {
                  "kind": "Content",
                  "text": "<R, A>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "values",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "returnValues"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ElseBuilder#throwError:member(1)",
              "docComment": "/**\n * Sets the target spy to throw the given {@link Error} if none of the other conditions are matched.\n *\n * @param error - Error to be thrown.\n *\n * @returns The modified `Spy` object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "throwError(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Spy",
                  "canonicalReference": "gs-testing!Spy:interface"
                },
                {
                  "kind": "Content",
                  "text": "<R, A>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "error",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "throwError"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!Environment:class",
          "docComment": "/**\n * Base class for all testing environments.\n *\n * @remarks\n *\n * Environments allows you to specify logic that are ran before and after every test. This is equivalent to calling {@link init} and {@link teardown}, but you can package this better, since the init and teardown codes are in the same class.\n *\n * To use an Environment, extend the class and install it using {@link runEnvironment}.\n *\n * @thModule environment\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare abstract class Environment "
            }
          ],
          "releaseTag": "Public",
          "name": "Environment",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!Environment#innerAfterEach:member(1)",
              "docComment": "/**\n * Runs after every test.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract innerAfterEach(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "innerAfterEach"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!Environment#innerBeforeEach:member(1)",
              "docComment": "/**\n * Runs before ever test.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "protected abstract innerBeforeEach(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "innerBeforeEach"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!Fake:class",
          "docComment": "/**\n * Sets up fake behavior for jasmine Spies.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Fake` class.\n *\n * @typeParam R - Return type of the `Spy`.\n *\n * @typeParam A - Argument types of the `Spy`.\n *\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Fake<R, A extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "FakesContinuationBuilder",
              "canonicalReference": "gs-testing!FakesContinuationBuilder:class"
            },
            {
              "kind": "Content",
              "text": "<R, A> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Fake",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!Fake#call:member(1)",
              "docComment": "/**\n * Sets the target `Spy` to always calls the given handler and returns the return value of the handler.\n *\n * @param handler - Handler to be called.\n *\n * @returns The modified `Spy` object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "call(handler: "
                },
                {
                  "kind": "Content",
                  "text": "(...args: A) => R"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Spy",
                  "canonicalReference": "gs-testing!Spy:interface"
                },
                {
                  "kind": "Content",
                  "text": "<R, A>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "call"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!fake:function(1)",
          "docComment": "/**\n * Starting point of specifying logic to mocks.\n *\n * @remarks\n *\n * To use this, pass in a {@link Spy} object. You can set the behavior by specifying a condition followed by the action taken if the condition is true.\n *\n * @param targetSpy - `Spy` object whose behavior should be modified.\n *\n * @typeParam R - Return type of the `Spy`.\n *\n * @typeParam A - Argument types of the `Spy`.\n *\n * @returns Builder object to specify the `Spy`'s logic.  @thModule spy\n *\n * @example\n *\n * Returns 2 if the first argument is 1.\n * ```\n * fake(mockSpy).when(1).return(2);\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function fake<R, A extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": ">(targetSpy: "
            },
            {
              "kind": "Reference",
              "text": "Spy",
              "canonicalReference": "gs-testing!Spy:interface"
            },
            {
              "kind": "Content",
              "text": "<R, A>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Fake",
              "canonicalReference": "gs-testing!Fake:class"
            },
            {
              "kind": "Content",
              "text": "<R, A>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 6,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "targetSpy",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "fake"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!FakeFetch:class",
          "docComment": "/**\n * Mocks out the Fetch API.\n *\n * @remarks\n *\n * To use this, call `install`. You can set the handling logic of requests using `handleRequest` and `onGet`.\n *\n * @thModule fake\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FakeFetch "
            }
          ],
          "releaseTag": "Public",
          "name": "FakeFetch",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!FakeFetch#handleRequest:member(1)",
              "docComment": "/**\n * Sets the API to call the given handler when a request is sent.\n *\n * @param handler - Function called when the request is sent.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handleRequest(handler: "
                },
                {
                  "kind": "Reference",
                  "text": "HandlerFn",
                  "canonicalReference": "gs-testing!HandlerFn:type"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "handleRequest"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!FakeFetch#install:member(1)",
              "docComment": "/**\n * Overrides the implementation of `fetch` with a fake one.\n *\n * @param window - The window object to install the FakeFetch on.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "install(window: "
                },
                {
                  "kind": "Reference",
                  "text": "Window",
                  "canonicalReference": "!Window:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "window",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "install"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!FakeFetch#onGet:member(1)",
              "docComment": "/**\n * Starts setting the behavior when handling a GET request.\n *\n * @param url - The `GET` URL called.\n *\n * @returns Object to set the response for the specified `GET` request.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "onGet(url: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "ResponseBuilder",
                  "canonicalReference": "gs-testing!ResponseBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "url",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "onGet"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!FakesContinuationBuilder:class",
          "docComment": "/**\n * Defines predicate that should be met for the behavior to be ran.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `FakesContinuationBuilder` class.\n *\n * @typeParam R - Return type of the `Spy`.\n *\n * @typeParam A - Argument types of the `Spy`.\n *\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FakesContinuationBuilder<R, A extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "FakesContinuationBuilder",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!FakesContinuationBuilder#always:member(1)",
              "docComment": "/**\n * Starts a condition that always matches.\n *\n * @returns Builder to chain the behavior if the arguments match the call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "always(): "
                },
                {
                  "kind": "Reference",
                  "text": "ElseBuilder",
                  "canonicalReference": "gs-testing!ElseBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<R, A>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "always"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!FakesContinuationBuilder#when:member(1)",
              "docComment": "/**\n * Starts a matching condition.\n *\n * @param args - Arguments to match. This also accepts matchers. If there are less specified arguments, the rest of the arguments are assumed to match.\n *\n * @returns Builder to chain the behavior if the arguments match the call.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "when(...args: "
                },
                {
                  "kind": "Content",
                  "text": "A"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "WhenBuilder",
                  "canonicalReference": "gs-testing!WhenBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<R, A>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "when"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "gs-testing!FakeTime:interface",
          "docComment": "/**\n * Overrides the time related functions in {@link mdn://Window | Window} so we can control it for tests.\n *\n * @remarks\n *\n * To use this, call {@link mockTime} with the reference to `Window`. This will override all time related functions.\n *\n * @thModule fake\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FakeTime "
            }
          ],
          "releaseTag": "Public",
          "name": "FakeTime",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "gs-testing!FakeTime#tick:member(1)",
              "docComment": "/**\n * Moves the time forward by the specified amount.\n *\n * @param ms - Time in millis to move forward by.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tick(ms: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ms",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "tick"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "gs-testing!FakeTime#tickToTrigger:member(1)",
              "docComment": "/**\n * Moves the time forward until a {@link mdn://setTimeout | setTimeout} or a {@link mdn://setInterval | setInterval} is triggered.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "tickToTrigger(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "tickToTrigger"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!FunctionTester:class",
          "docComment": "/**\n * Runs tests for {@link Function}s.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class FunctionTester<O> extends "
            },
            {
              "kind": "Reference",
              "text": "AnyTester",
              "canonicalReference": "gs-testing!AnyTester:class"
            },
            {
              "kind": "Content",
              "text": "<() => any, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "FunctionTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!FunctionTester#throw:member(1)",
              "docComment": "/**\n * Checks that invoking the given function will throw an error.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "throw(): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "throw"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!FunctionTester#throwErrorWithMessage:member(1)",
              "docComment": "/**\n * Checks that invoking the given function will throw error with message matching the given Regexp.\n *\n * @param regexp - Regular expression that the error message should match.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "throwErrorWithMessage(regexp: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "regexp",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "throwErrorWithMessage"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "gs-testing!HandlerFn:type",
          "docComment": "/**\n * Handles a request.\n *\n * @remarks\n *\n * Pass this to {@link FakeFetch} to set the behavior when request was sent.\n *\n * @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type HandlerFn = "
            },
            {
              "kind": "Content",
              "text": "(request?: string | "
            },
            {
              "kind": "Reference",
              "text": "Request",
              "canonicalReference": "!Request:interface"
            },
            {
              "kind": "Content",
              "text": ", init?: "
            },
            {
              "kind": "Reference",
              "text": "RequestInit",
              "canonicalReference": "!RequestInit:interface"
            },
            {
              "kind": "Content",
              "text": ") => "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Response",
              "canonicalReference": "!Response:interface"
            },
            {
              "kind": "Content",
              "text": "> | null"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "HandlerFn",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 10
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "gs-testing!HasTime:interface",
          "docComment": "/**\n * Any objects that can control time.\n *\n * @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HasTime "
            }
          ],
          "releaseTag": "Public",
          "name": "HasTime",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "gs-testing!HasTime#clearInterval:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearInterval(ref: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "clearInterval"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "gs-testing!HasTime#clearTimeout:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "clearTimeout(ref: "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "ref",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "clearTimeout"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "gs-testing!HasTime#setInterval:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setInterval(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": ", delay: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "delay",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setInterval"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "gs-testing!HasTime#setTimeout:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setTimeout(fn: "
                },
                {
                  "kind": "Reference",
                  "text": "Function",
                  "canonicalReference": "!Function:interface"
                },
                {
                  "kind": "Content",
                  "text": ", delay: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "unknown"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "fn",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "delay",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setTimeout"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!init:function(1)",
          "docComment": "/**\n * Initializes each test and returns object to be used for the tests.\n *\n * @remarks\n *\n * This runs the given function and returns the object returned by it. This object is shallow read only and represents the state shared by multiple tests.\n *\n * You can also chain the inits by passing the returned object to the next {@link test} call. This lets you combine the test objects.\n *\n * @param initFn - The function to run before every test.\n *\n * @param base - The base object passed to the outer `test` function.\n *\n * @typeParam T - Type of the object returned by the `initFn`.\n *\n * @typeParam B - Type of the object returned by the `initFn` in the outer `test` function.\n *\n * @returns Readonly version of the object returned by the `initFn`.\n *\n * @thHidden\n *\n * @example\n *\n * Simple test:\n * ```\n * test('testedFunction', init => {\n *   const _ = init(() => {\n *     return {a: 1};\n *   });\n *\n *   should('do something', () => {\n *     assert(_.a).to.equal(1);\n *   });\n * });\n * ```\n *\n * @example\n *\n * Chained calls:\n * ```\n * test('TestedClass', init => {\n *   const _ = init(() => ({a: 1}));\n *\n *   test('testedFunction', _, init => {\n *     const _ = init(_ => {\n *       return {...a, b: _.a + 1};\n *     });\n *\n *     should('do something', () => {\n *       assert(_.a).to.equal(1);\n *       assert(_.b).to.equal(2);\n *     });\n *   });\n * });\n * ```\n *\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function init<T extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ", B>(initFn: "
            },
            {
              "kind": "Content",
              "text": "(base: B) => T"
            },
            {
              "kind": "Content",
              "text": ", base: "
            },
            {
              "kind": "Content",
              "text": "B"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Readonly",
              "canonicalReference": "!Readonly:type"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "initFn",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "base",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "init"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "gs-testing!InitFn:type",
          "docComment": "/**\n * Initialization function ran at the start of every test.\n *\n * @typeParam B - Type of the base object passed to the initialization function.\n *\n * @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type InitFn<B> = "
            },
            {
              "kind": "Content",
              "text": "<T>(provider: "
            },
            {
              "kind": "Reference",
              "text": "InitProvider",
              "canonicalReference": "gs-testing!InitProvider:type"
            },
            {
              "kind": "Content",
              "text": "<B, T>) => T & B"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "InitFn",
          "typeParameters": [
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "gs-testing!InitProvider:type",
          "docComment": "/**\n * Actual initialization logic.\n *\n * @typeParam B - Type of the base object.\n *\n * @typeParam T - Type of the object returned by the function.\n *\n * @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type InitProvider<B, T> = "
            },
            {
              "kind": "Content",
              "text": "(base: B) => T & B"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "InitProvider",
          "typeParameters": [
            {
              "typeParameterName": "B",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!IterableTester:class",
          "docComment": "/**\n * Runs tests for {@link mdn://Iterable | Iterable}s.\n *\n * @typeParam T - Type of item in the `Iterable`.\n *\n * @typeParam I - Type of the `Iterable`.\n *\n * @typeParam O - Type of the returned mock.  @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class IterableTester<T, I extends "
            },
            {
              "kind": "Reference",
              "text": "Iterable",
              "canonicalReference": "!Iterable:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ", O> extends "
            },
            {
              "kind": "Reference",
              "text": "AnyTester",
              "canonicalReference": "gs-testing!AnyTester:class"
            },
            {
              "kind": "Content",
              "text": "<I, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "IterableTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!IterableTester#beEmpty:member(1)",
              "docComment": "/**\n * Checks if the `Iterable` is empty.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beEmpty(): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "beEmpty"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!IterableTester#startWith:member(1)",
              "docComment": "/**\n * Checks if the `Iterable` starts with the elements in the given iterable with the same order.\n *\n * @param expected - The iterable that the tested `Iterable` should start with.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "startWith(expected: "
                },
                {
                  "kind": "Reference",
                  "text": "Iterable",
                  "canonicalReference": "!Iterable:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "startWith"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 4,
            "endIndex": 6
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!iterableThat:function(1)",
          "docComment": "/**\n * Entry point for building a matcher that matches {@link Iterable}s.\n *\n * @typeParam T - Type of the elements in the `Iterable`.\n *\n * @typeParam I - Type of the iterable.\n *\n * @returns Matcher builder that matches `Iterable`s.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function iterableThat<T, I extends "
            },
            {
              "kind": "Reference",
              "text": "Iterable",
              "canonicalReference": "!Iterable:interface"
            },
            {
              "kind": "Content",
              "text": "<T>"
            },
            {
              "kind": "Content",
              "text": ">(): "
            },
            {
              "kind": "Reference",
              "text": "IterableTester",
              "canonicalReference": "gs-testing!IterableTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, I, "
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<I>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "I",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "iterableThat"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!MapTester:class",
          "docComment": "/**\n * Runs tests for {@link Map}s.\n *\n * @typeParam K - Type of key of the `Map`.\n *\n * @typeParam V - Type of value of the `Map`.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class MapTester<K, V, O> extends "
            },
            {
              "kind": "Reference",
              "text": "IterableTester",
              "canonicalReference": "gs-testing!IterableTester:class"
            },
            {
              "kind": "Content",
              "text": "<[K, V], "
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "MapTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!MapTester#haveExactElements:member(1)",
              "docComment": "/**\n * Checks that the `Map` contains and only contains elements in the specified `Map`.\n *\n * @param expected - Elements that should be in the `Map` and the `Map` should only contain these.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "haveExactElements(expected: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlyMap",
                  "canonicalReference": "!ReadonlyMap:interface"
                },
                {
                  "kind": "Content",
                  "text": "<K, V>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "haveExactElements"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!mapThat:function(1)",
          "docComment": "/**\n * Entry point for building a matcher that matches {@link Map}s.\n *\n * @typeParam K - Type of the `Map`'s keys.\n *\n * @typeParam V - Type of the `Map`'s values.\n *\n * @returns Matcher builder that matches `Map`s.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function mapThat<K, V>(): "
            },
            {
              "kind": "Reference",
              "text": "MapTester",
              "canonicalReference": "gs-testing!MapTester:class"
            },
            {
              "kind": "Content",
              "text": "<K, V, "
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Map",
              "canonicalReference": "!Map:interface"
            },
            {
              "kind": "Content",
              "text": "<K, V>>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "V",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "mapThat"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!Matcher:class",
          "docComment": "/**\n * Matches an object according to the given logic.\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `Matcher` class.\n *\n * @typeParam T - Type of object to match.  @thHidden\n *\n * @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Matcher<T> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Matcher",
          "members": [],
          "implementsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "gs-testing!MatcherType:type",
          "docComment": "/**\n * Mixes in the object with {@link Matcher} for that object.\n *\n * @typeParam T - Type of the object that the Matcher matches.\n *\n * @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type MatcherType<T> = "
            },
            {
              "kind": "Reference",
              "text": "Matcher",
              "canonicalReference": "gs-testing!Matcher:class"
            },
            {
              "kind": "Content",
              "text": "<T> & T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "MatcherType",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!mockTime:function(1)",
          "docComment": "/**\n * Controls the time in the given `globalThis` object.\n *\n * @param globalObj - Reference to globalThis object to control the time\n *\n * @returns Object to manipulate time.  @thModule fake\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function install(globalObj: "
            },
            {
              "kind": "Reference",
              "text": "HasTime",
              "canonicalReference": "gs-testing!HasTime:interface"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "FakeTime",
              "canonicalReference": "gs-testing!FakeTime:interface"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "globalObj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "mockTime"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!NumberTester:class",
          "docComment": "/**\n * Runs tests for {@link Number}s.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class NumberTester<O> extends "
            },
            {
              "kind": "Reference",
              "text": "AnyTester",
              "canonicalReference": "gs-testing!AnyTester:class"
            },
            {
              "kind": "Content",
              "text": "<number, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "NumberTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!NumberTester#beANaN:member(1)",
              "docComment": "/**\n * Checks the the number is `NaN`.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beANaN(): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "beANaN"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!NumberTester#beCloseTo:member(1)",
              "docComment": "/**\n * Checks that the number is close to the given number.\n *\n * @param expected - The expected value.\n *\n * @param decimals - The number of decimal places to check for equality.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "beCloseTo(expected: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", decimals: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "decimals",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "beCloseTo"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!numberThat:function(1)",
          "docComment": "/**\n * Entry point for building a matcher that matches numbers.\n *\n * @returns Matcher builder that matches numbers.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function numberThat(): "
            },
            {
              "kind": "Reference",
              "text": "NumberTester",
              "canonicalReference": "gs-testing!NumberTester:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<number>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "numberThat"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!ObjectTester:class",
          "docComment": "/**\n * Runs tests for {@link Object}s.\n *\n * @typeParam T - Type of the object to match.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ObjectTester<T extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ", O> extends "
            },
            {
              "kind": "Reference",
              "text": "AnyTester",
              "canonicalReference": "gs-testing!AnyTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ObjectTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ObjectTester#haveProperties:member(1)",
              "docComment": "/**\n * Checks that the actual object contains the given properties. This only does a shallow check.\n *\n * @param expected - Object whose properties are expected to have.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "haveProperties(expected: "
                },
                {
                  "kind": "Reference",
                  "text": "Partial",
                  "canonicalReference": "!Partial:type"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "haveProperties"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!objectThat:function(1)",
          "docComment": "/**\n * Entry point for building a matcher that matches {@link Object}s.\n *\n * @typeParam T - Type of the object to match.\n *\n * @returns Matcher builder that matches `Object`s.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function objectThat<T extends "
            },
            {
              "kind": "Content",
              "text": "object"
            },
            {
              "kind": "Content",
              "text": ">(): "
            },
            {
              "kind": "Reference",
              "text": "ObjectTester",
              "canonicalReference": "gs-testing!ObjectTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, "
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "objectThat"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!ObservableTester:class",
          "docComment": "/**\n * Runs tests for {@link Observable}s.\n *\n * @typeParam T - Type of items emitted by the `Observable`.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ObservableTester<T, O> extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTester",
              "canonicalReference": "gs-testing!BaseTester:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<T>, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "ObservableTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ObservableTester#emit:member(1)",
              "docComment": "/**\n * Checks that the `Observable` emits a value.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emit(): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "emit"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ObservableTester#emitErrorWithMessage:member(1)",
              "docComment": "/**\n * Checks that the `Observable` emits an `Error`.\n *\n * @param expected - Regular expression that should match the `Error` message.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emitErrorWithMessage(expected: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "emitErrorWithMessage"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ObservableTester#emitSequence:member(1)",
              "docComment": "/**\n * Checks that the `Observable` emits the given emissions in sequence.\n *\n * @param expected - Sequence of emissions that the `Observable` is expected to emit.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emitSequence(expected: "
                },
                {
                  "kind": "Content",
                  "text": "readonly T[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "emitSequence"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ObservableTester#emitWith:member(1)",
              "docComment": "/**\n * Checks that the `Observable` emits the given item.\n *\n * @param expected - Item that the `Observable` is expected to emit.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "emitWith(expected: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "emitWith"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!PromiseTester:class",
          "docComment": "/**\n * Runs tests for {@link Promise}s.\n *\n * @typeParam T - Type of item returned by the `Promise` on resolution.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class PromiseTester<T> extends "
            },
            {
              "kind": "Reference",
              "text": "BaseAsyncTester",
              "canonicalReference": "gs-testing!BaseAsyncTester:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<T>> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "PromiseTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!PromiseTester#reject:member(1)",
              "docComment": "/**\n * Checks that the `Promise` rejects.\n *\n * @returns `Promise` that is resolved when the check is complete.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reject(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "reject"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!PromiseTester#rejectWithErrorMessage:member(1)",
              "docComment": "/**\n * Checks that the `Promise` rejects with `Error` whose message matches the given `RegExp`.\n *\n * @param regexp - Regular expression that the error message should match.\n *\n * @returns `Promise` that is resolved when the check is complete.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "rejectWithErrorMessage(regexp: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "regexp",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "rejectWithErrorMessage"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!PromiseTester#resolveWith:member(1)",
              "docComment": "/**\n * Checks that the `Promise` resolved with the given value.\n *\n * @param expected - The expected value to resolve with.\n *\n * @returns `Promise` that is resolved when the check is complete.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "resolveWith(expected: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<void>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "resolveWith"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!resetCalls:function(1)",
          "docComment": "/**\n * Resets any calls on the given `Spy`.\n *\n * @param spyObj - Spy to reset the calls on.  @thModule spy\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function resetCalls(spyObj: "
            },
            {
              "kind": "Reference",
              "text": "Spy",
              "canonicalReference": "gs-testing!Spy:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any[]>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "spyObj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "name": "resetCalls"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!resetStrategies:function(1)",
          "docComment": "/**\n * Resets any mocking logic on the given `Spy`.\n *\n * @param spyObj - Spy to reset any mocking strategies on.  @thModule spy\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function resetStrategies(spyObj: "
            },
            {
              "kind": "Reference",
              "text": "Spy",
              "canonicalReference": "gs-testing!Spy:interface"
            },
            {
              "kind": "Content",
              "text": "<any, any>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "spyObj",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "name": "resetStrategies"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!ResponseBuilder:class",
          "docComment": "/**\n * Builder for responding to a fetch request.\n *\n * @thHidden\n *\n * @remarks\n *\n * The constructor for this class is marked as internal. Third-party code should not call the constructor directly or create subclasses that extend the `ResponseBuilder` class.\n *\n * @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class ResponseBuilder "
            }
          ],
          "releaseTag": "Public",
          "name": "ResponseBuilder",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ResponseBuilder#respond:member(1)",
              "docComment": "/**\n * Sets {@link FakeFetch} to respond with the given response object.\n *\n * @param response - Response object to send back.\n *\n * @returns `FakeFetch` object for chaining.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "respond(response: "
                },
                {
                  "kind": "Reference",
                  "text": "Response",
                  "canonicalReference": "!Response:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FakeFetch",
                  "canonicalReference": "gs-testing!FakeFetch:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "response",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "respond"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!ResponseBuilder#text:member(1)",
              "docComment": "/**\n * Sets {@link FakeFetch} to respond with a response object containing the given string.\n *\n * @param content - The text content to respond with.\n *\n * @returns `FakeFetch` object for chaining.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "text(content: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FakeFetch",
                  "canonicalReference": "gs-testing!FakeFetch:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "content",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "text"
            }
          ],
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!run:function(1)",
          "docComment": "/**\n * Runs the given observable during the test run.\n *\n * @remarks\n *\n * Observable ran this way will be unsubscribed at the end of the test.\n *\n * @param obs - The observable to run.  @thModule core\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function run(obs: "
            },
            {
              "kind": "Reference",
              "text": "Observable",
              "canonicalReference": "rxjs!Observable:class"
            },
            {
              "kind": "Content",
              "text": "<unknown>"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 4,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obs",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              }
            }
          ],
          "name": "run"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!runEnvironment:function(1)",
          "docComment": "/**\n * Installs the {@link Environment} to run before and after every tests.\n *\n * @param environment - The environment to be installed.\n *\n * @thModule environment\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function runEnvironment(environment: "
            },
            {
              "kind": "Reference",
              "text": "Environment",
              "canonicalReference": "gs-testing!Environment:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "environment",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "runEnvironment"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!SetTester:class",
          "docComment": "/**\n * Runs tests for {@link Set}s.\n *\n * @typeParam T - Type of items in the `Set`.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SetTester<T, O> extends "
            },
            {
              "kind": "Reference",
              "text": "IterableTester",
              "canonicalReference": "gs-testing!IterableTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, "
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "SetTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!SetTester#haveExactElements:member(1)",
              "docComment": "/**\n * Checks that the `Set` contains and only contains elements in the specified `Set`.\n *\n * @param expected - Elements that should be in the `Set` and the `Set` should only contain these.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "haveExactElements(expected: "
                },
                {
                  "kind": "Reference",
                  "text": "ReadonlySet",
                  "canonicalReference": "!ReadonlySet:interface"
                },
                {
                  "kind": "Content",
                  "text": "<T>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 4,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 3
                  }
                }
              ],
              "name": "haveExactElements"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!setThat:function(1)",
          "docComment": "/**\n * Entry point for building a matcher that matches {@link Set}s.\n *\n * @typeParam T - Type of the elements in the `Set`.\n *\n * @returns Matcher builder that matches `Set`s.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setThat<T>(): "
            },
            {
              "kind": "Reference",
              "text": "SetTester",
              "canonicalReference": "gs-testing!SetTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, "
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Set",
              "canonicalReference": "!Set:interface"
            },
            {
              "kind": "Content",
              "text": "<T>>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "setThat"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!setup:function(1)",
          "docComment": "/**\n * Runs the function before every test.\n *\n * @param fn - The function to run.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function setup(fn: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "setup"
        },
        {
          "kind": "Interface",
          "canonicalReference": "gs-testing!Should:interface",
          "docComment": "/**\n * @see should  @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Should extends "
            },
            {
              "kind": "Reference",
              "text": "ShouldRunFn",
              "canonicalReference": "gs-testing!ShouldRunFn:type"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Should",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "gs-testing!Should#only:member",
              "docComment": "/**\n * Runs only this test.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly only: "
                },
                {
                  "kind": "Reference",
                  "text": "ShouldRunFn",
                  "canonicalReference": "gs-testing!ShouldRunFn:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "only",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "gs-testing!Should#skip:member",
              "docComment": "/**\n * Do not run this test.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly skip: "
                },
                {
                  "kind": "Reference",
                  "text": "ShouldRunFn",
                  "canonicalReference": "gs-testing!ShouldRunFn:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "skip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "gs-testing!should:var",
          "docComment": "/**\n * Declares a test.\n *\n * @remarks\n *\n * This takes in the description of the test, and a test function. The test function will run the tests by calling assertion methods like {@link assert}.\n *\n * The descriptor should start with a verb, so it reads nicely.\n *\n * Similar to {@link test}, you can call `only` to make only this test ran in the suite.\n *\n * You can also call `skip` to skip this test.\n *\n * @example\n *\n * Declaring a test:\n * ```\n * should('do something', () => {\n *   assert(1).to.equal(1);\n * });\n * ```\n *\n * @thModule core\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "should: "
            },
            {
              "kind": "Reference",
              "text": "Should",
              "canonicalReference": "gs-testing!Should:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "should",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "gs-testing!ShouldFn:type",
          "docComment": "/**\n * Function to be passed to {@link should}.\n *\n * @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ShouldFn = "
            },
            {
              "kind": "Content",
              "text": "() => (void | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ShouldFn",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "gs-testing!ShouldRunFn:type",
          "docComment": "/**\n * @param desc - Description of the test.\n *\n * @param testFn - Function that runs the test.\n *\n * @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ShouldRunFn = "
            },
            {
              "kind": "Content",
              "text": "(desc: string, testFn?: "
            },
            {
              "kind": "Reference",
              "text": "ShouldFn",
              "canonicalReference": "gs-testing!ShouldFn:type"
            },
            {
              "kind": "Content",
              "text": ") => void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ShouldRunFn",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "gs-testing!Spied:type",
          "docComment": "/**\n * Properties of a {@link SpyObj}.\n *\n * @typeParam T - Type of the object.\n *\n * @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type Spied<T> = "
            },
            {
              "kind": "Content",
              "text": "T extends (...args: infer A) => infer R ? "
            },
            {
              "kind": "Reference",
              "text": "Spy",
              "canonicalReference": "gs-testing!Spy:interface"
            },
            {
              "kind": "Content",
              "text": "<R, A> : T"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "Spied",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!spy:function(1)",
          "docComment": "/**\n * Spies on a given property.\n *\n * @remarks\n *\n * This replaces the property on the object with the spy. This allows you to modify the behavior of the property, as well as tracking calls to the property.\n *\n * NOTE: This requires the object to not be sealed.\n *\n * @param obj - Object to spy on.\n *\n * @param key - Property key to spy on.\n *\n * @typeParam O - Object to spy on.\n *\n * @typeParam K - Property key of the spied object.\n *\n * @returns The spied property.\n *\n * @thModule spy\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spy<O extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": ", K extends "
            },
            {
              "kind": "Content",
              "text": "keyof O"
            },
            {
              "kind": "Content",
              "text": ">(obj: "
            },
            {
              "kind": "Content",
              "text": "O"
            },
            {
              "kind": "Content",
              "text": ", key: "
            },
            {
              "kind": "Content",
              "text": "K"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Spied",
              "canonicalReference": "gs-testing!Spied:type"
            },
            {
              "kind": "Content",
              "text": "<O[K]>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 9,
            "endIndex": 11
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "obj",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "key",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            }
          ],
          "typeParameters": [
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "K",
              "constraintTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "spy"
        },
        {
          "kind": "Interface",
          "canonicalReference": "gs-testing!Spy:interface",
          "docComment": "/**\n * A spy function.\n *\n * @typeParam R - Return type of the spied function.\n *\n * @typeParam A - Argument types of the spied function.\n *\n * @thHidden  @thModule spy\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Spy<R, A extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "Spy",
          "members": [],
          "extendsTokenRanges": []
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "gs-testing!SpyObj:type",
          "docComment": "/**\n * Object whose methods are all spied.\n *\n * @typeParam O - Type of the object.\n *\n * @thHidden  @thModule spy\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type SpyObj<O extends "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Content",
              "text": "{\n    [K in keyof O]: "
            },
            {
              "kind": "Reference",
              "text": "Spied",
              "canonicalReference": "gs-testing!Spied:type"
            },
            {
              "kind": "Content",
              "text": "<O[K]>;\n} & O"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "SpyObj",
          "typeParameters": [
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 6
          }
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!SpyTester:class",
          "docComment": "/**\n * Runs tests for {@link Spy}s.\n *\n * @typeParam A - Type of `Spy` arguments.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class SpyTester<O, A extends "
            },
            {
              "kind": "Content",
              "text": "any[] "
            },
            {
              "kind": "Content",
              "text": "= "
            },
            {
              "kind": "Content",
              "text": "any[]"
            },
            {
              "kind": "Content",
              "text": "> extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTester",
              "canonicalReference": "gs-testing!BaseTester:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Spy",
              "canonicalReference": "gs-testing!Spy:interface"
            },
            {
              "kind": "Content",
              "text": "<any, A>, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            }
          ],
          "name": "SpyTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!SpyTester#haveBeenCalled:member(1)",
              "docComment": "/**\n * Checks that the given `Spy` has been called.\n *\n * @param minTimes - Minimum number of times that the spy has been called.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "haveBeenCalled(minTimes?: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "minTimes",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "haveBeenCalled"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!SpyTester#haveBeenCalledWith:member(1)",
              "docComment": "/**\n * Checks that the given `Spy` has been called with the given arguments.\n *\n * @param args - Arguments that the `Spy` is expected to have been called with.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "haveBeenCalledWith(...args: "
                },
                {
                  "kind": "Content",
                  "text": "A"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "haveBeenCalledWith"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 5,
            "endIndex": 9
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!spyThat:function(1)",
          "docComment": "/**\n * Entry point for building a matcher that matches {@link Spy}s.\n *\n * @typeParam R - Return type of the spied function.\n *\n * @typeParam A - Arguments types of the spied function.\n *\n * @returns Matcher builder that matches `Spy`s.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function spyThat<R, A extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": ">(): "
            },
            {
              "kind": "Reference",
              "text": "SpyTester",
              "canonicalReference": "gs-testing!SpyTester:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "Spy",
              "canonicalReference": "gs-testing!Spy:interface"
            },
            {
              "kind": "Content",
              "text": "<R, A>>, A>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 9
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "spyThat"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!StringTester:class",
          "docComment": "/**\n * Runs tests for {@link String}s.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class StringTester<O> extends "
            },
            {
              "kind": "Reference",
              "text": "AnyTester",
              "canonicalReference": "gs-testing!AnyTester:class"
            },
            {
              "kind": "Content",
              "text": "<string, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "StringTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!StringTester#match:member(1)",
              "docComment": "/**\n * Checks that the value matches the given regexp.\n *\n * @param regexp - `RegExp` that should match the string value.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "match(regexp: "
                },
                {
                  "kind": "Reference",
                  "text": "RegExp",
                  "canonicalReference": "!RegExp:interface"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "regexp",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "match"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!stringThat:function(1)",
          "docComment": "/**\n * Entry point for building a matcher that matches strings.\n *\n * @returns Matcher builder that matches strings.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function stringThat(): "
            },
            {
              "kind": "Reference",
              "text": "StringTester",
              "canonicalReference": "gs-testing!StringTester:class"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<string>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 5
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "name": "stringThat"
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!teardown:function(1)",
          "docComment": "/**\n * Runs the given function after every test.\n *\n * @param fn - Function to run.  @thModule core\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function teardown(fn: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "fn",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "teardown"
        },
        {
          "kind": "Interface",
          "canonicalReference": "gs-testing!Test:interface",
          "docComment": "/**\n * @see test  @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface Test extends "
            },
            {
              "kind": "Reference",
              "text": "TestRunFn",
              "canonicalReference": "gs-testing!TestRunFn:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Test",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "gs-testing!Test#only:member",
              "docComment": "/**\n * Runs only the tests declared inside this scope.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly only: "
                },
                {
                  "kind": "Reference",
                  "text": "TestRunFn",
                  "canonicalReference": "gs-testing!TestRunFn:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "only",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "gs-testing!Test#skip:member",
              "docComment": "/**\n * Do not run any tests declared inside this scope.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "readonly skip: "
                },
                {
                  "kind": "Reference",
                  "text": "TestRunFn",
                  "canonicalReference": "gs-testing!TestRunFn:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "releaseTag": "Public",
              "name": "skip",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Variable",
          "canonicalReference": "gs-testing!test:var",
          "docComment": "/**\n * Wraps a group of tests.\n *\n * @remarks\n *\n * This takes in the description of the component tested and a test function. The test function must call {@link should} for running every test.\n *\n * This optionally takes in a base object. This base object will be passed to the {@link init} passed into the test function. This base object can be used to propagate test setup object into inner `test` calls.\n *\n * You can call `only` to make only the tests declared by this is ran in the suite.\n *\n * You can also call `skip` to skip the tests declared by this.\n *\n * @example\n *\n * Simple test:\n * ```\n * test('testedFunction', () => {\n *   should('do something', () => {\n *     assert(1).to.equal(1);\n *   });\n * });\n * ```\n *\n * @example\n *\n * Hierarchical test:\n * ```\n * test('TestClass', init => {\n *   const _ = init(() => {\n *     return {c: new TestClass()};\n *   });\n *\n *   test('testFunction', () => {\n *     should('return 1' => {\n *       assert(_.c.testFunction()).to.equal(1);\n *     });\n *   });\n * });\n * ```\n *\n * @example\n *\n * Skipped and forced tests:\n * ```\n * test('TestClass', () => {\n *   test.only('onlyFunction', () => {\n *     // Tests in here will be the only ones that are ran.\n *   });\n *\n *   test.skip('skipFunction', () => {\n *     // Tests in here will not be ran.\n *   });\n * });\n * ```\n *\n * @thModule core\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "test: "
            },
            {
              "kind": "Reference",
              "text": "Test",
              "canonicalReference": "gs-testing!Test:interface"
            }
          ],
          "releaseTag": "Public",
          "name": "test",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "gs-testing!TestFn:type",
          "docComment": "/**\n * Function to be passed to {@link test}.\n *\n * @typeParam T - Type of the base object for initialization.\n *\n * @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type TestFn<T> = "
            },
            {
              "kind": "Content",
              "text": "(initFn: "
            },
            {
              "kind": "Reference",
              "text": "InitFn",
              "canonicalReference": "gs-testing!InitFn:type"
            },
            {
              "kind": "Content",
              "text": "<T>) => (void | "
            },
            {
              "kind": "Reference",
              "text": "Promise",
              "canonicalReference": "!Promise:interface"
            },
            {
              "kind": "Content",
              "text": "<void>)"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "TestFn",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 6
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "gs-testing!TestRunFn:interface",
          "docComment": "/**\n * @see test  @thHidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TestRunFn "
            }
          ],
          "releaseTag": "Public",
          "name": "TestRunFn",
          "members": [
            {
              "kind": "CallSignature",
              "canonicalReference": "gs-testing!TestRunFn:call(1)",
              "docComment": "/**\n * @param desc - Component that is tested.\n *\n * @param testFn - Function that declares the test specs.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "(desc: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", testFn: "
                },
                {
                  "kind": "Reference",
                  "text": "TestFn",
                  "canonicalReference": "gs-testing!TestFn:type"
                },
                {
                  "kind": "Content",
                  "text": "<{}>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 6,
                "endIndex": 7
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "desc",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "testFn",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ]
            },
            {
              "kind": "CallSignature",
              "canonicalReference": "gs-testing!TestRunFn:call(2)",
              "docComment": "/**\n * @param desc - Component that is tested.\n *\n * @param base - Base object to be passed into the {@link init} passed into the `testFn`.\n *\n * @param testFn - Function that declares the test specs.\n *\n * @typeParam B - Type of the base object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "<B>(desc: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", base: "
                },
                {
                  "kind": "Content",
                  "text": "B"
                },
                {
                  "kind": "Content",
                  "text": ", testFn: "
                },
                {
                  "kind": "Reference",
                  "text": "TestFn",
                  "canonicalReference": "gs-testing!TestFn:type"
                },
                {
                  "kind": "Content",
                  "text": "<B>"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "returnTypeTokenRange": {
                "startIndex": 8,
                "endIndex": 9
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "desc",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "base",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "testFn",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 7
                  }
                }
              ],
              "typeParameters": [
                {
                  "typeParameterName": "B",
                  "constraintTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  },
                  "defaultTypeTokenRange": {
                    "startIndex": 0,
                    "endIndex": 0
                  }
                }
              ]
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!TupleTester:class",
          "docComment": "/**\n * Runs tests for tuples.\n *\n * @typeParam T - Type of the tuple.\n *\n * @typeParam O - Type of the returned mock.\n *\n * @thHidden\n *\n * @public @sealed\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class TupleTester<T extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": ", O> extends "
            },
            {
              "kind": "Reference",
              "text": "BaseTester",
              "canonicalReference": "gs-testing!BaseTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, O> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "O",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "TupleTester",
          "members": [
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!TupleTester#haveExactElements:member(1)",
              "docComment": "/**\n * Checks if the tuple has the given elements at the exact order.\n *\n * @param expected - Tuple that should match the tested tuple.\n *\n * @returns Object for mocking or testing.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "haveExactElements(expected: "
                },
                {
                  "kind": "Content",
                  "text": "T"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "O"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "expected",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "haveExactElements"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "gs-testing!tupleThat:function(1)",
          "docComment": "/**\n * Entry point for building a matcher that matches tuples.\n *\n * @typeParam T - Type of the tuple.\n *\n * @returns Matcher builder that matches tuples.  @thModule matcher\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function tupleThat<T extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": ">(): "
            },
            {
              "kind": "Reference",
              "text": "TupleTester",
              "canonicalReference": "gs-testing!TupleTester:class"
            },
            {
              "kind": "Content",
              "text": "<T, "
            },
            {
              "kind": "Reference",
              "text": "MatcherType",
              "canonicalReference": "gs-testing!MatcherType:type"
            },
            {
              "kind": "Content",
              "text": "<T>>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 7
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [],
          "typeParameters": [
            {
              "typeParameterName": "T",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "tupleThat"
        },
        {
          "kind": "Class",
          "canonicalReference": "gs-testing!WhenBuilder:class",
          "docComment": "/**\n * Defines behavior ran if the condition matches.\n *\n * @typeParam R - Return type of the `Spy`.\n *\n * @typeParam A - Argument types of the `Spy`.\n *\n * @hidden\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class WhenBuilder<R, A extends "
            },
            {
              "kind": "Content",
              "text": "unknown[]"
            },
            {
              "kind": "Content",
              "text": "> "
            }
          ],
          "releaseTag": "Public",
          "typeParameters": [
            {
              "typeParameterName": "R",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            },
            {
              "typeParameterName": "A",
              "constraintTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "defaultTypeTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              }
            }
          ],
          "name": "WhenBuilder",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "gs-testing!WhenBuilder:constructor(1)",
              "docComment": "/**\n * Constructs a new instance of the `WhenBuilder` class\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(args: "
                },
                {
                  "kind": "Content",
                  "text": "A | null"
                },
                {
                  "kind": "Content",
                  "text": ", targetSpy: "
                },
                {
                  "kind": "Reference",
                  "text": "Spy",
                  "canonicalReference": "gs-testing!Spy:interface"
                },
                {
                  "kind": "Content",
                  "text": "<R, A>"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "args",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "targetSpy",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 5
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!WhenBuilder#call:member(1)",
              "docComment": "/**\n * Sets the target spy to call the given handler and return the handler's return value if the condition is matched.\n *\n * @param handler - Function to call if the condition matches.\n *\n * @returns The modified `Spy` object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "call(handler: "
                },
                {
                  "kind": "Content",
                  "text": "(...args: A) => R"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FakesContinuationBuilder",
                  "canonicalReference": "gs-testing!FakesContinuationBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<R, A>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "handler",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "call"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!WhenBuilder#callOriginal:member(1)",
              "docComment": "/**\n * Sets the target spy to call the original implementation if the condition is matched.\n *\n * @returns The modified `Spy` object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "callOriginal(): "
                },
                {
                  "kind": "Reference",
                  "text": "FakesContinuationBuilder",
                  "canonicalReference": "gs-testing!FakesContinuationBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<R, A>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "callOriginal"
            },
            {
              "kind": "Method",
              "canonicalReference": "gs-testing!WhenBuilder#return:member(1)",
              "docComment": "/**\n * Sets the target spy to return the given value if the condition is matched.\n *\n * @param value - Value to be returned.\n *\n * @returns The modified `Spy` object.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "return(value: "
                },
                {
                  "kind": "Content",
                  "text": "R"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "FakesContinuationBuilder",
                  "canonicalReference": "gs-testing!FakesContinuationBuilder:class"
                },
                {
                  "kind": "Content",
                  "text": "<R, A>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 5
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "value",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "return"
            }
          ],
          "implementsTokenRanges": []
        }
      ]
    }
  ]
}
